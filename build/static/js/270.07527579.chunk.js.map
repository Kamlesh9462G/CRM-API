{"version":3,"file":"static/js/270.07527579.chunk.js","mappings":"oQAuKA,UAhHqB,WACnB,IAAAA,GAAqCC,EAAAA,EAAAA,KACnC,SAACC,GAAgC,OAAKA,EAAMC,MAAM,IAD5CC,EAAMJ,EAANI,OAAiBC,GAAFL,EAAPM,QAAgBN,EAAPK,SAGjBE,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,EAAmB,SACnBC,GAAgBC,EAAAA,EAAAA,MAChBC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KACdC,GAMIC,EAAAA,EAAAA,MALFC,EAAQF,EAARE,SACAC,EAAYH,EAAZG,aACAC,EAAKJ,EAALI,MACaC,EAAML,EAAnBM,UAAaD,OACbE,EAAOP,EAAPO,SAGFC,EAAAA,EAAAA,YAAU,WAERd,GAASe,EAAAA,EAAAA,IAAYlB,EAAIE,IACzBC,GAASgB,EAAAA,EAAAA,IAAQjB,GACnB,GAAG,CAACC,EAAUH,EAAIE,KAElBe,EAAAA,EAAAA,YAAU,WACJpB,GAEFgB,EAAMhB,EAEV,GAAG,CAACA,EAAQgB,IASZ,OACEO,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,EAAE,OAAMC,SAAA,EAEbC,EAAAA,EAAAA,KAAA,QAAMC,SAAUb,GAVH,SAACc,GAEhBvB,GAASwB,EAAAA,EAAAA,IAAW3B,EAAIE,EAAUwB,EAAMrB,EAAUE,IAAQqB,MAAK,WAC7DzB,GAASgB,EAAAA,EAAAA,IAAQ,UACnB,GACF,IAK2CI,UACrCH,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACC,QAAS,EAAGC,GAAI,GAAIC,GAAI,EAAGC,IAAK,EAAEV,SAAA,EAE5CH,EAAAA,EAAAA,MAACc,EAAAA,GAAG,CAAAX,SAAA,EACFC,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CAACC,SAAU,OAAQC,GAAG,IAAIC,GAAG,MAAKf,SAAC,iBAGxCC,EAAAA,EAAAA,KAACe,EAAAA,GAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACA7B,EAAS,aAAc,CAAE8B,UAAU,KAAO,IAC9CC,KAAM,KACNC,YAAa7B,EAAO8B,WAAa,UAAY,WAC7CC,aAAc,aAEf/B,EAAO8B,aACNpB,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CAACW,MAAM,UAAUV,SAAS,KAAIb,SAAC,gCAOxCH,EAAAA,EAAAA,MAACc,EAAAA,GAAG,CAAAX,SAAA,EACFC,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CAACC,SAAU,OAAQC,GAAG,IAAIC,GAAG,MAAKf,SAAC,kBAGxCC,EAAAA,EAAAA,KAACe,EAAAA,GAAKC,EAAAA,EAAAA,GAAA,CACJO,KAAK,SACLL,KAAM,KACNC,YAAmB,OAAN7B,QAAM,IAANA,GAAAA,EAAQkC,YAAc,UAAY,WAC/CH,aAAc,UACdI,YAAY,IACRtC,EAAS,cAAe,CAAE8B,UAAU,MAEzC3B,EAAOkC,cACNxB,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CAACW,MAAM,UAAUV,SAAS,KAAIb,SAAC,iCAOxCC,EAAAA,EAAAA,KAACU,EAAAA,GAAG,CACFgB,QAAS,OACTC,eAAgB,aAChBC,WAAY,SAAS7B,UAErBC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAM,CACLC,UAAWxD,EACXyD,YAAY,iBACZR,KAAK,SACLL,KAAM,KACNc,GAAI,EACJC,OAAQ,CAAEC,GAAI,WACdC,EAAE,WACFD,GAAG,UACHb,aAAc,UACdC,MAAM,iBACNc,WAAY,MACZxB,SAAU,OAAOb,SAClB,0BAQPC,EAAAA,EAAAA,KAACqC,EAAAA,QAAO,CAAC7C,QAASA,MAGxB,C","sources":["pages/course/UpdateCourse.tsx"],"sourcesContent":["/*\r\n  UpdateCourse Component:\r\n  This component is used to update an existing course.\r\n  It displays a form with inputs for the course name and price.\r\n  It uses Chakra UI components for styling.\r\n\r\n  It does the following:\r\n  - Imports necessary dependencies and components\r\n  - Defines the interface for UpdateCourses\r\n  - Initializes the useSelector hook to access the state from Redux\r\n  - Initializes the useParams hook from react-router-dom to get the course ID from the URL\r\n  - Initializes the useDispatch function from Redux\r\n  - Initializes the useNavigate hook from react-router-dom for navigation purposes\r\n  - Initializes the useToast hook from Chakra UI for displaying toast messages\r\n  - Initializes the useForm hook from react-hook-form for form handling\r\n  - Fetches the course data and all courses on component mount\r\n  - Resets the form with the fetched course data\r\n  - Handles form submission and dispatches the updateData action\r\n  - Renders the form with course name and price inputs\r\n*/\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Input,\r\n  Select,\r\n  SimpleGrid,\r\n  Stack,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { DevTool } from \"@hookform/devtools\";\r\nimport {\r\n  getData,\r\n  getDataById,\r\n  updateData,\r\n} from \"../../redux/actions/common.action\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n// Interface for the course update data structure\r\ninterface UpdateCourses {\r\n  course: {\r\n    CourseValue: string;\r\n    CourseName: string;\r\n  };\r\n  courses: {\r\n    CourseName: string;\r\n    _id: string;\r\n  }[];\r\n  loading: boolean;\r\n}\r\n\r\nconst UpdateCourse = () => {\r\n  const { course, courses, loading } = useSelector(\r\n    (state: { common: UpdateCourses }) => state.common\r\n  );\r\n  const { id } = useParams();\r\n  const endpoint: string = \"course\";\r\n  const dispatch: any = useDispatch();\r\n  const navigate = useNavigate();\r\n  const toast = useToast();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n    control,\r\n  } = useForm();\r\n\r\n  useEffect(() => {\r\n    // Fetch the course data by ID and all courses\r\n    dispatch(getDataById(id, endpoint));\r\n    dispatch(getData(endpoint));\r\n  }, [dispatch, id, endpoint]);\r\n\r\n  useEffect(() => {\r\n    if (course) {\r\n      // Reset the form with the fetched course data\r\n      reset(course);\r\n    }\r\n  }, [course, reset]);\r\n\r\n  const onSubmit = (data: any) => {\r\n    // Handle form submission and dispatch the updateData action\r\n    dispatch(updateData(id, endpoint, data, navigate, toast)).then(() => {\r\n      dispatch(getData(\"course\"));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Stack h=\"100%\">\r\n      {/* Form */}\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <SimpleGrid columns={3} px={10} py={1} gap={6}>\r\n          {/* Course Name Input */}\r\n          <Box>\r\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\r\n              Course Name\r\n            </Text>\r\n            <Input\r\n              {...register(\"CourseName\", { required: true })}\r\n              size={\"sm\"}\r\n              borderColor={errors.CourseName ? \"red.500\" : \"gray.400\"}\r\n              borderRadius={\"0.25rem\"}\r\n            />\r\n            {errors.CourseName && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                Course name is required\r\n              </Text>\r\n            )}\r\n          </Box>\r\n\r\n          {/* Course Price Input */}\r\n          <Box>\r\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\r\n              Course Price\r\n            </Text>\r\n            <Input\r\n              type=\"number\"\r\n              size={\"sm\"}\r\n              borderColor={errors?.CourseValue ? \"red.500\" : \"gray.400\"}\r\n              borderRadius={\"0.25rem\"}\r\n              placeholder=\"\"\r\n              {...register(\"CourseValue\", { required: true })}\r\n            />\r\n            {errors.CourseValue && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                Course price is required\r\n              </Text>\r\n            )}\r\n          </Box>\r\n\r\n          {/* Update Course Button */}\r\n          <Box\r\n            display={\"flex\"}\r\n            justifyContent={\"flex-start\"}\r\n            alignItems={\"center\"}\r\n          >\r\n            <Button\r\n              isLoading={loading}\r\n              loadingText=\"Please wait...\"\r\n              type=\"submit\"\r\n              size={\"sm\"}\r\n              mt={6}\r\n              _hover={{ bg: \"#FF9000\" }}\r\n              w=\"8.188rem\"\r\n              bg=\"#FF9000\"\r\n              borderRadius={\"0.25rem\"}\r\n              color=\"whiteAlpha.900\"\r\n              fontWeight={\"700\"}\r\n              fontSize={\"1rem\"}\r\n            >\r\n              Update Course\r\n            </Button>\r\n          </Box>\r\n        </SimpleGrid>\r\n      </form>\r\n\r\n      {/* DevTool for form debugging */}\r\n      <DevTool control={control} />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default UpdateCourse;\r\n"],"names":["_useSelector","useSelector","state","common","course","loading","courses","id","useParams","endpoint","dispatch","useDispatch","navigate","useNavigate","toast","useToast","_useForm","useForm","register","handleSubmit","reset","errors","formState","control","useEffect","getDataById","getData","_jsxs","Stack","h","children","_jsx","onSubmit","data","updateData","then","SimpleGrid","columns","px","py","gap","Box","Text","fontSize","ml","mb","Input","_objectSpread","required","size","borderColor","CourseName","borderRadius","color","type","CourseValue","placeholder","display","justifyContent","alignItems","Button","isLoading","loadingText","mt","_hover","bg","w","fontWeight","DevTool"],"sourceRoot":""}