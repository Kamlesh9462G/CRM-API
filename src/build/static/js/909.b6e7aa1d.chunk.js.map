{"version":3,"file":"static/js/909.b6e7aa1d.chunk.js","mappings":"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","sources":["pages/status/AddStatus.tsx","../node_modules/@chakra-ui/form-control/dist/chunk-RN6VKE3K.mjs"],"sourcesContent":["/*\r\n  AddStatus Component:\r\n  This component represents a form for adding a new status. It allows the user to enter a status name in an input field\r\n  and submit the form to add the status. It utilizes Chakra UI components for the form layout and styling.\r\n  The component dispatches actions for adding and retrieving status data.\r\n\r\n  It does the following:\r\n  - Imports necessary dependencies and components\r\n  - Defines the interfaces for statuses and loading state\r\n  - Retrieves the loading state from Redux using the useSelector hook\r\n  - Initializes the react-hook-form for form handling, including form submission and input validation\r\n  - Retrieves the dispatch function from Redux using the useDispatch hook\r\n  - Defines the endpoint for API calls\r\n  - Initializes the navigate function from react-router-dom for navigation purposes\r\n  - Initializes the useToast hook for displaying toast messages\r\n  - Handles form submission by dispatching the postData action and retrieving status data\r\n  - Renders the add status form using Chakra UI components, including the input field and submit button\r\n  - Includes the DevTool component from @hookform/devtools for form debugging (optional)\r\n*/\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  SimpleGrid,\r\n  Stack,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getData, postData } from \"../../redux/actions/common.action\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { DevTool } from \"@hookform/devtools\";\r\n\r\n//interface for the statusinput\r\ninterface Status {\r\n  StatusName: string;\r\n}\r\n\r\nconst AddStatus = () => {\r\n  // Setting the endpoint to \"status\"\r\n  const endpoint: string = \"status\";\r\n\r\n  // Accessing necessary hooks, variables, and parameters\r\n  const dispatch: any = useDispatch();\r\n  const navigate = useNavigate();\r\n  const toast = useToast();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    control,\r\n    formState: { errors },\r\n  } = useForm<Status>();\r\n\r\n  // Function to handle form submission\r\n  const onSubmit = (data: Status) => {\r\n    // Dispatching the postData action to save the form data\r\n    dispatch(postData(data, endpoint, navigate, toast)).then(() => {\r\n      // Dispatching the getData action to fetch updated status data\r\n      dispatch(getData(\"status\"));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Stack h=\"100%\">\r\n      {/* inputs starts */}\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <SimpleGrid columns={3} px={10} py={5} gap={6} mt={3}>\r\n          <Box>\r\n            <FormControl variant=\"floating\" id=\"StatusName\">\r\n              <Input\r\n                {...register(\"StatusName\", { required: true })}\r\n                borderColor={errors?.StatusName ? \"red.500\" : \"gray.400\"}\r\n                borderRadius={\"0.25rem\"}\r\n                size=\"sm\"\r\n                placeholder=\" \"\r\n              />\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Status\r\n              </FormLabel>\r\n              {errors.StatusName && (\r\n                <Text color=\"red.500\" fontSize=\"sm\">\r\n                  This field is required\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          <Box>\r\n            <Button\r\n              type=\"submit\"\r\n              size={\"sm\"}\r\n              _hover={{ bg: \"#FF9000\" }}\r\n              w=\"8.188rem\"\r\n              bg=\"#FF9000\"\r\n              borderRadius={\"0.25rem\"}\r\n              color=\"whiteAlpha.900\"\r\n              fontWeight={\"700\"}\r\n              fontSize={\"1rem\"}\r\n            >\r\n              Add Status\r\n            </Button>\r\n            {errors.StatusName && (\r\n              <Text color=\"whiteAlpha.500\" fontSize=\"sm\">\r\n                This field is required\r\n              </Text>\r\n            )}\r\n          </Box>\r\n        </SimpleGrid>\r\n      </form>\r\n      {/* inputs end */}\r\n      <DevTool control={control} />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default AddStatus;\r\n","import {\n  useFormControlContext,\n  useFormControlStyles\n} from \"./chunk-6ZNYZUDD.mjs\";\n\n// src/form-label.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */ jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : { ref, ...rest };\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      ...ownProps,\n      className: cx(\"chakra-form__label\", props.className),\n      __css: {\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles\n      },\n      children: [\n        children,\n        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator\n      ]\n    }\n  );\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(\n  function RequiredIndicator2(props, ref) {\n    const field = useFormControlContext();\n    const styles = useFormControlStyles();\n    if (!(field == null ? void 0 : field.isRequired))\n      return null;\n    const className = cx(\"chakra-form__required-indicator\", props.className);\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),\n        __css: styles.requiredIndicator,\n        className\n      }\n    );\n  }\n);\nRequiredIndicator.displayName = \"RequiredIndicator\";\n\nexport {\n  FormLabel,\n  RequiredIndicator\n};\n"],"names":["dispatch","useDispatch","navigate","useNavigate","toast","useToast","_useForm","useForm","register","handleSubmit","control","errors","formState","_jsxs","Stack","h","children","_jsx","onSubmit","data","postData","then","getData","SimpleGrid","columns","px","py","gap","mt","Box","FormControl","variant","id","Input","_objectSpread","required","borderColor","StatusName","borderRadius","size","placeholder","FormLabel","fontWeight","color","Text","fontSize","Button","type","_hover","bg","w","DevTool","forwardRef","passedProps","ref","_a","styles","useStyleConfig","props","omitThemingProps","className","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","_objectWithoutProperties","_excluded","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","cx","__css","display","textAlign","isRequired","displayName","useFormControlStyles","getRequiredIndicatorProps"],"sourceRoot":""}