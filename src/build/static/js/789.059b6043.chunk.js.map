{"version":3,"file":"static/js/789.059b6043.chunk.js","mappings":"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","sources":["pages/city/UpdateCity.tsx","../node_modules/@chakra-ui/select/dist/chunk-HQIEHZYI.mjs","../node_modules/@chakra-ui/select/dist/chunk-GJO77I2I.mjs"],"sourcesContent":["/*\n  UpdateCity Component:\n  This component allows updating a city by providing a form with a select input for the city name.\n  It utilizes Chakra UI components for styling and form handling using react-hook-form.\n\n  It does the following:\n  - Imports necessary dependencies and components\n  - Defines the interfaces for UpdateCities and FormData\n  - Retrieves the city and cities data from Redux using the useSelector hook\n  - Initializes the dispatch function from Redux using the useDispatch hook\n  - Retrieves the \"id\" parameter from the URL using the useParams hook\n  - Initializes the navigate function from react-router-dom for navigation purposes\n  - Initializes the useToast hook for displaying toast messages\n  - Defines the endpoint for API calls\n  - Initializes the react-hook-form for form handling and sets default form values based on the city data\n  - Fetches city data and the specific city by ID when the component mounts\n  - Resets the form values when the city data changes\n  - Handles form submission by dispatching the updateData action and fetching updated city data\n  - Renders the form with a select input for city name and displays form validation errors if any\n*/\n\nimport {\n  Box,\n  Button,\n  Select,\n  SimpleGrid,\n  Stack,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getData,\n  getDataById,\n  updateData,\n} from \"../../redux/actions/common.action\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { DevTool } from \"@hookform/devtools\";\n\n// Interface for the city data used in the component\ninterface UpdateCities {\n  city: {\n    CityName: string;\n  };\n  cities: {\n    CityName: string;\n    _id: string;\n  }[];\n}\n\n// Interface for form data submitted by the user\ninterface FormData {\n  CityName: string;\n}\n\nconst UpdateCity: React.FC = () => {\n  const dispatch: any = useDispatch();\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const toast = useToast();\n  const endpoint: string = \"city\";\n  const { city, cities } = useSelector(\n    (state: { common: UpdateCities }) => state.common\n  );\n\n  // Form handling using react-hook-form\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n    reset,\n    control,\n  } = useForm<FormData>({\n    defaultValues: {\n      CityName: city?.CityName || \"\",\n    },\n  });\n\n  useEffect(() => {\n    // Fetch the specific city and all city data when the component mounts\n    dispatch(getDataById(id, endpoint));\n    dispatch(getData(endpoint));\n  }, [id, dispatch]);\n\n  useEffect(() => {\n    // Reset the form values when the city data changes\n    if (city) {\n      reset({\n        CityName: city.CityName,\n      });\n    }\n  }, [city, reset]);\n\n  const onSubmit = (data: FormData) => {\n    // Handle form submission by dispatching the updateData action and fetching updated city data\n    dispatch(\n      updateData(id, endpoint, { CityName: data.CityName }, navigate, toast)\n    ).then(() => {\n      dispatch(getData(\"city\"));\n    });\n  };\n\n  return (\n    <Stack h=\"100%\">\n      {/* Form */}\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <SimpleGrid columns={3} px={10} py={1} gap={6}>\n          <Box>\n            {/* City Name Input */}\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\n              City Name\n            </Text>\n            <Select\n              {...register(\"CityName\", { required: true })}\n              size={\"sm\"}\n              borderColor={errors.CityName ? \"red.500\" : \"gray.400\"}\n              borderRadius={\"0.25rem\"}\n            >\n              {cities?.map((city) => (\n                <option key={city._id} value={city.CityName}>\n                  {city.CityName}\n                </option>\n              ))}\n            </Select>\n            {errors.CityName && (\n              <Text color=\"red.500\" fontSize=\"xs\">\n                City name is required\n              </Text>\n            )}\n          </Box>\n\n          <Box\n            mt={6}\n            display={\"flex\"}\n            justifyContent={\"flex-start\"}\n            alignItems={\"center\"}\n          >\n            {/* Update City Button */}\n            <Button\n              type=\"submit\"\n              size={\"sm\"}\n              _hover={{ bg: \"#FF9000\" }}\n              w=\"8.188rem\"\n              bg=\"#FF9000\"\n              borderRadius={\"0.25rem\"}\n              color=\"whiteAlpha.900\"\n              fontWeight={\"700\"}\n              fontSize={\"1rem\"}\n            >\n              Update City\n            </Button>\n          </Box>\n        </SimpleGrid>\n      </form>\n\n      <DevTool control={control} />\n    </Stack>\n  );\n};\n\nexport default UpdateCity;\n","// src/select-field.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar SelectField = forwardRef(\n  function SelectField2(props, ref) {\n    const { children, placeholder, className, ...rest } = props;\n    return /* @__PURE__ */ jsxs(\n      chakra.select,\n      {\n        ...rest,\n        ref,\n        className: cx(\"chakra-select\", className),\n        children: [\n          placeholder && /* @__PURE__ */ jsx(\"option\", { value: \"\", children: placeholder }),\n          children\n        ]\n      }\n    );\n  }\n);\nSelectField.displayName = \"SelectField\";\n\nexport {\n  SelectField\n};\n","import {\n  SelectField\n} from \"./chunk-HQIEHZYI.mjs\";\n\n// src/select.tsx\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport {\n  chakra,\n  forwardRef,\n  layoutPropNames,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { dataAttr } from \"@chakra-ui/shared-utils\";\n\n// ../../utilities/object-utils/src/index.ts\nfunction split(object, keys) {\n  const picked = {};\n  const omitted = {};\n  for (const [key, value] of Object.entries(object)) {\n    if (keys.includes(key))\n      picked[key] = value;\n    else\n      omitted[key] = value;\n  }\n  return [picked, omitted];\n}\n\n// src/select.tsx\nimport { cloneElement, isValidElement } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Select = forwardRef((props, ref) => {\n  var _a;\n  const styles = useMultiStyleConfig(\"Select\", props);\n  const {\n    rootProps,\n    placeholder,\n    icon,\n    color,\n    height,\n    h,\n    minH,\n    minHeight,\n    iconColor,\n    iconSize,\n    ...rest\n  } = omitThemingProps(props);\n  const [layoutProps, otherProps] = split(rest, layoutPropNames);\n  const ownProps = useFormControl(otherProps);\n  const rootStyles = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color\n  };\n  const fieldStyles = {\n    paddingEnd: \"2rem\",\n    ...styles.field,\n    _focus: {\n      zIndex: \"unset\",\n      ...(_a = styles.field) == null ? void 0 : _a[\"_focus\"]\n    }\n  };\n  return /* @__PURE__ */ jsxs(\n    chakra.div,\n    {\n      className: \"chakra-select__wrapper\",\n      __css: rootStyles,\n      ...layoutProps,\n      ...rootProps,\n      children: [\n        /* @__PURE__ */ jsx(\n          SelectField,\n          {\n            ref,\n            height: h != null ? h : height,\n            minH: minH != null ? minH : minHeight,\n            placeholder,\n            ...ownProps,\n            __css: fieldStyles,\n            children: props.children\n          }\n        ),\n        /* @__PURE__ */ jsx(\n          SelectIcon,\n          {\n            \"data-disabled\": dataAttr(ownProps.disabled),\n            ...(iconColor || color) && { color: iconColor || color },\n            __css: styles.icon,\n            ...iconSize && { fontSize: iconSize },\n            children: icon\n          }\n        )\n      ]\n    }\n  );\n});\nSelect.displayName = \"Select\";\nvar DefaultIcon = (props) => /* @__PURE__ */ jsx(\"svg\", { viewBox: \"0 0 24 24\", ...props, children: /* @__PURE__ */ jsx(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  }\n) });\nvar IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\"\n  }\n});\nvar SelectIcon = (props) => {\n  const { children = /* @__PURE__ */ jsx(DefaultIcon, {}), ...rest } = props;\n  const clone = cloneElement(children, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\"\n    }\n  });\n  return /* @__PURE__ */ jsx(IconWrapper, { ...rest, className: \"chakra-select__icon-wrapper\", children: isValidElement(children) ? clone : null });\n};\nSelectIcon.displayName = \"SelectIcon\";\n\nexport {\n  Select,\n  DefaultIcon\n};\n"],"names":["dispatch","useDispatch","id","useParams","navigate","useNavigate","toast","useToast","endpoint","_useSelector","useSelector","state","common","city","cities","_useForm","useForm","defaultValues","CityName","handleSubmit","register","errors","formState","reset","control","useEffect","getDataById","getData","_jsxs","Stack","h","children","_jsx","onSubmit","data","updateData","then","SimpleGrid","columns","px","py","gap","Box","Text","fontSize","ml","mb","Select","_objectSpread","required","size","borderColor","borderRadius","map","value","_id","color","mt","display","justifyContent","alignItems","Button","type","_hover","bg","w","fontWeight","DevTool","SelectField","forwardRef","props","ref","placeholder","className","rest","_objectWithoutProperties","_excluded","jsxs","chakra","cx","jsx","displayName","_a","styles","useMultiStyleConfig","_omitThemingProps","omitThemingProps","rootProps","icon","height","minH","minHeight","iconColor","iconSize","_split","object","keys","picked","omitted","_i","_Object$entries","Object","entries","length","_Object$entries$_i","_slicedToArray","key","includes","split","layoutPropNames","_split2","layoutProps","otherProps","ownProps","useFormControl","rootStyles","width","position","fieldStyles","paddingEnd","field","_focus","zIndex","__css","SelectIcon","dataAttr","disabled","DefaultIcon","viewBox","fill","d","IconWrapper","baseStyle","pointerEvents","top","transform","_props$children","_excluded2","clone","cloneElement","role","focusable","style","isValidElement"],"sourceRoot":""}