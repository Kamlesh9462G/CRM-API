{"version":3,"file":"static/js/501.ce5d8f56.chunk.js","mappings":"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","sources":["components/AlertDialouge.tsx","components/Loader.tsx","pages/WhatsApp/Message.tsx"],"sourcesContent":["// AlertDialogDelete Component: Displays a delete confirmation dialog using Chakra UI.\r\n// Props:\r\n// - handleDelete: Function to handle the delete action when confirmed.\r\n// - id: The identifier of the item to delete.\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n  useDisclosure,\r\n  Button,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nimport { RiDeleteBinLine } from \"react-icons/ri\";\r\nimport { useSelector } from \"react-redux\";\r\ninterface Props {\r\n  handleDelete: (id: number) => void;\r\n  id: number;\r\n}\r\n\r\ninterface Loading {\r\n  loading: boolean;\r\n}\r\n\r\nconst AlertDialogDelete: React.FC<Props> = ({ handleDelete, id }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const cancelRef = React.useRef<HTMLButtonElement>(null);\r\n  const { loading } = useSelector((state: { common: Loading }) => state.common);\r\n  const onDeleteClick = () => {\r\n    handleDelete(id);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box onClick={onOpen}>\r\n        <RiDeleteBinLine color=\"red\" size={18} cursor={\"pointer\"} />\r\n      </Box>\r\n\r\n      <AlertDialog\r\n        isOpen={isOpen}\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n      >\r\n        <AlertDialogOverlay\r\n          bg=\"blackAlpha.300\"\r\n          backdropFilter=\"blur(5px) hue-rotate(90deg)\"\r\n        >\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              Delete\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>\r\n              Are you sure? You can't undo this action afterwards.\r\n            </AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button\r\n                size=\"sm\"\r\n                fontWeight={\"medium\"}\r\n                ref={cancelRef}\r\n                onClick={onClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                fontWeight={\"medium\"}\r\n                isLoading={loading}\r\n                loadingText=\"Please wait...\"\r\n                colorScheme=\"red\"\r\n                onClick={onDeleteClick}\r\n                ml={3}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\nexport default AlertDialogDelete;\r\n","// Loader Component: Displays a loader spinner within a table row using react-loader-spinner and Chakra UI.\r\nimport { Box, Center, Spinner, Td, Tr } from \"@chakra-ui/react\";\r\nimport {\r\n  Skeleton,\r\n  SkeletonCircle,\r\n  SkeletonText,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\n// import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <Tr height={400} maxHeight=\"400px\">\r\n      <Td colSpan={25}>\r\n        <Center h=\"100%\">\r\n          {/* <Spinner\r\n            speed=\"0.3s\"\r\n            thickness=\"3px\"\r\n            emptyColor=\"gray.200\"\r\n            color=\"orange.300\"\r\n            size=\"xl\"\r\n          /> */}\r\n          {/* <Box>Heyyyyy</Box> */}\r\n          <Box>\r\n            <SkeletonText\r\n              mt=\"4\"\r\n              noOfLines={12}\r\n              spacing=\"4\"\r\n              skeletonHeight=\"4\"\r\n              width=\"84rem\"\r\n              borderRadius=\"2rem\"\r\n            />\r\n          </Box>\r\n        </Center>\r\n      </Td>\r\n    </Tr>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Spacer,\r\n  Stack,\r\n  Table,\r\n  TableContainer,\r\n  Tbody,\r\n  Td,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { deleteData, getData } from \"../../redux/actions/common.action\";\r\nimport AlertDialogDelete from \"../../components/AlertDialouge\";\r\nimport { CiEdit } from \"react-icons/ci\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { FiRefreshCcw } from \"react-icons/fi\";\r\n\r\n// Interface for city lists\r\ninterface MessageList {\r\n  loading: boolean;\r\n  message: {\r\n    serialNumber: number;\r\n    createdAt: string;\r\n    CityName: string;\r\n    _id: number;\r\n  }[];\r\n}\r\n\r\nconst MessageList: React.FC = () => {\r\n  const { message, loading } = useSelector(\r\n    (state: { common: MessageList }) => state.common\r\n  );\r\n  const dispatch: any = useDispatch();\r\n  const Navigate = useNavigate();\r\n  const endpoint: string = \"city\";\r\n  const toast = useToast();\r\n\r\n  const memoizedMessage = useMemo(() => message, [message]);\r\n\r\n  useEffect(() => {\r\n    if (memoizedMessage?.length === 0) {\r\n      // Fetch city data when the component mounts, only if there are no cities present\r\n      dispatch(getData(endpoint));\r\n    }\r\n  }, [dispatch, endpoint, memoizedMessage?.length]);\r\n\r\n  const handleDelete = async (id: number) => {\r\n    // Handle the delete operation for a city by dispatching the deleteData action and fetching updated city data\r\n    await dispatch(deleteData(id, endpoint, toast));\r\n    dispatch(getData(endpoint));\r\n  };\r\n\r\n  return (\r\n    <Stack h=\"100%\" mt={1}>\r\n      {/* City List Header */}\r\n      <Box\r\n        px={10}\r\n        h=\"40px\"\r\n        display={\"flex\"}\r\n        justifyContent={\"space-between\"}\r\n        alignItems={\"center\"}\r\n      >\r\n        <Spacer />\r\n        <Button\r\n          onClick={() => Navigate(\"/add-message\")}\r\n          mt={2}\r\n          size={\"sm\"}\r\n          _hover={{ bg: \"#FF9000\" }}\r\n          w=\"7.188rem\"\r\n          bg=\"#FF9000\"\r\n          borderRadius={\"0.25rem\"}\r\n          color=\"whiteAlpha.900\"\r\n          fontWeight={\"700\"}\r\n          fontSize={\"1rem\"}\r\n        >\r\n          Add Template\r\n        </Button>\r\n        <Box mt=\"2\" ml=\"3\">\r\n          <Button\r\n            size={\"xs\"}\r\n            borderRadius={\"full\"}\r\n            onClick={() => dispatch(getData(endpoint))}\r\n          >\r\n            <FiRefreshCcw />\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n      {/* Divider */}\r\n      <Divider bg=\"gray.300\" height=\"2px\" />\r\n      {/* City List Table */}\r\n      <TableContainer px=\"2\">\r\n        <Box overflowY=\"auto\" height={480} maxHeight=\"480px\">\r\n          <Table variant=\"simple\" size=\"sm\">\r\n            {/* Table Headers */}\r\n            <Thead bg={\"gray.100\"} position=\"sticky\" top=\"0\">\r\n              <Tr>\r\n                <Th>#</Th>\r\n                <Th>Title</Th>\r\n                <Th>Message</Th>\r\n                <Th>Status</Th>\r\n                <Th>Action</Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {/* Render city rows */}\r\n              {loading ? (\r\n                <Loader />\r\n              ) : (\r\n                message?.map((el, i) => (\r\n                  <Tr key={el._id}>\r\n                    <Td>{i + 1}</Td>\r\n                    <Td>{new Date(el.createdAt).toLocaleDateString()}</Td>\r\n                    <Td>{el.CityName}</Td>\r\n                    <Td display={\"flex\"} alignItems={\"center\"}>\r\n                      <Box\r\n                        cursor={\"pointer\"}\r\n                        mr={\"5\"}\r\n                        onClick={() => Navigate(`/update-city/${el._id}`)}\r\n                      >\r\n                        <CiEdit color=\"blue\" size={19} />\r\n                      </Box>\r\n                      <Box cursor={\"pointer\"}>\r\n                        <AlertDialogDelete\r\n                          id={el._id}\r\n                          handleDelete={handleDelete}\r\n                        />\r\n                      </Box>\r\n                    </Td>\r\n                  </Tr>\r\n                ))\r\n              )}\r\n            </Tbody>\r\n          </Table>\r\n        </Box>\r\n      </TableContainer>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default MessageList;\r\n"],"names":["_ref","handleDelete","id","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","cancelRef","React","loading","useSelector","state","common","_jsxs","_Fragment","children","_jsx","Box","onClick","RiDeleteBinLine","color","size","cursor","AlertDialog","leastDestructiveRef","AlertDialogOverlay","bg","backdropFilter","AlertDialogContent","AlertDialogHeader","fontSize","fontWeight","AlertDialogBody","AlertDialogFooter","Button","ref","isLoading","loadingText","colorScheme","ml","Tr","height","maxHeight","Td","colSpan","Center","h","SkeletonText","mt","noOfLines","spacing","skeletonHeight","width","borderRadius","_useSelector","message","dispatch","useDispatch","Navigate","useNavigate","endpoint","toast","useToast","memoizedMessage","useMemo","useEffect","length","getData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","deleteData","stop","_x","apply","arguments","Stack","px","display","justifyContent","alignItems","Spacer","_hover","w","FiRefreshCcw","Divider","TableContainer","overflowY","Table","variant","Thead","position","top","Th","Tbody","Loader","map","el","i","Date","createdAt","toLocaleDateString","CityName","mr","concat","_id","CiEdit","AlertDialogDelete"],"sourceRoot":""}