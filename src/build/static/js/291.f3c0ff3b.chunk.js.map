{"version":3,"file":"static/js/291.f3c0ff3b.chunk.js","mappings":"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","sources":["pages/user/UpdateUser.tsx"],"sourcesContent":["/*\r\n  UpdateUser Component:\r\n  This component allows updating a user by providing a form with a select input for the user name.\r\n  It utilizes Chakra UI components for styling and form handling using react-hook-form.\r\n\r\n  It does the following:\r\n  - Imports necessary dependencies and components\r\n  - Defines the interfaces for UpdateUsers and FormData\r\n  - Retrieves the user and users data from Redux using the useSelector hook\r\n  - Initializes the dispatch function from Redux using the useDispatch hook\r\n  - Retrieves the \"id\" parameter from the URL using the useParams hook\r\n  - Initializes the navigate function from react-router-dom for navigation purposes\r\n  - Initializes the useToast hook for displaying toast messages\r\n  - Defines the endpoint for API calls\r\n  - Initializes the react-hook-form for form handling and sets default form values based on the user data\r\n  - Fetches user data and the specific user by ID when the component mounts\r\n  - Resets the form values when the user data changes\r\n  - Handles form submission by dispatching the updateData action and fetching updated user data\r\n  - Renders the form with a select input for user name and displays form validation errors if any\r\n*/\r\nimport { Box, Button, Input, SimpleGrid, Stack, Text } from \"@chakra-ui/react\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getData,\r\n  getDataById,\r\n  updateData,\r\n} from \"../../redux/actions/common.action\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { DevTool } from \"@hookform/devtools\";\r\n\r\n//interface for the updating user\r\ninterface UpdateUsers {\r\n  user: {\r\n    Name: string;\r\n    UserName: string;\r\n    UserType: string;\r\n    Email: string;\r\n    Phone: string;\r\n    role: string;\r\n    Branch: string;\r\n    Permission: string;\r\n    City: string;\r\n    image: string;\r\n    serialNumber: number;\r\n    _id: string;\r\n  };\r\n}\r\n\r\n//interface for the prefilled form values\r\ninterface FormValues {\r\n  Name: string;\r\n  UserName: string;\r\n  UserType: string;\r\n  Email: string;\r\n  Phone: string;\r\n  role: string;\r\n  Branch: string;\r\n  Permission: string;\r\n  City: string;\r\n  image: string;\r\n  serialNumber: number;\r\n  _id: string;\r\n}\r\n\r\nconst UpdateUser = () => {\r\n  // Initializing form and error handling using react-hook-form\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    control,\r\n    formState: { errors },\r\n  } = useForm<FormValues>();\r\n\r\n  // Accessing the user state from the Redux store\r\n  const { user } = useSelector(\r\n    (state: { common: UpdateUsers }) => state.common\r\n  );\r\n\r\n  // Accessing the ID parameter from the URL\r\n  const { id } = useParams();\r\n\r\n  // Setting the endpoint for API requests\r\n  const endpoint: string = \"user\";\r\n\r\n  // Accessing the Redux dispatch function\r\n  const dispatch: any = useDispatch();\r\n\r\n  // Accessing the navigation function from react-router-dom\r\n  const Navigate = useNavigate();\r\n\r\n  // Fetching the user data by ID\r\n  useEffect(() => {\r\n    dispatch(getDataById(id, endpoint));\r\n  }, [id]);\r\n\r\n  // Resetting the form fields with user data when available\r\n  useEffect(() => {\r\n    if (user) {\r\n      reset(user);\r\n    }\r\n  }, [user]);\r\n\r\n  // Handling form submission\r\n  const onSubmit = (data: FormValues) => {\r\n    dispatch(updateData(id, endpoint, data)).then(() => {\r\n      dispatch(getData(\"user\"));\r\n      Navigate(\"/user-list\");\r\n    });\r\n  };\r\n  return (\r\n    <Stack h=\"100%\">\r\n      {/* heading starts */}\r\n      {/* <Box\r\n        px={10}\r\n        h=\"50px\"\r\n        display={\"flex\"}\r\n        justifyContent={\"flex-start\"}\r\n        alignItems={\"center\"}\r\n      >\r\n        {\" \"}\r\n        <Text fontSize={\"1.25rem\"} fontWeight={\"600\"}>\r\n         Update User\r\n        </Text>\r\n      </Box> */}\r\n      {/* heading end */}\r\n      {/* inputs starts */}\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <SimpleGrid columns={3} px={10} py={1} gap={6}>\r\n          <Box>\r\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\r\n              Name\r\n            </Text>\r\n            <Input\r\n              {...register(\"Name\", { required: true })}\r\n              size={\"sm\"}\r\n              borderColor={errors?.Name ? \"red.500\" : \"gray.400\"}\r\n              borderRadius={\"0.25rem\"}\r\n            />\r\n            {errors.Name && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                name is required.\r\n              </Text>\r\n            )}\r\n          </Box>\r\n          <Box>\r\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\r\n              Phone No\r\n            </Text>\r\n            <Input\r\n              {...register(\"Phone\", { required: true })}\r\n              size={\"sm\"}\r\n              borderColor={errors?.Phone ? \"red.500\" : \"gray.400\"}\r\n              borderRadius={\"0.25rem\"}\r\n              placeholder=\"\"\r\n            />\r\n            {errors.Phone && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                phone no is required.\r\n              </Text>\r\n            )}\r\n          </Box>\r\n          <Box>\r\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\r\n              Email ID\r\n            </Text>\r\n            <Input\r\n              {...register(\"Email\", { required: true })}\r\n              size={\"sm\"}\r\n              borderColor={errors?.Email ? \"red.500\" : \"gray.400\"}\r\n              borderRadius={\"0.25rem\"}\r\n              placeholder=\"\"\r\n            />\r\n            {errors.Email && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                email is required.\r\n              </Text>\r\n            )}\r\n          </Box>\r\n\r\n          <Box>\r\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\r\n              Enter Branch\r\n            </Text>\r\n            <Input\r\n              {...register(\"Branch\", { required: true })}\r\n              size={\"sm\"}\r\n              borderColor={errors?.Branch ? \"red.500\" : \"gray.400\"}\r\n              borderRadius={\"0.25rem\"}\r\n              placeholder=\"\"\r\n            />\r\n            {errors.Branch && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                Branch is required.\r\n              </Text>\r\n            )}\r\n          </Box>\r\n\r\n          <Box>\r\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\r\n              Enter City\r\n            </Text>\r\n            <Input\r\n              {...register(\"City\", { required: true })}\r\n              size={\"sm\"}\r\n              borderColor={errors?.City ? \"red.500\" : \"gray.400\"}\r\n              borderRadius={\"0.25rem\"}\r\n              placeholder=\"\"\r\n            />\r\n            {errors.City && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                City is required.\r\n              </Text>\r\n            )}\r\n          </Box>\r\n\r\n          <Box>\r\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\r\n              Enter UserName\r\n            </Text>\r\n            <Input\r\n              {...register(\"UserName\", { required: true })}\r\n              size={\"sm\"}\r\n              borderColor={errors?.UserName ? \"red.500\" : \"gray.400\"}\r\n              borderRadius={\"0.25rem\"}\r\n              placeholder=\"\"\r\n            />\r\n            {errors.UserName && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                UserName is required.\r\n              </Text>\r\n            )}\r\n          </Box>\r\n\r\n          <Box>\r\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\r\n              Enter User Profile\r\n            </Text>\r\n            <Input\r\n              {...register(\"UserType\", { required: true })}\r\n              size={\"sm\"}\r\n              borderColor={errors?.UserType ? \"red.500\" : \"gray.400\"}\r\n              borderRadius={\"0.25rem\"}\r\n              placeholder=\"\"\r\n            />\r\n            {errors.UserType && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                user profile is required.\r\n              </Text>\r\n            )}\r\n          </Box>\r\n\r\n          <Box>\r\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\r\n              Choose Image\r\n            </Text>\r\n            <Input\r\n              {...register(\"image\")}\r\n              borderColor={errors?.image ? \"red.500\" : \"gray.400\"}\r\n              size=\"sm\"\r\n              type=\"file\"\r\n              borderRadius=\"0.25rem\"\r\n              sx={{\r\n                \"::file-selector-button\": {\r\n                  bg: \"gray.500\",\r\n                  color: \"white\",\r\n                  ml: -6,\r\n                  mt: 0.7,\r\n                  py: 1.45,\r\n                  px: 12,\r\n                  mr: 15,\r\n                  borderRadius: \"0.25rem\",\r\n                  _hover: {\r\n                    bg: \"blue.600\",\r\n                  },\r\n                },\r\n              }}\r\n              flexGrow={1}\r\n            />\r\n            {errors.image && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                image is required.\r\n              </Text>\r\n            )}\r\n          </Box>\r\n          <Box\r\n            display={\"flex\"}\r\n            justifyContent={\"flex-end\"}\r\n            alignItems={\"center\"}\r\n          >\r\n            <Button\r\n              type=\"submit\"\r\n              size={\"sm\"}\r\n              mt={6}\r\n              _hover={{ bg: \"#FF9000\" }}\r\n              w=\"8.188rem\"\r\n              bg=\"#FF9000\"\r\n              borderRadius={\"0.25rem\"}\r\n              color=\"whiteAlpha.900\"\r\n              fontWeight={\"700\"}\r\n              fontSize={\"1rem\"}\r\n            >\r\n              Update User\r\n            </Button>\r\n          </Box>\r\n        </SimpleGrid>\r\n      </form>\r\n      {/* inputs end */}\r\n      <DevTool control={control} />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default UpdateUser;\r\n"],"names":["_useForm","useForm","register","handleSubmit","reset","control","errors","formState","user","useSelector","state","common","id","useParams","endpoint","dispatch","useDispatch","Navigate","useNavigate","useEffect","getDataById","_jsxs","Stack","h","children","_jsx","onSubmit","data","updateData","then","getData","SimpleGrid","columns","px","py","gap","Box","Text","fontSize","ml","mb","Input","_objectSpread","required","size","borderColor","Name","borderRadius","color","Phone","placeholder","Email","Branch","City","UserName","UserType","image","type","sx","bg","mt","mr","_hover","flexGrow","display","justifyContent","alignItems","Button","w","fontWeight","DevTool"],"sourceRoot":""}