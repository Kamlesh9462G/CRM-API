{"version":3,"file":"static/js/728.ded8cdf0.chunk.js","mappings":"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","sources":["pages/source/AddSource.tsx","../node_modules/@chakra-ui/form-control/dist/chunk-RN6VKE3K.mjs"],"sourcesContent":["/*\n  AddSource Component:\n  This component represents a form for adding a new source. It allows the user to enter a source name in an input field\n  and submit the form to add the source. It utilizes Chakra UI components for the form layout and styling.\n  The component dispatches actions for adding and retrieving source data.\n\n  It does the following:\n  - Imports necessary dependencies and components\n  - Defines the interfaces for sources and loading state\n  - Retrieves the loading state from Redux using the useSelector hook\n  - Initializes the react-hook-form for form handling, including form submission and input validation\n  - Retrieves the dispatch function from Redux using the useDispatch hook\n  - Defines the endpoint for API calls\n  - Initializes the navigate function from react-router-dom for navigation purposes\n  - Initializes the useToast hook for displaying toast messages\n  - Handles form submission by dispatching the postData action and retrieving source data\n  - Renders the add source form using Chakra UI components, including the input field and submit button\n  - Includes the DevTool component from @hookform/devtools for form debugging (optional)\n*/\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  SimpleGrid,\n  Stack,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\n\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getData, postData } from \"../../redux/actions/common.action\";\nimport { DevTool } from \"@hookform/devtools\";\n\n// Interface for the form data\ninterface AddSources {\n  SourceName: string;\n  Description: string;\n}\n\n// Interface for the loading state\ninterface Loading {\n  loading: boolean;\n}\n\nconst AddSource = () => {\n  // Accessing the 'loading' state from the common reducer\n  const { loading } = useSelector((state: { common: Loading }) => state.common);\n\n  // Initializing form methods from react-hook-form\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    control,\n  } = useForm<AddSources>();\n\n  \n  const dispatch: any = useDispatch();\n  const navigate = useNavigate();\n  const toast = useToast();\n\n  // Function to handle form submission\n  const onSubmit = (data: AddSources) => {\n    const endpoint = \"source\";\n\n    // Dispatching an action to post the form data\n    dispatch(postData(data, endpoint, navigate, toast)).then(() => {\n      // Dispatching an action to get updated source data\n      dispatch(getData(\"source\"));\n    });\n  };\n\n  return (\n    <Stack h=\"100%\">\n      {/* inputs starts */}\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <SimpleGrid columns={3} px={10} py={5} gap={6} mt={3}>\n          <Box>\n            <FormControl variant=\"floating\" id=\"SourceName\">\n              <Input\n                autoComplete=\"off\"\n                {...register(\"SourceName\", { required: true })}\n                borderColor={errors?.SourceName ? \"red.500\" : \"gray.400\"}\n                borderRadius={\"0.25rem\"}\n                size=\"sm\"\n                placeholder=\" \"\n              />\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\n                Source Name\n              </FormLabel>\n              {errors.SourceName && (\n                <Text fontSize=\"sm\" color=\"red.500\">\n                  Source name is required\n                </Text>\n              )}\n            </FormControl>\n          </Box>\n          <Box>\n            <FormControl variant=\"floating\" id=\"Description\">\n              <Input\n                autoComplete=\"off\"\n                {...register(\"Description\", { required: true })}\n                borderColor={errors?.Description ? \"red.500\" : \"gray.400\"}\n                borderRadius={\"0.25rem\"}\n                size=\"sm\"\n                placeholder=\" \"\n              />\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\n                Description\n              </FormLabel>\n              {errors.Description && (\n                <Text fontSize=\"sm\" color=\"red.500\">\n                  Description is required\n                </Text>\n              )}\n            </FormControl>\n          </Box>\n          <Box\n            display={\"flex\"}\n            justifyContent={\"flex-start\"}\n            alignItems={\"center\"}\n          >\n            <Button\n              isLoading={loading}\n              loadingText=\"Please wait...\"\n              type=\"submit\"\n              size={\"sm\"}\n              _hover={{ bg: \"#FF9000\" }}\n              w=\"8.188rem\"\n              bg=\"#FF9000\"\n              borderRadius={\"0.25rem\"}\n              color=\"whiteAlpha.900\"\n              fontWeight={\"700\"}\n              fontSize={\"1rem\"}\n            >\n              Add Source\n            </Button>\n          </Box>\n        </SimpleGrid>\n      </form>\n      {/* inputs end */}\n      <DevTool control={control} />\n    </Stack>\n  );\n};\n\nexport default AddSource;\n","import {\n  useFormControlContext,\n  useFormControlStyles\n} from \"./chunk-6ZNYZUDD.mjs\";\n\n// src/form-label.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */ jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : { ref, ...rest };\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      ...ownProps,\n      className: cx(\"chakra-form__label\", props.className),\n      __css: {\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles\n      },\n      children: [\n        children,\n        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator\n      ]\n    }\n  );\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(\n  function RequiredIndicator2(props, ref) {\n    const field = useFormControlContext();\n    const styles = useFormControlStyles();\n    if (!(field == null ? void 0 : field.isRequired))\n      return null;\n    const className = cx(\"chakra-form__required-indicator\", props.className);\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),\n        __css: styles.requiredIndicator,\n        className\n      }\n    );\n  }\n);\nRequiredIndicator.displayName = \"RequiredIndicator\";\n\nexport {\n  FormLabel,\n  RequiredIndicator\n};\n"],"names":["loading","useSelector","state","common","_useForm","useForm","register","handleSubmit","errors","formState","control","dispatch","useDispatch","navigate","useNavigate","toast","useToast","_jsxs","Stack","h","children","_jsx","onSubmit","data","postData","then","getData","SimpleGrid","columns","px","py","gap","mt","Box","FormControl","variant","id","Input","_objectSpread","autoComplete","required","borderColor","SourceName","borderRadius","size","placeholder","FormLabel","fontWeight","color","Text","fontSize","Description","display","justifyContent","alignItems","Button","isLoading","loadingText","type","_hover","bg","w","DevTool","forwardRef","passedProps","ref","_a","styles","useStyleConfig","props","omitThemingProps","className","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","_objectWithoutProperties","_excluded","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","cx","__css","textAlign","isRequired","displayName","useFormControlStyles","getRequiredIndicatorProps"],"sourceRoot":""}