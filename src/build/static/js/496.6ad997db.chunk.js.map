{"version":3,"file":"static/js/496.6ad997db.chunk.js","mappings":"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","sources":["pages/Profile/Profile.tsx","../node_modules/@chakra-ui/form-control/dist/chunk-RN6VKE3K.mjs","../node_modules/@chakra-ui/layout/dist/chunk-IWVFML3N.mjs"],"sourcesContent":["import {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  FormControl,\r\n  FormLabel,\r\n  Grid,\r\n  GridItem,\r\n  Image,\r\n  Input,\r\n  SimpleGrid,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\nimport profile from \"../../icons/logo.jpg\";\r\n\r\nimport React from \"react\";\r\n\r\nconst Profile = () => {\r\n  return (\r\n    <>\r\n      <Grid\r\n        templateAreas={`\"header header\"\r\n                  \"nav main\"\r\n                  `}\r\n        gridTemplateRows={\"auto 1fr \"}\r\n        gridTemplateColumns={\"250px 1fr\"}\r\n        // h=\"400px\"\r\n        gap=\"1\"\r\n        color=\"blackAlpha.700\"\r\n        fontWeight=\"bold\"\r\n      >\r\n        <GridItem boxShadow=\"md\" p=\"4\" rounded=\"md\" m={4} area={\"header\"}>\r\n          Update Profile\r\n        </GridItem>\r\n        <GridItem\r\n          boxShadow=\"lg\"\r\n          p=\"4\"\r\n          rounded=\"md\"\r\n          m={4}\r\n          area={\"nav\"}\r\n          display=\"flex\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Box>\r\n            <Image src={profile} alt=\"Kamlesh Gurjar\" borderRadius=\"50%\" />\r\n          </Box>\r\n        </GridItem>\r\n\r\n        <GridItem area={\"main\"} boxShadow=\"lg\" p=\"4\" rounded=\"md\" m={4}>\r\n          <Stack h=\"100%\">\r\n            {/* inputs starts */}\r\n            <form>\r\n              <SimpleGrid\r\n                columns={[1, 1, 1, 1]} // Set the number of columns for different screen sizes\r\n                autoFlow=\"row\" // Set the flow of the grid items to row\r\n                gap={7}\r\n                px={[2, 5]} // Set the horizontal padding for different screen sizes\r\n                py={[2, 5]} // Set the vertical padding for different screen sizes\r\n                minWidth=\"250px\"\r\n              >\r\n                <Flex gap=\"6\">\r\n                  <FormControl variant=\"floating\" id=\"Name\">\r\n                    <Input\r\n                      autoComplete=\"off\"\r\n                      // {...register(\"Name\", {\r\n                      //   required: \"name is required\",\r\n                      // })}\r\n                      // borderColor={errors?.Name ? \"red.500\" : \"gray.400\"}\r\n                      borderRadius={\"0.25rem\"}\r\n                      size=\"sm\"\r\n                      placeholder=\" \"\r\n                      className=\"autocomplete-input\"\r\n                    />\r\n                    <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                      Enter Name\r\n                    </FormLabel>\r\n                    {/* {errors.Name && (\r\n                    <Text color=\"red.500\" fontSize=\"xs\">\r\n                      {errors.Name?.message}\r\n                    </Text>\r\n                  )} */}\r\n                  </FormControl>\r\n                  <FormControl variant=\"floating\" id=\"Email\">\r\n                    <Input\r\n                      autoComplete=\"off\"\r\n                      // {...register(\"Email\", {\r\n                      //   required: \"email ID is required\",\r\n                      // })}\r\n                      // borderColor={errors?.Email ? \"red.500\" : \"gray.400\"}\r\n                      borderRadius={\"0.25rem\"}\r\n                      size=\"sm\"\r\n                      placeholder=\" \"\r\n                    />\r\n                    <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                      Enter Email ID\r\n                    </FormLabel>\r\n                    {/* {errors.Email && (\r\n                    <Text color=\"red.500\" fontSize=\"xs\">\r\n                      email ID is required\r\n                    </Text>\r\n                  )} */}\r\n                  </FormControl>\r\n                </Flex>\r\n\r\n                <Box>\r\n                  <FormControl variant=\"floating\" id=\"Email\">\r\n                    <Input\r\n                      autoComplete=\"off\"\r\n                      // {...register(\"Email\", {\r\n                      //   required: \"email ID is required\",\r\n                      // })}\r\n                      // borderColor={errors?.Email ? \"red.500\" : \"gray.400\"}\r\n                      borderRadius={\"0.25rem\"}\r\n                      size=\"sm\"\r\n                      placeholder=\" \"\r\n                    />\r\n                    <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                      Enter Email ID\r\n                    </FormLabel>\r\n                    {/* {errors.Email && (\r\n                    <Text color=\"red.500\" fontSize=\"xs\">\r\n                      email ID is required\r\n                    </Text>\r\n                  )} */}\r\n                  </FormControl>\r\n                </Box>\r\n                <Box>\r\n                  <FormControl variant=\"floating\" id=\"Password\">\r\n                    <Input\r\n                      autoComplete=\"off\"\r\n                      // {...register(\"UserName\", {\r\n                      //   required: \"UserName is required\",\r\n                      // })}\r\n                      // borderColor={errors?.UserName ? \"red.500\" : \"gray.400\"}\r\n                      borderRadius={\"0.25rem\"}\r\n                      size=\"sm\"\r\n                      placeholder=\" \"\r\n                    />\r\n                    <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                      Enter Current Password\r\n                    </FormLabel>\r\n                    {/* {errors.UserName && (\r\n                    <Text color=\"red.500\" fontSize=\"xs\">\r\n                      username is required\r\n                    </Text>\r\n                  )} */}\r\n                  </FormControl>\r\n                </Box>\r\n                <Box>\r\n                  <FormControl variant=\"floating\" id=\"UserType\">\r\n                    <Input\r\n                      autoComplete=\"off\"\r\n                      // {...register(\"UserType\", {\r\n                      //   required: \"UserType is required\",\r\n                      // })}\r\n                      // borderColor={errors?.UserType ? \"red.500\" : \"gray.400\"}\r\n                      borderRadius={\"0.25rem\"}\r\n                      size=\"sm\"\r\n                      placeholder=\" \"\r\n                    />\r\n                    <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                      Enter New Password\r\n                    </FormLabel>\r\n                    {/* {errors.UserType && (\r\n                    <Text color=\"red.500\" fontSize=\"xs\">\r\n                      user type is required\r\n                    </Text>\r\n                  )} */}\r\n                  </FormControl>\r\n                </Box>\r\n                <Box>\r\n                  <FormControl variant=\"floating\" id=\"UserType\">\r\n                    <Input\r\n                      autoComplete=\"off\"\r\n                      // {...register(\"UserType\", {\r\n                      //   required: \"UserType is required\",\r\n                      // })}\r\n                      // borderColor={errors?.UserType ? \"red.500\" : \"gray.400\"}\r\n                      borderRadius={\"0.25rem\"}\r\n                      size=\"sm\"\r\n                      placeholder=\" \"\r\n                    />\r\n                    <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                      Enter Confirm Password\r\n                    </FormLabel>\r\n                    {/* {errors.UserType && (\r\n                    <Text color=\"red.500\" fontSize=\"xs\">\r\n                      user type is required\r\n                    </Text>\r\n                  )} */}\r\n                  </FormControl>\r\n                </Box>\r\n              </SimpleGrid>\r\n            </form>\r\n            {/* inputs end */}\r\n          </Stack>\r\n        </GridItem>\r\n      </Grid>\r\n      <Box\r\n        display={\"flex\"}\r\n        justifyContent={\"flex-end\"}\r\n        alignItems={\"center\"}\r\n        mx={4}\r\n      >\r\n        <Button\r\n          type=\"submit\"\r\n          m={6}\r\n          size={\"sm\"}\r\n          _hover={{ bg: \"#FF9000\" }}\r\n          w=\"8.188rem\"\r\n          bg=\"#FF9000\"\r\n          borderRadius={\"0.25rem\"}\r\n          color=\"whiteAlpha.900\"\r\n          fontWeight={\"700\"}\r\n          fontSize={\"1rem\"}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import {\n  useFormControlContext,\n  useFormControlStyles\n} from \"./chunk-6ZNYZUDD.mjs\";\n\n// src/form-label.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */ jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : { ref, ...rest };\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      ...ownProps,\n      className: cx(\"chakra-form__label\", props.className),\n      __css: {\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles\n      },\n      children: [\n        children,\n        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator\n      ]\n    }\n  );\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(\n  function RequiredIndicator2(props, ref) {\n    const field = useFormControlContext();\n    const styles = useFormControlStyles();\n    if (!(field == null ? void 0 : field.isRequired))\n      return null;\n    const className = cx(\"chakra-form__required-indicator\", props.className);\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),\n        __css: styles.requiredIndicator,\n        className\n      }\n    );\n  }\n);\nRequiredIndicator.displayName = \"RequiredIndicator\";\n\nexport {\n  FormLabel,\n  RequiredIndicator\n};\n","// src/grid-item.tsx\nimport {\n  forwardRef,\n  chakra\n} from \"@chakra-ui/system\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction spanFn(span) {\n  return mapResponsive(\n    span,\n    (value) => value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`\n  );\n}\nvar GridItem = forwardRef(function GridItem2(props, ref) {\n  const {\n    area,\n    colSpan,\n    colStart,\n    colEnd,\n    rowEnd,\n    rowSpan,\n    rowStart,\n    ...rest\n  } = props;\n  const styles = compact({\n    gridArea: area,\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd\n  });\n  return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n});\nGridItem.displayName = \"GridItem\";\n\nexport {\n  GridItem\n};\n"],"names":["_jsxs","_Fragment","children","Grid","templateAreas","gridTemplateRows","gridTemplateColumns","gap","color","fontWeight","_jsx","GridItem","boxShadow","p","rounded","m","area","display","justifyContent","alignItems","Box","Image","src","profile","alt","borderRadius","Stack","h","SimpleGrid","columns","autoFlow","px","py","minWidth","Flex","FormControl","variant","id","Input","autoComplete","size","placeholder","className","FormLabel","mx","Button","type","_hover","bg","w","fontSize","forwardRef","passedProps","ref","_a","styles","useStyleConfig","props","omitThemingProps","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","_objectWithoutProperties","_excluded","field","useFormControlContext","ownProps","getLabelProps","_objectSpread","jsxs","chakra","cx","__css","textAlign","isRequired","displayName","useFormControlStyles","getRequiredIndicatorProps","spanFn","span","mapResponsive","value","concat","colSpan","colStart","colEnd","rowEnd","rowSpan","rowStart","compact","gridArea","gridColumn","gridRow","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd"],"sourceRoot":""}