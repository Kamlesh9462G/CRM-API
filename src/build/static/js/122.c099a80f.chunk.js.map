{"version":3,"file":"static/js/122.c099a80f.chunk.js","mappings":"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","sources":["pages/branch/UpdateBranch.tsx","../node_modules/@chakra-ui/select/dist/chunk-HQIEHZYI.mjs","../node_modules/@chakra-ui/select/dist/chunk-GJO77I2I.mjs"],"sourcesContent":["/*\n  UpdateBranch Component:\n  This component represents a form for updating a branch. It allows the user to select a branch name from a dropdown\n  and submit the form to update the branch details. It utilizes Chakra UI components for the form layout and styling.\n  The component retrieves the branch data and dispatches actions for updating and retrieving branch data.\n\n  It does the following:\n  - Imports necessary dependencies and components\n  - Defines the interfaces for the update branches and form data\n  - Retrieves the branch ID from the URL parameters using the useParams hook\n  - Initializes the navigate function from react-router-dom for navigation purposes\n  - Initializes the useToast hook for displaying toast messages\n  - Defines the endpoint for API calls\n  - Retrieves the branch and branches data from Redux using the useSelector hook\n  - Initializes the react-hook-form for form handling, including form submission and input validation\n  - Retrieves the branch data and all branches data from the server using the useEffect hook\n  - Resets the form fields when the branch data is fetched\n  - Handles form submission by dispatching the updateData action and retrieving updated branch data\n  - Renders the update branch form using Chakra UI components, including the heading, input fields, and submit button\n  - Includes the DevTool component from @hookform/devtools for form debugging (optional)\n*/\n\nimport {\n  Box,\n  Button,\n  Select,\n  SimpleGrid,\n  Stack,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getData,\n  getDataById,\n  updateData,\n} from \"../../redux/actions/common.action\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { DevTool } from \"@hookform/devtools\";\n\n// Interface for update branches\ninterface UpdateBranches {\n  branch: {\n    BranchName: string;\n  };\n  branches: {\n    BranchName: string;\n    _id: string;\n  }[];\n}\n\n// Interface for form data\ninterface FormData {\n  BranchName: string;\n}\n\nconst UpdateBranch: React.FC = () => {\n  const dispatch: any = useDispatch();\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const toast = useToast();\n  const endpoint: string = \"branch\";\n  const { branch, branches } = useSelector(\n    (state: { common: UpdateBranches }) => state.common\n  );\n\n  // Initialize react-hook-form for form handling\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n    reset,\n    control,\n  } = useForm<FormData>({\n    defaultValues: {\n      BranchName: branch?.BranchName || \"\",\n    },\n  });\n\n  useEffect(() => {\n    // Fetch the branch and all branches data from the server\n    dispatch(getDataById(id, endpoint));\n    dispatch(getData(endpoint));\n  }, [id, dispatch]);\n\n  useEffect(() => {\n    // Reset form fields when branch data is fetched\n    if (branch) {\n      reset({\n        BranchName: branch.BranchName,\n      });\n    }\n  }, [branch, reset]);\n\n  const onSubmit = (data: FormData) => {\n    // Handle form submission by dispatching the updateData action and retrieving updated branch data\n    dispatch(\n      updateData(id, endpoint, { BranchName: data.BranchName }, navigate, toast)\n    ).then(() => {\n      dispatch(getData(\"branch\"));\n    });\n  };\n\n  return (\n    <Stack h=\"100%\">\n      {/* Heading */}\n      <Box\n        px={10}\n        h=\"50px\"\n        display={\"flex\"}\n        justifyContent={\"flex-start\"}\n        alignItems={\"center\"}\n      >\n        <Text fontSize={\"1.25rem\"} fontWeight={\"600\"}>\n          Update Branch\n        </Text>\n      </Box>\n\n      {/* Form */}\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <SimpleGrid columns={3} px={10} py={1} gap={6}>\n          <Box>\n            {/* Branch Name */}\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\n              Branch Name\n            </Text>\n            <Select\n              {...register(\"BranchName\", { required: true })}\n              size={\"sm\"}\n              borderColor={errors.BranchName ? \"red.500\" : \"gray.400\"}\n              borderRadius={\"0.25rem\"}\n            >\n              {branches?.map((branch) => (\n                <option key={branch._id} value={branch.BranchName}>\n                  {branch.BranchName}\n                </option>\n              ))}\n            </Select>\n            {errors.BranchName && (\n              <Text color=\"red.500\" fontSize=\"xs\">\n                Branch name is required\n              </Text>\n            )}\n          </Box>\n\n          <Box\n            mt={6}\n            display={\"flex\"}\n            justifyContent={\"flex-start\"}\n            alignItems={\"center\"}\n          >\n            {/* Update Branch Button */}\n            <Button\n              type=\"submit\"\n              size={\"sm\"}\n              _hover={{ bg: \"#FF9000\" }}\n              w=\"8.188rem\"\n              bg=\"#FF9000\"\n              borderRadius={\"0.25rem\"}\n              color=\"whiteAlpha.900\"\n              fontWeight={\"700\"}\n              fontSize={\"1rem\"}\n            >\n              Update Branch\n            </Button>\n          </Box>\n        </SimpleGrid>\n      </form>\n\n      {/* DevTool (optional) */}\n      <DevTool control={control} />\n    </Stack>\n  );\n};\n\nexport default UpdateBranch;\n","// src/select-field.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar SelectField = forwardRef(\n  function SelectField2(props, ref) {\n    const { children, placeholder, className, ...rest } = props;\n    return /* @__PURE__ */ jsxs(\n      chakra.select,\n      {\n        ...rest,\n        ref,\n        className: cx(\"chakra-select\", className),\n        children: [\n          placeholder && /* @__PURE__ */ jsx(\"option\", { value: \"\", children: placeholder }),\n          children\n        ]\n      }\n    );\n  }\n);\nSelectField.displayName = \"SelectField\";\n\nexport {\n  SelectField\n};\n","import {\n  SelectField\n} from \"./chunk-HQIEHZYI.mjs\";\n\n// src/select.tsx\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport {\n  chakra,\n  forwardRef,\n  layoutPropNames,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { dataAttr } from \"@chakra-ui/shared-utils\";\n\n// ../../utilities/object-utils/src/index.ts\nfunction split(object, keys) {\n  const picked = {};\n  const omitted = {};\n  for (const [key, value] of Object.entries(object)) {\n    if (keys.includes(key))\n      picked[key] = value;\n    else\n      omitted[key] = value;\n  }\n  return [picked, omitted];\n}\n\n// src/select.tsx\nimport { cloneElement, isValidElement } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Select = forwardRef((props, ref) => {\n  var _a;\n  const styles = useMultiStyleConfig(\"Select\", props);\n  const {\n    rootProps,\n    placeholder,\n    icon,\n    color,\n    height,\n    h,\n    minH,\n    minHeight,\n    iconColor,\n    iconSize,\n    ...rest\n  } = omitThemingProps(props);\n  const [layoutProps, otherProps] = split(rest, layoutPropNames);\n  const ownProps = useFormControl(otherProps);\n  const rootStyles = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color\n  };\n  const fieldStyles = {\n    paddingEnd: \"2rem\",\n    ...styles.field,\n    _focus: {\n      zIndex: \"unset\",\n      ...(_a = styles.field) == null ? void 0 : _a[\"_focus\"]\n    }\n  };\n  return /* @__PURE__ */ jsxs(\n    chakra.div,\n    {\n      className: \"chakra-select__wrapper\",\n      __css: rootStyles,\n      ...layoutProps,\n      ...rootProps,\n      children: [\n        /* @__PURE__ */ jsx(\n          SelectField,\n          {\n            ref,\n            height: h != null ? h : height,\n            minH: minH != null ? minH : minHeight,\n            placeholder,\n            ...ownProps,\n            __css: fieldStyles,\n            children: props.children\n          }\n        ),\n        /* @__PURE__ */ jsx(\n          SelectIcon,\n          {\n            \"data-disabled\": dataAttr(ownProps.disabled),\n            ...(iconColor || color) && { color: iconColor || color },\n            __css: styles.icon,\n            ...iconSize && { fontSize: iconSize },\n            children: icon\n          }\n        )\n      ]\n    }\n  );\n});\nSelect.displayName = \"Select\";\nvar DefaultIcon = (props) => /* @__PURE__ */ jsx(\"svg\", { viewBox: \"0 0 24 24\", ...props, children: /* @__PURE__ */ jsx(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  }\n) });\nvar IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\"\n  }\n});\nvar SelectIcon = (props) => {\n  const { children = /* @__PURE__ */ jsx(DefaultIcon, {}), ...rest } = props;\n  const clone = cloneElement(children, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\"\n    }\n  });\n  return /* @__PURE__ */ jsx(IconWrapper, { ...rest, className: \"chakra-select__icon-wrapper\", children: isValidElement(children) ? clone : null });\n};\nSelectIcon.displayName = \"SelectIcon\";\n\nexport {\n  Select,\n  DefaultIcon\n};\n"],"names":["dispatch","useDispatch","id","useParams","navigate","useNavigate","toast","useToast","endpoint","_useSelector","useSelector","state","common","branch","branches","_useForm","useForm","defaultValues","BranchName","handleSubmit","register","errors","formState","reset","control","useEffect","getDataById","getData","_jsxs","Stack","h","children","_jsx","Box","px","display","justifyContent","alignItems","Text","fontSize","fontWeight","onSubmit","data","updateData","then","SimpleGrid","columns","py","gap","ml","mb","Select","_objectSpread","required","size","borderColor","borderRadius","map","value","_id","color","mt","Button","type","_hover","bg","w","DevTool","SelectField","forwardRef","props","ref","placeholder","className","rest","_objectWithoutProperties","_excluded","jsxs","chakra","cx","jsx","displayName","_a","styles","useMultiStyleConfig","_omitThemingProps","omitThemingProps","rootProps","icon","height","minH","minHeight","iconColor","iconSize","_split","object","keys","picked","omitted","_i","_Object$entries","Object","entries","length","_Object$entries$_i","_slicedToArray","key","includes","split","layoutPropNames","_split2","layoutProps","otherProps","ownProps","useFormControl","rootStyles","width","position","fieldStyles","paddingEnd","field","_focus","zIndex","__css","SelectIcon","dataAttr","disabled","DefaultIcon","viewBox","fill","d","IconWrapper","baseStyle","pointerEvents","top","transform","_props$children","_excluded2","clone","cloneElement","role","focusable","style","isValidElement"],"sourceRoot":""}