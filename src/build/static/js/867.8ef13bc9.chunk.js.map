{"version":3,"file":"static/js/867.8ef13bc9.chunk.js","mappings":"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","sources":["pages/user/AddnewUser.tsx"],"sourcesContent":["/*\r\n  AddnewUser Component:\r\n  This component is a form for adding a new user. It provides the following functionalities:\r\n  - Input fields for capturing user details such as name, phone number, email, branch, city, username,\r\n    user type, and password.\r\n  - An option to upload an image for the user.\r\n  - A dropdown for selecting permissions.\r\n  - Validation for required fields and password length.\r\n  - Dispatching Redux actions to fetch branch, user, and city data.\r\n  - Submitting the form data to the server using Redux actions.\r\n  - Navigating to the \"team-list\" page upon successful submission.\r\n\r\n  The form data is handled using the react-hook-form library, and Chakra UI components are used for styling.\r\n*/\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Select as ChakraSelect,\r\n  SimpleGrid,\r\n  Stack,\r\n  Text,\r\n  Grid,\r\n  GridItem,\r\n  HStack,\r\n  Checkbox,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getData, postData } from \"../../redux/actions/common.action\";\r\nimport Select from \"react-select\";\r\n// import Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { DevTool } from \"@hookform/devtools\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\n\r\ninterface AddUsers {\r\n  Email: string;\r\n  Name: string;\r\n  UserName: string;\r\n  UserProfile: string;\r\n  UserType: number;\r\n  Phone: number;\r\n  MacAddress: string;\r\n\r\n  City: string;\r\n  Branch: string;\r\n  Password: string;\r\n  // image: any;\r\n  // selectedUsers: Array<string>;\r\n}\r\n\r\n// const initialState: AddUsers = {\r\n//   Email: \"\",\r\n//   Name: \"\",\r\n//   UserName: \"\",\r\n//   UserType: \"\",\r\n//   Phone: 0,\r\n//   City: \"\",\r\n//   MacAddress: \"\",\r\n//   Password: \"\",\r\n//   Branch: \"\",\r\n//   Password: \"\",\r\n//   image: null,\r\n// };\r\ninterface imageData {\r\n  file: any;\r\n}\r\nconst initialImage = {\r\n  file: null,\r\n};\r\n\r\ninterface SigninUser {\r\n  signinuser: {\r\n    UserType: number;\r\n    menuPermissions: [string];\r\n  };\r\n}\r\n\r\nconst AddnewUser: React.FC = () => {\r\n  // const [formData, setFormdata] = useState(null);\r\n  const [image, setImage] = useState<imageData>(initialImage);\r\n  const [selectedMenus, setSelectedMenus] = useState<string[]>([]);\r\n\r\n  //getting the values of branch ,users and city using  the useSelector hook from common reducer.\r\n  const { branches, users, cities } = useSelector((state: any) => state.common);\r\n\r\n  const { signinuser } = useSelector(\r\n    (state: { common: SigninUser }) => state.common\r\n  );\r\n\r\n  // Extract the permissions from the signinuser object\r\n  const { menuPermissions } = signinuser;\r\n\r\n  console.log(menuPermissions);\r\n\r\n  // Destructuring the methods and properties from the useForm hook\r\n  const {\r\n    register, // Function to register form inputs\r\n    handleSubmit, // Function to handle form submission\r\n    control, // Form control for inputs\r\n    // setValue, // Function to set form input values\r\n    formState: { errors }, // Object containing form validation errors\r\n  } = useForm<AddUsers>();\r\n\r\n  // Fetch branch, user, and city data when the component mounts\r\n  useEffect(() => {\r\n    dispatch(getData(\"branch\")); // Fetch branch data\r\n    dispatch(getData(\"user\")); // Fetch user data\r\n    dispatch(getData(\"city\")); // Fetch city data\r\n  }, [getData]);\r\n\r\n  const endpoint: string = \"user\"; // API endpoint for posting user data\r\n  const dispatch: any = useDispatch();\r\n  const Navigate = useNavigate();\r\n\r\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    setImage({\r\n      ...image,\r\n      file: file || null, // Store the selected file in the formData\r\n    });\r\n  };\r\n\r\n  const toast = useToast();\r\n\r\n  const handleCheckboxChange = (\r\n    e: React.ChangeEvent<HTMLInputElement>,\r\n    value: string\r\n  ) => {\r\n    if (e.target.checked) {\r\n      setSelectedMenus((prevPermissions) => [...prevPermissions, value]);\r\n    } else {\r\n      setSelectedMenus((prevPermissions) =>\r\n        prevPermissions.filter((permission) => permission !== value)\r\n      );\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData: AddUsers) => {\r\n    const requestData = {\r\n      ...formData,\r\n      UserType: 2,\r\n      // file: image.file,\r\n      menuPermissions: selectedMenus,\r\n    };\r\n\r\n    const selectedPermissions = selectedUsers.map((user: any) => user.label);\r\n    // requestData.selectedUsers = selectedPermissions;\r\n\r\n    dispatch(postData(requestData, endpoint, Navigate, toast)).then(() => {\r\n      dispatch(getData(\"user\")); // Fetch updated user data after successful submission\r\n      Navigate(\"/user-list\"); // Navigate to the \"team-list\" page\r\n      console.log(\"ok\");\r\n    });\r\n  };\r\n\r\n  // Create option elements for each branch\r\n  const branchoptions = branches?.map((branch: any) => (\r\n    <option key={branch._id} value={branch.BranchName}>\r\n      {branch.BranchName}\r\n    </option>\r\n  ));\r\n\r\n  // Create option elements for each city\r\n  const cityoptions = cities?.map((city: any) => (\r\n    <option key={city._id} value={city.CityName}>\r\n      {city.CityName}\r\n    </option>\r\n  ));\r\n\r\n  const animatedComponents = makeAnimated();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n\r\n  const handleSelectChange = (selectedOptions: any) => {\r\n    setSelectedUsers(selectedOptions);\r\n  };\r\n\r\n  // Create options for each user\r\n  const userOptions = users?.map((user: any) => ({\r\n    value: user._id,\r\n    label: user.Name,\r\n  }));\r\n\r\n  return (\r\n    <Stack h=\"100%\">\r\n      {/* inputs starts */}\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <SimpleGrid\r\n          columns={[1, 1, 2, 3]} // Set the number of columns for different screen sizes\r\n          autoFlow=\"row\" // Set the flow of the grid items to row\r\n          gap={7}\r\n          px={[2, 5]} // Set the horizontal padding for different screen sizes\r\n          py={[2, 5]} // Set the vertical padding for different screen sizes\r\n          minWidth=\"250px\"\r\n        >\r\n          <Box>\r\n            <FormControl variant=\"floating\" id=\"Name\">\r\n              <Input\r\n                autoComplete=\"off\"\r\n                {...register(\"Name\", {\r\n                  required: \"name is required\",\r\n                })}\r\n                borderColor={errors?.Name ? \"red.500\" : \"gray.400\"}\r\n                borderRadius={\"0.25rem\"}\r\n                size=\"sm\"\r\n                placeholder=\" \"\r\n                className=\"autocomplete-input\"\r\n              />\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Enter Name\r\n              </FormLabel>\r\n              {errors.Name && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  {errors.Name?.message}\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          <Box>\r\n            <FormControl variant=\"floating\" id=\"Phone\">\r\n              <Input\r\n                autoComplete=\"off\"\r\n                {...register(\"Phone\", {\r\n                  required: \"mobile no is required\",\r\n                })}\r\n                borderColor={errors?.Phone ? \"red.500\" : \"gray.400\"}\r\n                borderRadius={\"0.25rem\"}\r\n                size=\"sm\"\r\n                placeholder=\" \"\r\n                type=\"number\"\r\n              />\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Enter Phone No.\r\n              </FormLabel>\r\n              {errors.Phone && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  mobile no is required\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          <Box>\r\n            <FormControl variant=\"floating\" id=\"Email\">\r\n              <Input\r\n                autoComplete=\"off\"\r\n                {...register(\"Email\", {\r\n                  required: \"email ID is required\",\r\n                })}\r\n                borderColor={errors?.Email ? \"red.500\" : \"gray.400\"}\r\n                borderRadius={\"0.25rem\"}\r\n                size=\"sm\"\r\n                placeholder=\" \"\r\n              />\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Enter Email ID\r\n              </FormLabel>\r\n              {errors.Email && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  email ID is required\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          <Box>\r\n            <FormControl variant=\"floating\" id=\"Branch\">\r\n              <ChakraSelect\r\n                {...register(\"Branch\", {\r\n                  required: \"Branch is required\",\r\n                })}\r\n                borderColor={errors?.Branch ? \"red.500\" : \"gray.400\"}\r\n                size=\"sm\"\r\n                borderRadius={\"0.25rem\"}\r\n                placeholder=\"\"\r\n              >\r\n                {\" \"}\r\n                <option value=\"\" disabled selected>\r\n                  Select Branch\r\n                </option>\r\n                {branchoptions}\r\n              </ChakraSelect>\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Branch\r\n              </FormLabel>\r\n              {errors.Branch && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  branch is required\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          <Box>\r\n            <FormControl variant=\"floating\" id=\"City\">\r\n              <ChakraSelect\r\n                {...register(\"City\", {\r\n                  required: \"City is required\",\r\n                })}\r\n                borderColor={errors?.City ? \"red.500\" : \"gray.400\"}\r\n                size=\"sm\"\r\n                borderRadius={\"0.25rem\"}\r\n                placeholder=\"\"\r\n              >\r\n                <option value=\"\" disabled selected>\r\n                  Select City\r\n                </option>\r\n                {cityoptions}\r\n              </ChakraSelect>\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                City\r\n              </FormLabel>\r\n              {errors.City && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  City is required\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          <Box>\r\n            <FormControl variant=\"floating\" id=\"UserName\">\r\n              <Input\r\n                autoComplete=\"off\"\r\n                {...register(\"UserName\", {\r\n                  required: \"UserName is required\",\r\n                })}\r\n                borderColor={errors?.UserName ? \"red.500\" : \"gray.400\"}\r\n                borderRadius={\"0.25rem\"}\r\n                size=\"sm\"\r\n                placeholder=\" \"\r\n              />\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Enter Unique Username\r\n              </FormLabel>\r\n              {errors.UserName && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  username is required\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          <Box>\r\n            <FormControl variant=\"floating\" id=\"UserProfile\">\r\n              <Input\r\n                autoComplete=\"off\"\r\n                {...register(\"UserProfile\", {\r\n                  required: \"UserProfile is required\",\r\n                })}\r\n                borderColor={errors?.UserProfile ? \"red.500\" : \"gray.400\"}\r\n                borderRadius={\"0.25rem\"}\r\n                size=\"sm\"\r\n                placeholder=\" \"\r\n              />\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Enter User Profile\r\n              </FormLabel>\r\n              {errors.UserProfile && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  UserProfile is required\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          {/* <Box mt=\"-3\">\r\n            <Text fontSize={\"0.9rem\"} ml=\"2\" mb=\"0.5\">\r\n              Permissions\r\n            </Text>\r\n            <Select\r\n              {...register(\"selectedUsers\", {\r\n                required: \"Permisssions is required\",\r\n              })}\r\n              id=\"assigned-users\"\r\n              name=\"assigned-users\"\r\n              className=\"react-select-sm\"\r\n              styles={{\r\n                control: (provided, state) => ({\r\n                  ...provided,\r\n                  background: \"#fff\",\r\n                  borderColor: \"#9e9e9e\",\r\n                  minHeight: \"30px\",\r\n                  height: \"30px\",\r\n                  // boxShadow: state.isFocused ? null : null,\r\n                }),\r\n\r\n                valueContainer: (provided, state) => ({\r\n                  ...provided,\r\n                  height: \"30px\",\r\n                  padding: \"0 6px\",\r\n                }),\r\n\r\n                input: (provided, state) => ({\r\n                  ...provided,\r\n                  margin: \"0px\",\r\n                }),\r\n                indicatorSeparator: (state) => ({\r\n                  display: \"none\",\r\n                }),\r\n                indicatorsContainer: (provided, state) => ({\r\n                  ...provided,\r\n                  height: \"30px\",\r\n                }),\r\n              }}\r\n              placeholder=\"Select Permisssions\"\r\n              isMulti\r\n              components={animatedComponents}\r\n              options={userOptions}\r\n              value={selectedUsers}\r\n              onChange={handleSelectChange}\r\n            />\r\n            {errors.selectedUsers && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                {errors.selectedUsers.message}\r\n              </Text>\r\n            )}\r\n          </Box> */}\r\n          <Box\r\n            display={\"flex\"}\r\n            justifyContent={\"flex-end\"}\r\n            alignItems={\"center\"}\r\n          ></Box>{\" \"}\r\n        </SimpleGrid>\r\n        <Grid\r\n          templateColumns=\"repeat(3, 1fr)\"\r\n          gap={4}\r\n          autoFlow=\"row\" // Set the flow of the grid items to row\r\n          px={[2, 5]} // Set the horizontal padding for different screen sizes\r\n          minWidth=\"250px\"\r\n        >\r\n          <GridItem colSpan={1}>\r\n            <Box>\r\n              <Text fontSize={\"0.9rem\"} ml=\"2\" mb=\"0.5\">\r\n                User Image\r\n              </Text>\r\n              <Input\r\n                // {...register(\"image\", {\r\n                //   required: \"image is required\",\r\n                // })}\r\n                borderColor={\"gray.400\"}\r\n                size=\"sm\"\r\n                type=\"file\"\r\n                borderRadius=\"0.25rem\"\r\n                sx={{\r\n                  \"::file-selector-button\": {\r\n                    bg: \"gray.500\",\r\n                    color: \"white\",\r\n                    ml: -6,\r\n                    mt: 0.7,\r\n                    py: 1.45,\r\n                    px: 12,\r\n                    mr: 15,\r\n                    borderRadius: \"0.25rem\",\r\n                    _hover: {\r\n                      bg: \"blue.600\",\r\n                    },\r\n                  },\r\n                }}\r\n                flexGrow={1}\r\n                onChange={handleImageChange}\r\n              />\r\n              {/* {errors.image && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  image is required\r\n                </Text>\r\n              )} */}\r\n            </Box>\r\n          </GridItem>\r\n          <GridItem colSpan={2}>\r\n            <Box className=\"inputSection\">\r\n              <Text className=\"inputLabel\">Permissions</Text>\r\n              <HStack\r\n                spacing={2}\r\n                align=\"stretch\"\r\n                className=\"mb-2 items-center w-full text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg sm:flex dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n                wrap={\"wrap\"}\r\n              >\r\n                {menuPermissions?.map((data, index) => (\r\n                  <Box\r\n                    key={index}\r\n                    className=\"w-full border-b border-gray-200 sm:border-b-0 sm:border-r dark:border-gray-600\"\r\n                    display=\"flex\"\r\n                    alignItems=\"center\"\r\n                    pl={3}\r\n                  >\r\n                    <Checkbox\r\n                      id=\"vue-checkbox-list\"\r\n                      value={data}\r\n                      size=\"sm\"\r\n                      colorScheme=\"blue\"\r\n                      bg=\"gray.100\"\r\n                      border=\"gray.300\"\r\n                      borderRadius=\"md\"\r\n                      checked={selectedMenus.includes(data)} // Add this line\r\n                      onChange={(e) => handleCheckboxChange(e, data)} // Add this line\r\n                    />\r\n\r\n                    <Text\r\n                      py={3}\r\n                      ml={2}\r\n                      fontSize=\"sm\"\r\n                      fontWeight=\"medium\"\r\n                      color=\"gray.900\"\r\n                      _dark={{ color: \"gray.300\" }}\r\n                    >\r\n                      {data}\r\n                    </Text>\r\n                  </Box>\r\n                ))}\r\n              </HStack>\r\n            </Box>\r\n          </GridItem>\r\n        </Grid>\r\n        <Box\r\n          display={\"flex\"}\r\n          justifyContent={\"flex-end\"}\r\n          alignItems={\"center\"}\r\n          mx={4}\r\n        >\r\n          <Button\r\n            type=\"submit\"\r\n            mt={6}\r\n            size={\"sm\"}\r\n            _hover={{ bg: \"#FF9000\" }}\r\n            w=\"8.188rem\"\r\n            bg=\"#FF9000\"\r\n            borderRadius={\"0.25rem\"}\r\n            color=\"whiteAlpha.900\"\r\n            fontWeight={\"700\"}\r\n            fontSize={\"1rem\"}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Box>{\" \"}\r\n      </form>\r\n      {/* inputs end */}\r\n      <DevTool control={control} />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default AddnewUser;\r\n"],"names":["initialImage","file","_errors$Name","_useState","useState","_useState2","_slicedToArray","image","setImage","_useState3","_useState4","selectedMenus","setSelectedMenus","_useSelector","useSelector","state","common","branches","users","cities","menuPermissions","signinuser","console","log","_useForm","useForm","register","handleSubmit","control","errors","formState","useEffect","dispatch","getData","useDispatch","Navigate","useNavigate","toast","useToast","branchoptions","map","branch","_jsx","value","BranchName","children","_id","cityoptions","city","CityName","_useState5","makeAnimated","_useState6","selectedUsers","user","label","Name","_jsxs","Stack","h","onSubmit","formData","requestData","_objectSpread","UserType","postData","then","SimpleGrid","columns","autoFlow","gap","px","py","minWidth","Box","FormControl","variant","id","Input","autoComplete","required","borderColor","borderRadius","size","placeholder","className","FormLabel","fontWeight","color","Text","fontSize","message","Phone","type","Email","ChakraSelect","Branch","disabled","selected","City","UserName","UserProfile","display","justifyContent","alignItems","Grid","templateColumns","GridItem","colSpan","ml","mb","sx","bg","mt","mr","_hover","flexGrow","onChange","e","_e$target$files","target","files","HStack","spacing","align","wrap","data","index","pl","Checkbox","colorScheme","border","checked","includes","prevPermissions","concat","_toConsumableArray","filter","permission","handleCheckboxChange","_dark","mx","Button","w","DevTool"],"sourceRoot":""}