{"version":3,"file":"static/js/655.0df05428.chunk.js","mappings":"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","sources":["pages/status/UpdateStatus.tsx","../node_modules/@chakra-ui/select/dist/chunk-HQIEHZYI.mjs","../node_modules/@chakra-ui/select/dist/chunk-GJO77I2I.mjs"],"sourcesContent":["/*\n  UpdateStatus Component:\n  This component allows updating a status by providing a form with a select input for the status name.\n  It utilizes Chakra UI components for styling and form handling using react-hook-form.\n\n  It does the following:\n  - Imports necessary dependencies and components\n  - Defines the interfaces for UpdateStatus and FormData\n  - Retrieves the status and statuses data from Redux using the useSelector hook\n  - Initializes the dispatch function from Redux using the useDispatch hook\n  - Retrieves the \"id\" parameter from the URL using the useParams hook\n  - Initializes the navigate function from react-router-dom for navigation purposes\n  - Initializes the useToast hook for displaying toast messages\n  - Defines the endpoint for API calls\n  - Initializes the react-hook-form for form handling and sets default form values based on the status data\n  - Fetches status data and the specific status by ID when the component mounts\n  - Resets the form values when the status data changes\n  - Handles form submission by dispatching the updateData action and fetching updated status data\n  - Renders the form with a select input for status name and displays form validation errors if any\n*/\n\nimport {\n  Box,\n  Button,\n  Select,\n  SimpleGrid,\n  Stack,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getData,\n  getDataById,\n  updateData,\n} from \"../../redux/actions/common.action\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { DevTool } from \"@hookform/devtools\";\n\n//interface for the updatedata \ninterface UpdateStatus {\n  status: {\n    StatusName: string;\n  };\n  statuses: {\n    StatusName: string;\n    _id: string;\n  }[];\n  loading: boolean;\n}\n\n//interface for filled pre formdata\ninterface FormData {\n  StatusName: string;\n}\n\nconst UpdateStatus: React.FC = () => {\n  // Obtaining the dispatch function using the useDispatch hook\n  const dispatch: any = useDispatch();\n\n  // Accessing the id parameter from the URL using the useParams hook\n  const { id } = useParams();\n\n  // Accessing the useNavigate hook and assigning it to the navigate variable\n  const navigate = useNavigate();\n\n  // Accessing the useToast hook and assigning it to the toast variable\n  const toast = useToast();\n\n  // Setting the endpoint to \"status\"\n  const endpoint: string = \"status\";\n\n  // Accessing the status and statuses variables from the common reducer using the useSelector hook\n  const { status, statuses, loading } = useSelector(\n    (state: { common: UpdateStatus }) => state.common\n  );\n\n  // Setting up form validation and state management using the useForm hook\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n    reset,\n    control,\n  } = useForm<FormData>({\n    defaultValues: {\n      StatusName: status?.StatusName || \"\", // Setting the default value for the StatusName field based on the status data\n    },\n  });\n\n  // Fetching the data for the specified status and all statuses\n  useEffect(() => {\n    dispatch(getDataById(id, endpoint)); // Fetching the specific status data by ID\n    dispatch(getData(endpoint)); // Fetching all statuses\n  }, [id, dispatch]);\n\n  // Resetting the form fields when the status data changes\n  useEffect(() => {\n    if (status) {\n      reset({\n        StatusName: status?.StatusName, // Resetting the StatusName field with the updated value\n      });\n    }\n  }, [status, reset]);\n\n  // Handling form submission\n  const onSubmit = (data: FormData) => {\n    dispatch(\n      updateData(id, endpoint, { StatusName: data.StatusName }, navigate, toast)\n    ).then(() => {\n      dispatch(getData(\"status\")); // Fetching the updated status data after successful submission\n    });\n  };\n\n  return (\n    <Stack h=\"100%\">\n      {/* heading starts */}\n\n      {/* heading end */}\n      {/* inputs starts */}\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <SimpleGrid columns={3} px={10} py={1} gap={6}>\n          <Box>\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\n              Status Name\n            </Text>\n            <Select\n              {...register(\"StatusName\", { required: true })}\n              size={\"sm\"}\n              borderColor={errors.StatusName ? \"red.500\" : \"gray.400\"}\n              borderRadius={\"0.25rem\"}\n            >\n              {statuses?.map((status) => (\n                <option key={status._id} value={status.StatusName}>\n                  {status.StatusName}\n                </option>\n              ))}\n            </Select>\n            {errors.StatusName && (\n              <Text color=\"red.500\" fontSize=\"xs\">\n                Status name is required\n              </Text>\n            )}\n          </Box>\n\n          <Box\n            mt={6}\n            display={\"flex\"}\n            justifyContent={\"flex-start\"}\n            alignItems={\"center\"}\n          >\n            <Button\n              isLoading={loading}\n              loadingText=\"Please wait...\"\n              type=\"submit\"\n              size={\"sm\"}\n              _hover={{ bg: \"#FF9000\" }}\n              w=\"8.188rem\"\n              bg=\"#FF9000\"\n              borderRadius={\"0.25rem\"}\n              color=\"whiteAlpha.900\"\n              fontWeight={\"700\"}\n              fontSize={\"1rem\"}\n            >\n              Update Status\n            </Button>\n          </Box>\n        </SimpleGrid>\n      </form>\n      {/* inputs end */}\n\n      <DevTool control={control} />\n    </Stack>\n  );\n};\n\nexport default UpdateStatus;\n","// src/select-field.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar SelectField = forwardRef(\n  function SelectField2(props, ref) {\n    const { children, placeholder, className, ...rest } = props;\n    return /* @__PURE__ */ jsxs(\n      chakra.select,\n      {\n        ...rest,\n        ref,\n        className: cx(\"chakra-select\", className),\n        children: [\n          placeholder && /* @__PURE__ */ jsx(\"option\", { value: \"\", children: placeholder }),\n          children\n        ]\n      }\n    );\n  }\n);\nSelectField.displayName = \"SelectField\";\n\nexport {\n  SelectField\n};\n","import {\n  SelectField\n} from \"./chunk-HQIEHZYI.mjs\";\n\n// src/select.tsx\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport {\n  chakra,\n  forwardRef,\n  layoutPropNames,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { dataAttr } from \"@chakra-ui/shared-utils\";\n\n// ../../utilities/object-utils/src/index.ts\nfunction split(object, keys) {\n  const picked = {};\n  const omitted = {};\n  for (const [key, value] of Object.entries(object)) {\n    if (keys.includes(key))\n      picked[key] = value;\n    else\n      omitted[key] = value;\n  }\n  return [picked, omitted];\n}\n\n// src/select.tsx\nimport { cloneElement, isValidElement } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Select = forwardRef((props, ref) => {\n  var _a;\n  const styles = useMultiStyleConfig(\"Select\", props);\n  const {\n    rootProps,\n    placeholder,\n    icon,\n    color,\n    height,\n    h,\n    minH,\n    minHeight,\n    iconColor,\n    iconSize,\n    ...rest\n  } = omitThemingProps(props);\n  const [layoutProps, otherProps] = split(rest, layoutPropNames);\n  const ownProps = useFormControl(otherProps);\n  const rootStyles = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color\n  };\n  const fieldStyles = {\n    paddingEnd: \"2rem\",\n    ...styles.field,\n    _focus: {\n      zIndex: \"unset\",\n      ...(_a = styles.field) == null ? void 0 : _a[\"_focus\"]\n    }\n  };\n  return /* @__PURE__ */ jsxs(\n    chakra.div,\n    {\n      className: \"chakra-select__wrapper\",\n      __css: rootStyles,\n      ...layoutProps,\n      ...rootProps,\n      children: [\n        /* @__PURE__ */ jsx(\n          SelectField,\n          {\n            ref,\n            height: h != null ? h : height,\n            minH: minH != null ? minH : minHeight,\n            placeholder,\n            ...ownProps,\n            __css: fieldStyles,\n            children: props.children\n          }\n        ),\n        /* @__PURE__ */ jsx(\n          SelectIcon,\n          {\n            \"data-disabled\": dataAttr(ownProps.disabled),\n            ...(iconColor || color) && { color: iconColor || color },\n            __css: styles.icon,\n            ...iconSize && { fontSize: iconSize },\n            children: icon\n          }\n        )\n      ]\n    }\n  );\n});\nSelect.displayName = \"Select\";\nvar DefaultIcon = (props) => /* @__PURE__ */ jsx(\"svg\", { viewBox: \"0 0 24 24\", ...props, children: /* @__PURE__ */ jsx(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  }\n) });\nvar IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\"\n  }\n});\nvar SelectIcon = (props) => {\n  const { children = /* @__PURE__ */ jsx(DefaultIcon, {}), ...rest } = props;\n  const clone = cloneElement(children, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\"\n    }\n  });\n  return /* @__PURE__ */ jsx(IconWrapper, { ...rest, className: \"chakra-select__icon-wrapper\", children: isValidElement(children) ? clone : null });\n};\nSelectIcon.displayName = \"SelectIcon\";\n\nexport {\n  Select,\n  DefaultIcon\n};\n"],"names":["dispatch","useDispatch","id","useParams","navigate","useNavigate","toast","useToast","endpoint","_useSelector","useSelector","state","common","status","statuses","loading","_useForm","useForm","defaultValues","StatusName","handleSubmit","register","errors","formState","reset","control","useEffect","getDataById","getData","_jsxs","Stack","h","children","_jsx","onSubmit","data","updateData","then","SimpleGrid","columns","px","py","gap","Box","Text","fontSize","ml","mb","Select","_objectSpread","required","size","borderColor","borderRadius","map","value","_id","color","mt","display","justifyContent","alignItems","Button","isLoading","loadingText","type","_hover","bg","w","fontWeight","DevTool","SelectField","forwardRef","props","ref","placeholder","className","rest","_objectWithoutProperties","_excluded","jsxs","chakra","cx","jsx","displayName","_a","styles","useMultiStyleConfig","_omitThemingProps","omitThemingProps","rootProps","icon","height","minH","minHeight","iconColor","iconSize","_split","object","keys","picked","omitted","_i","_Object$entries","Object","entries","length","_Object$entries$_i","_slicedToArray","key","includes","split","layoutPropNames","_split2","layoutProps","otherProps","ownProps","useFormControl","rootStyles","width","position","fieldStyles","paddingEnd","field","_focus","zIndex","__css","SelectIcon","dataAttr","disabled","DefaultIcon","viewBox","fill","d","IconWrapper","baseStyle","pointerEvents","top","transform","_props$children","_excluded2","clone","cloneElement","role","focusable","style","isValidElement"],"sourceRoot":""}