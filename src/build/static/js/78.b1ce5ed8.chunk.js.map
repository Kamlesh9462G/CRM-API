{"version":3,"file":"static/js/78.b1ce5ed8.chunk.js","mappings":"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","sources":["components/AlertDialouge.tsx","components/Loader.tsx","pages/city/CityList.tsx"],"sourcesContent":["// AlertDialogDelete Component: Displays a delete confirmation dialog using Chakra UI.\n// Props:\n// - handleDelete: Function to handle the delete action when confirmed.\n// - id: The identifier of the item to delete.\nimport {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n  useDisclosure,\n  Button,\n  Box,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\n\nimport { RiDeleteBinLine } from \"react-icons/ri\";\nimport { useSelector } from \"react-redux\";\ninterface Props {\n  handleDelete: (id: number) => void;\n  id: number;\n}\n\ninterface Loading {\n  loading: boolean;\n}\n\nconst AlertDialogDelete: React.FC<Props> = ({ handleDelete, id }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = React.useRef<HTMLButtonElement>(null);\n  const { loading } = useSelector((state: { common: Loading }) => state.common);\n  const onDeleteClick = () => {\n    handleDelete(id);\n    onClose();\n  };\n\n  return (\n    <>\n      <Box onClick={onOpen}>\n        <RiDeleteBinLine color=\"red\" size={18} cursor={\"pointer\"} />\n      </Box>\n\n      <AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n      >\n        <AlertDialogOverlay\n          bg=\"blackAlpha.300\"\n          backdropFilter=\"blur(5px) hue-rotate(90deg)\"\n        >\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n              Delete\n            </AlertDialogHeader>\n\n            <AlertDialogBody>\n              Are you sure? You can't undo this action afterwards.\n            </AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button\n                size=\"sm\"\n                fontWeight={\"medium\"}\n                ref={cancelRef}\n                onClick={onClose}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"sm\"\n                fontWeight={\"medium\"}\n                isLoading={loading}\n                loadingText=\"Please wait...\"\n                colorScheme=\"red\"\n                onClick={onDeleteClick}\n                ml={3}\n              >\n                Delete\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n    </>\n  );\n};\nexport default AlertDialogDelete;\n","// Loader Component: Displays a loader spinner within a table row using react-loader-spinner and Chakra UI.\nimport { HStack, Td, Tr } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { ColorRing } from \"react-loader-spinner\";\n\nconst Loader = () => {\n  return (\n    <Tr height={400} maxHeight=\"400px\">\n      <Td colSpan={25}>\n        <HStack justifyContent=\"center\" alignItems=\"center\" w=\"100%\">\n          <ColorRing\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"blocks-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"blocks-wrapper\"\n            colors={[\"#e15b64\", \"#f47e60\", \"#f8b26a\", \"#abbd81\", \"#849b87\"]}\n          />\n        </HStack>\n      </Td>\n    </Tr>\n  );\n};\n\nexport default Loader;\n","/*\n  CityList Component:\n  This component displays a list of cities fetched from the API. It provides the ability to add, update, and delete cities.\n  It utilizes Chakra UI components for the table layout and styling.\n\n  It does the following:\n  - Imports necessary dependencies and components\n  - Defines the interface for city lists\n  - Retrieves the cities and loading state from Redux using the useSelector hook\n  - Initializes the dispatch function from Redux using the useDispatch hook\n  - Initializes the navigate function from react-router-dom for navigation purposes\n  - Defines the endpoint for API calls\n  - Initializes the useToast hook for displaying toast messages\n  - Fetches city data when the component mounts, only if there are no cities present\n  - Handles the delete operation for a city by dispatching the deleteData action and fetching updated city data\n  - Renders the city list table using Chakra UI components, including table headers and rows\n  - Displays a loader while data is being fetched\n  - Provides buttons for adding a new city, refreshing the city list, and deleting a city with a confirmation dialog\n*/\n\nimport React, { useEffect, useMemo } from \"react\";\nimport {\n  Box,\n  Button,\n  Divider,\n  Spacer,\n  Stack,\n  Table,\n  TableContainer,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { deleteData, getData } from \"../../redux/actions/common.action\";\nimport AlertDialogDelete from \"../../components/AlertDialouge\";\nimport { CiEdit } from \"react-icons/ci\";\nimport Loader from \"../../components/Loader\";\nimport { FiRefreshCcw } from \"react-icons/fi\";\n\n// Interface for city lists\ninterface CityLists {\n  loading: boolean;\n  cities: {\n    serialNumber: number;\n    createdAt: string;\n    CityName: string;\n    _id: number;\n  }[];\n}\n\nconst CityList: React.FC = () => {\n  const { cities, loading } = useSelector(\n    (state: { common: CityLists }) => state.common\n  );\n  const dispatch: any = useDispatch();\n  const Navigate = useNavigate();\n  const endpoint: string = \"city\";\n  const toast = useToast();\n\n  const memoizedCities = useMemo(() => cities, [cities]);\n\n  useEffect(() => {\n    if (memoizedCities.length === 0) {\n      // Fetch city data when the component mounts, only if there are no cities present\n      dispatch(getData(endpoint));\n    }\n  }, [dispatch, endpoint, memoizedCities.length]);\n\n  const handleDelete = async (id: number) => {\n    // Handle the delete operation for a city by dispatching the deleteData action and fetching updated city data\n    await dispatch(deleteData(id, endpoint, toast));\n    dispatch(getData(endpoint));\n  };\n\n  return (\n    <Stack h=\"100%\" mt={1}>\n      {/* City List Header */}\n      <Box\n        px={10}\n        h=\"40px\"\n        display={\"flex\"}\n        justifyContent={\"space-between\"}\n        alignItems={\"center\"}\n      >\n        <Spacer />\n        <Button\n          onClick={() => Navigate(\"/add-city\")}\n          mt={2}\n          size={\"sm\"}\n          _hover={{ bg: \"#FF9000\" }}\n          w=\"7.188rem\"\n          bg=\"#FF9000\"\n          borderRadius={\"0.25rem\"}\n          color=\"whiteAlpha.900\"\n          fontWeight={\"700\"}\n          fontSize={\"1rem\"}\n        >\n          Add City\n        </Button>\n        <Box mt=\"2\" ml=\"3\">\n          <Button\n            size={\"xs\"}\n            borderRadius={\"full\"}\n            onClick={() => dispatch(getData(endpoint))}\n          >\n            <FiRefreshCcw />\n          </Button>\n        </Box>\n      </Box>\n      {/* Divider */}\n      <Divider bg=\"gray.300\" height=\"2px\" />\n      {/* City List Table */}\n      <TableContainer px=\"2\">\n        <Box overflowY=\"auto\" height={480} maxHeight=\"480px\">\n          <Table variant=\"simple\" size=\"sm\">\n            {/* Table Headers */}\n            <Thead bg={\"gray.100\"} position=\"sticky\" top=\"0\">\n              <Tr>\n                <Th>#</Th>\n                <Th>Date Created</Th>\n                <Th>City Name</Th>\n                <Th>Action</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {/* Render city rows */}\n              {loading ? (\n                <Loader />\n              ) : (\n                cities?.map((el, i) => (\n                  <Tr key={el._id}>\n                    <Td>{i + 1}</Td>\n                    <Td>{new Date(el.createdAt).toLocaleDateString()}</Td>\n                    <Td>{el.CityName}</Td>\n                    <Td display={\"flex\"} alignItems={\"center\"}>\n                      <Box\n                        cursor={\"pointer\"}\n                        mr={\"5\"}\n                        onClick={() => Navigate(`/update-city/${el._id}`)}\n                      >\n                        <CiEdit color=\"blue\" size={19} />\n                      </Box>\n                      <Box cursor={\"pointer\"}>\n                        <AlertDialogDelete\n                          id={el._id}\n                          handleDelete={handleDelete}\n                        />\n                      </Box>\n                    </Td>\n                  </Tr>\n                ))\n              )}\n            </Tbody>\n          </Table>\n        </Box>\n      </TableContainer>\n    </Stack>\n  );\n};\n\nexport default CityList;\n"],"names":["_ref","handleDelete","id","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","cancelRef","React","loading","useSelector","state","common","_jsxs","_Fragment","children","_jsx","Box","onClick","RiDeleteBinLine","color","size","cursor","AlertDialog","leastDestructiveRef","AlertDialogOverlay","bg","backdropFilter","AlertDialogContent","AlertDialogHeader","fontSize","fontWeight","AlertDialogBody","AlertDialogFooter","Button","ref","isLoading","loadingText","colorScheme","ml","Tr","height","maxHeight","Td","colSpan","HStack","justifyContent","alignItems","w","ColorRing","visible","width","ariaLabel","wrapperStyle","wrapperClass","colors","_useSelector","cities","dispatch","useDispatch","Navigate","useNavigate","endpoint","toast","useToast","memoizedCities","useMemo","useEffect","length","getData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","deleteData","stop","_x","apply","arguments","Stack","h","mt","px","display","Spacer","_hover","borderRadius","FiRefreshCcw","Divider","TableContainer","overflowY","Table","variant","Thead","position","top","Th","Tbody","Loader","map","el","i","Date","createdAt","toLocaleDateString","CityName","mr","concat","_id","CiEdit","AlertDialogDelete"],"sourceRoot":""}