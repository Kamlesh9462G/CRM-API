{"version":3,"file":"static/js/293.36ee1e78.chunk.js","mappings":"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","sources":["components/AlertDialouge.tsx","components/Loader.tsx","pages/course/CourseList.tsx"],"sourcesContent":["// AlertDialogDelete Component: Displays a delete confirmation dialog using Chakra UI.\r\n// Props:\r\n// - handleDelete: Function to handle the delete action when confirmed.\r\n// - id: The identifier of the item to delete.\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n  useDisclosure,\r\n  Button,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nimport { RiDeleteBinLine } from \"react-icons/ri\";\r\nimport { useSelector } from \"react-redux\";\r\ninterface Props {\r\n  handleDelete: (id: number) => void;\r\n  id: number;\r\n}\r\n\r\ninterface Loading {\r\n  loading: boolean;\r\n}\r\n\r\nconst AlertDialogDelete: React.FC<Props> = ({ handleDelete, id }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const cancelRef = React.useRef<HTMLButtonElement>(null);\r\n  const { loading } = useSelector((state: { common: Loading }) => state.common);\r\n  const onDeleteClick = () => {\r\n    handleDelete(id);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box onClick={onOpen}>\r\n        <RiDeleteBinLine color=\"red\" size={18} cursor={\"pointer\"} />\r\n      </Box>\r\n\r\n      <AlertDialog\r\n        isOpen={isOpen}\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n      >\r\n        <AlertDialogOverlay\r\n          bg=\"blackAlpha.300\"\r\n          backdropFilter=\"blur(5px) hue-rotate(90deg)\"\r\n        >\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              Delete\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>\r\n              Are you sure? You can't undo this action afterwards.\r\n            </AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button\r\n                size=\"sm\"\r\n                fontWeight={\"medium\"}\r\n                ref={cancelRef}\r\n                onClick={onClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                fontWeight={\"medium\"}\r\n                isLoading={loading}\r\n                loadingText=\"Please wait...\"\r\n                colorScheme=\"red\"\r\n                onClick={onDeleteClick}\r\n                ml={3}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\nexport default AlertDialogDelete;\r\n","// Loader Component: Displays a loader spinner within a table row using react-loader-spinner and Chakra UI.\r\nimport { Box, Center, Spinner, Td, Tr } from \"@chakra-ui/react\";\r\nimport {\r\n  Skeleton,\r\n  SkeletonCircle,\r\n  SkeletonText,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\n// import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <Tr height={400} maxHeight=\"400px\">\r\n      <Td colSpan={25}>\r\n        <Center h=\"100%\">\r\n          {/* <Spinner\r\n            speed=\"0.3s\"\r\n            thickness=\"3px\"\r\n            emptyColor=\"gray.200\"\r\n            color=\"orange.300\"\r\n            size=\"xl\"\r\n          /> */}\r\n          {/* <Box>Heyyyyy</Box> */}\r\n          <Box>\r\n            <SkeletonText\r\n              mt=\"4\"\r\n              noOfLines={12}\r\n              spacing=\"4\"\r\n              skeletonHeight=\"4\"\r\n              width=\"84rem\"\r\n              borderRadius=\"2rem\"\r\n            />\r\n          </Box>\r\n        </Center>\r\n      </Td>\r\n    </Tr>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","/*\r\n  CourseList Component:\r\n  This component displays a list of courses fetched from the backend.\r\n  It allows adding new courses, refreshing the course list, editing existing courses, and deleting courses.\r\n  It utilizes Chakra UI components for styling.\r\n\r\n  It does the following:\r\n  - Imports necessary dependencies and components\r\n  - Defines the interface for CourseLists\r\n  - Initializes the useSelector hook to access the state from Redux\r\n  - Initializes the useDispatch function from Redux\r\n  - Initializes the useNavigate hook from react-router-dom for navigation purposes\r\n  - Initializes the endpoint for API requests\r\n  - Initializes the useToast hook for displaying toast messages\r\n  - Uses the useMemo hook to memoize the courses data from the Redux state\r\n  - Uses the useEffect hook to fetch the course data if it hasn't been fetched yet\r\n  - Defines the handleDelete function to handle course deletion\r\n  - Renders the course list table with columns for course information and action buttons\r\n*/\r\n\r\nimport React, { useEffect, useMemo } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  HStack,\r\n  Spacer,\r\n  Stack,\r\n  Table,\r\n  TableContainer,\r\n  Tbody,\r\n  Td,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { deleteData, getData } from \"../../redux/actions/common.action\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport AlertDialogDelete from \"../../components/AlertDialouge\";\r\nimport { CiEdit } from \"react-icons/ci\";\r\n\r\nimport Loader from \"../../components/Loader\";\r\nimport { FiRefreshCcw } from \"react-icons/fi\";\r\n\r\n// Interface for the course data structure\r\ninterface CourseLists {\r\n  loading: boolean;\r\n  courses: {\r\n    serialNumber: number;\r\n    createdAt: string;\r\n    CourseValue: number;\r\n    CourseName: string;\r\n    _id: number;\r\n  }[];\r\n}\r\n\r\nconst CourseList: React.FC = () => {\r\n  const { courses, loading } = useSelector(\r\n    (state: { common: CourseLists }) => state.common\r\n  );\r\n\r\n  const dispatch: any = useDispatch();\r\n  const navigate = useNavigate();\r\n  const endpoint: string = \"course\";\r\n  const toast = useToast();\r\n\r\n  // Memoize the courses data to prevent unnecessary re-rendering\r\n  const memoizedCourses = useMemo(() => courses, [courses]);\r\n\r\n  useEffect(() => {\r\n    // Fetch course data if it hasn't been fetched yet\r\n    if (memoizedCourses.length === 0) {\r\n      dispatch(getData(endpoint));\r\n    }\r\n  }, [dispatch, endpoint, memoizedCourses.length]);\r\n\r\n  // Handle course deletion\r\n  const handleDelete = async (id: number) => {\r\n    await dispatch(deleteData(id, endpoint, toast));\r\n    dispatch(getData(endpoint));\r\n  };\r\n\r\n  return (\r\n    <Stack h=\"100%\" mt={1}>\r\n      {/* Course List Header */}\r\n      <Box\r\n        px={10}\r\n        h=\"40px\"\r\n        display={\"flex\"}\r\n        justifyContent={\"space-between\"}\r\n        alignItems={\"center\"}\r\n      >\r\n        <Spacer />\r\n        {/* Add Course Button */}\r\n        <Button\r\n          onClick={() => navigate(\"/add-course\")}\r\n          mt={2}\r\n          size={\"sm\"}\r\n          _hover={{ bg: \"#FF9000\" }}\r\n          w=\"7.188rem\"\r\n          bg=\"#FF9000\"\r\n          borderRadius={\"0.25rem\"}\r\n          color=\"whiteAlpha.900\"\r\n          fontWeight={\"700\"}\r\n          fontSize={\"1rem\"}\r\n        >\r\n          Add Course\r\n        </Button>\r\n        <Box mt=\"2\" ml=\"3\">\r\n          {/* Refresh Course List Button */}\r\n          <Button\r\n            size={\"xs\"}\r\n            borderRadius={\"full\"}\r\n            onClick={() => dispatch(getData(endpoint))}\r\n          >\r\n            <FiRefreshCcw />\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Divider */}\r\n      <Divider bg=\"gray.300\" height=\"2px\" />\r\n\r\n      <TableContainer px=\"2\">\r\n        <Box overflowY=\"auto\" height={480} maxHeight=\"480px\">\r\n          <Table variant=\"simple\" size=\"sm\">\r\n            {/* Table Header */}\r\n            <Thead bg={\"gray.100\"} position={\"sticky\"} top=\"0\">\r\n              <Tr>\r\n                <Th>#</Th>\r\n                <Th>Date Created</Th>\r\n                <Th>Course Name</Th>\r\n                <Th>Price</Th>\r\n                <Th>Action</Th>\r\n              </Tr>\r\n            </Thead>\r\n\r\n            {/* Table Body */}\r\n            {loading ? (\r\n              // Show loader if data is still loading\r\n              <Loader />\r\n            ) : (\r\n              <Tbody>\r\n                {courses?.map((el, i) => (\r\n                  <Tr key={el._id}>\r\n                    <Td>{i + 1}</Td>\r\n                    <Td>{new Date(el.createdAt).toLocaleDateString()}</Td>\r\n                    <Td>{el.CourseName}</Td>\r\n                    <Td>{el.CourseValue}</Td>\r\n                    <Td display={\"flex\"} alignItems={\"center\"}>\r\n                      {/* Edit Course Button */}\r\n                      <Box\r\n                        cursor={\"pointer\"}\r\n                        mr={\"5\"}\r\n                        onClick={() => navigate(`/update-course/${el._id}`)}\r\n                      >\r\n                        <CiEdit color=\"blue\" size={19} />\r\n                      </Box>\r\n                      {/* Delete Course Button */}\r\n                      <Box cursor={\"pointer\"}>\r\n                        <AlertDialogDelete\r\n                          id={el._id}\r\n                          handleDelete={handleDelete}\r\n                        />\r\n                      </Box>\r\n                    </Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n            )}\r\n          </Table>\r\n        </Box>\r\n      </TableContainer>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default CourseList;\r\n"],"names":["_ref","handleDelete","id","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","cancelRef","React","loading","useSelector","state","common","_jsxs","_Fragment","children","_jsx","Box","onClick","RiDeleteBinLine","color","size","cursor","AlertDialog","leastDestructiveRef","AlertDialogOverlay","bg","backdropFilter","AlertDialogContent","AlertDialogHeader","fontSize","fontWeight","AlertDialogBody","AlertDialogFooter","Button","ref","isLoading","loadingText","colorScheme","ml","Tr","height","maxHeight","Td","colSpan","Center","h","SkeletonText","mt","noOfLines","spacing","skeletonHeight","width","borderRadius","_useSelector","courses","dispatch","useDispatch","navigate","useNavigate","endpoint","toast","useToast","memoizedCourses","useMemo","useEffect","length","getData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","deleteData","stop","_x","apply","arguments","Stack","px","display","justifyContent","alignItems","Spacer","_hover","w","FiRefreshCcw","Divider","TableContainer","overflowY","Table","variant","Thead","position","top","Th","Loader","Tbody","map","el","i","Date","createdAt","toLocaleDateString","CourseName","CourseValue","mr","concat","_id","CiEdit","AlertDialogDelete"],"sourceRoot":""}