{"version":3,"file":"static/js/502.bd45162e.chunk.js","mappings":"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","sources":["components/AlertDialouge.tsx","components/Loader.tsx","pages/status/StatusList.tsx"],"sourcesContent":["// AlertDialogDelete Component: Displays a delete confirmation dialog using Chakra UI.\n// Props:\n// - handleDelete: Function to handle the delete action when confirmed.\n// - id: The identifier of the item to delete.\nimport {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n  useDisclosure,\n  Button,\n  Box,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\n\nimport { RiDeleteBinLine } from \"react-icons/ri\";\nimport { useSelector } from \"react-redux\";\ninterface Props {\n  handleDelete: (id: number) => void;\n  id: number;\n}\n\ninterface Loading {\n  loading: boolean;\n}\n\nconst AlertDialogDelete: React.FC<Props> = ({ handleDelete, id }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = React.useRef<HTMLButtonElement>(null);\n  const { loading } = useSelector((state: { common: Loading }) => state.common);\n  const onDeleteClick = () => {\n    handleDelete(id);\n    onClose();\n  };\n\n  return (\n    <>\n      <Box onClick={onOpen}>\n        <RiDeleteBinLine color=\"red\" size={18} cursor={\"pointer\"} />\n      </Box>\n\n      <AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n      >\n        <AlertDialogOverlay\n          bg=\"blackAlpha.300\"\n          backdropFilter=\"blur(5px) hue-rotate(90deg)\"\n        >\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n              Delete\n            </AlertDialogHeader>\n\n            <AlertDialogBody>\n              Are you sure? You can't undo this action afterwards.\n            </AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button\n                size=\"sm\"\n                fontWeight={\"medium\"}\n                ref={cancelRef}\n                onClick={onClose}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"sm\"\n                fontWeight={\"medium\"}\n                isLoading={loading}\n                loadingText=\"Please wait...\"\n                colorScheme=\"red\"\n                onClick={onDeleteClick}\n                ml={3}\n              >\n                Delete\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n    </>\n  );\n};\nexport default AlertDialogDelete;\n","// Loader Component: Displays a loader spinner within a table row using react-loader-spinner and Chakra UI.\nimport { HStack, Td, Tr } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { ColorRing } from \"react-loader-spinner\";\n\nconst Loader = () => {\n  return (\n    <Tr height={400} maxHeight=\"400px\">\n      <Td colSpan={25}>\n        <HStack justifyContent=\"center\" alignItems=\"center\" w=\"100%\">\n          <ColorRing\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"blocks-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"blocks-wrapper\"\n            colors={[\"#e15b64\", \"#f47e60\", \"#f8b26a\", \"#abbd81\", \"#849b87\"]}\n          />\n        </HStack>\n      </Td>\n    </Tr>\n  );\n};\n\nexport default Loader;\n","/*\n  StatusList Component:\n  This component displays a list of status fetched from the API. It provides the ability to add, update, and delete cities.\n  It utilizes Chakra UI components for the table layout and styling.\n\n  It does the following:\n  - Imports necessary dependencies and components\n  - Defines the interface for status lists\n  - Retrieves the statuses and loading state from Redux using the useSelector hook\n  - Initializes the dispatch function from Redux using the useDispatch hook\n  - Initializes the navigate function from react-router-dom for navigation purposes\n  - Defines the endpoint for API calls\n  - Initializes the useToast hook for displaying toast messages\n  - Fetches status data when the component mounts, only if there are no statuses present\n  - Handles the delete operation for a status by dispatching the deleteData action and fetching updated status data\n  - Renders the status list table using Chakra UI components, including table headers and rows\n  - Displays a loader while data is being fetched\n  - Provides buttons for adding a new status, refreshing the status list, and deleting a status with a confirmation dialog\n*/\nimport React, { useEffect, useMemo } from \"react\";\nimport {\n  Box,\n  Button,\n  Divider,\n  Spacer,\n  Stack,\n  Table,\n  TableContainer,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { deleteData, getData } from \"../../redux/actions/common.action\";\nimport AlertDialogDelete from \"../../components/AlertDialouge\";\nimport { CiEdit } from \"react-icons/ci\";\nimport Loader from \"../../components/Loader\";\nimport { FiRefreshCcw } from \"react-icons/fi\";\n\n//interface for the status lists \ninterface StatusLists {\n  loading: boolean;\n  statuses: {\n    serialNumber: number;\n    createdAt: string;\n    StatusName: string;\n\n    _id: number;\n  }[];\n}\nconst StatusList: React.FC = () => {\n  // Accessing the statuses and loading state from the common reducer using the useSelector hook\n  const { statuses, loading } = useSelector(\n    (state: { common: StatusLists }) => state.common\n  );\n\n\n  // Obtaining the dispatch function using the useDispatch hook\n  const dispatch: any = useDispatch();\n\n  // Accessing the useNavigate hook and assigning it to the Navigate variable\n  const Navigate = useNavigate();\n\n  // Setting the endpoint to \"status\"\n  const endpoint: string = \"status\";\n\n  // Memoizing the statuses array using the useMemo hook\n  const memoizedBranches = useMemo(() => statuses, [statuses]);\n\n  // Fetching the data if the memoized statuses array is empty\n  useEffect(() => {\n    if (memoizedBranches.length === 0) {\n      dispatch(getData(endpoint));\n    }\n  }, [dispatch, endpoint, memoizedBranches.length]);\n\n  // Function to handle deletion of a status\n  const handleDelete = async (id: number) => {\n    // Dispatching the deleteData action to delete the status with the specified ID\n    await dispatch(deleteData(id, endpoint));\n    // Dispatching the getData action to fetch the updated status data\n    dispatch(getData(endpoint));\n  };\n\n  return (\n    <Stack h=\"100%\" mt={1}>\n      <Box\n        px={10}\n        h=\"40px\"\n        display={\"flex\"}\n        justifyContent={\"space-between\"}\n        alignItems={\"center\"}\n      >\n        {\" \"}\n        {/* <Text color={\"#000000\"} fontSize={\"1.25rem\"} fontWeight={\"600\"}>\n          Status List\n        </Text> */}\n        <Spacer />\n        <Button\n          onClick={() => Navigate(\"/add-status\")}\n          mt={2}\n          size={\"sm\"}\n          _hover={{ bg: \"#FF9000\" }}\n          w=\"7.188rem\"\n          bg=\"#FF9000\"\n          borderRadius={\"0.25rem\"}\n          color=\"whiteAlpha.900\"\n          fontWeight={\"700\"}\n          fontSize={\"1rem\"}\n        >\n          {\" \"}\n          Add Status\n        </Button>\n        <Box mt=\"2\" ml=\"3\">\n          <Button\n            size={\"xs\"}\n            borderRadius={\"full\"}\n            onClick={() => dispatch(getData(endpoint))}\n          >\n            <FiRefreshCcw />\n          </Button>\n        </Box>\n      </Box>\n      <Divider\n        bg=\"gray.300\" // Set the background color to dark gray\n        height=\"2px\" // Set the height of the divider\n      />\n      <TableContainer px=\"2\">\n        <Box overflowY=\"auto\" height={480} maxHeight=\"480px\">\n          <Table variant=\"simple\" size=\"sm\">\n            <Thead bg={\"gray.100\"} position={\"sticky\"} top=\"0\">\n              <Tr>\n                <Th>#</Th>\n                <Th>Date Created</Th>\n                <Th>Status Name</Th>\n\n                <Th>Action</Th>\n              </Tr>\n            </Thead>\n            {loading ? (\n              <Loader />\n            ) : (\n              <Tbody>\n                {statuses?.map((el, i) => (\n                  <Tr key={el._id}>\n                    <Td>{i + 1}</Td>\n                    <Td>{new Date(el.createdAt).toLocaleDateString()}</Td>\n                    <Td>{el.StatusName}</Td>\n\n                    <Td display={\"flex\"} alignItems={\"center\"}>\n                      <Box\n                        cursor={\"pointer\"}\n                        mr={\"5\"}\n                        onClick={() => Navigate(`/update-status/${el._id}`)}\n                      >\n                        <CiEdit color=\"blue\" size={19} />\n                      </Box>\n                      <Box cursor={\"pointer\"}>\n                        <AlertDialogDelete\n                          id={el._id}\n                          handleDelete={handleDelete}\n                        />\n                      </Box>\n                    </Td>\n                  </Tr>\n                ))}\n              </Tbody>\n            )}\n          </Table>\n        </Box>\n      </TableContainer>\n    </Stack>\n  );\n};\n\nexport default StatusList;\n"],"names":["_ref","handleDelete","id","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","cancelRef","React","loading","useSelector","state","common","_jsxs","_Fragment","children","_jsx","Box","onClick","RiDeleteBinLine","color","size","cursor","AlertDialog","leastDestructiveRef","AlertDialogOverlay","bg","backdropFilter","AlertDialogContent","AlertDialogHeader","fontSize","fontWeight","AlertDialogBody","AlertDialogFooter","Button","ref","isLoading","loadingText","colorScheme","ml","Tr","height","maxHeight","Td","colSpan","HStack","justifyContent","alignItems","w","ColorRing","visible","width","ariaLabel","wrapperStyle","wrapperClass","colors","_useSelector","statuses","dispatch","useDispatch","Navigate","useNavigate","endpoint","memoizedBranches","useMemo","useEffect","length","getData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","deleteData","stop","_x","apply","arguments","Stack","h","mt","px","display","Spacer","_hover","borderRadius","FiRefreshCcw","Divider","TableContainer","overflowY","Table","variant","Thead","position","top","Th","Loader","Tbody","map","el","i","Date","createdAt","toLocaleDateString","StatusName","mr","concat","_id","CiEdit","AlertDialogDelete"],"sourceRoot":""}