{"version":3,"file":"static/js/629.c8c2093d.chunk.js","mappings":"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","sources":["pages/branch/AddBranch.tsx","../node_modules/@chakra-ui/form-control/dist/chunk-RN6VKE3K.mjs"],"sourcesContent":["/*\n  AddBranch Component:\n  This component represents a form for adding a branch. It allows the user to input the branch name\n  and submit the form to add the branch to the system. It utilizes Chakra UI components for the form layout\n  and validation. The component also dispatches actions to handle form submission, data retrieval, and navigation.\n\n  It does the following:\n  - Imports necessary dependencies and components\n  - Defines the interfaces for form data and loading state\n  - Retrieves loading state and dispatch function from Redux using the useSelector and useDispatch hooks\n  - Defines the endpoint for API calls\n  - Initializes React Hook Form for form validation and data retrieval\n  - Handles form submission by dispatching the postData action, which adds the branch and retrieves updated data\n  - Renders the form using Chakra UI components with appropriate validation and error messages\n*/\n\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  SimpleGrid,\n  Stack,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getData, postData } from \"../../redux/actions/common.action\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\n\n// Define the interface for form data\ninterface FormData {\n  BranchName: string;\n}\n\n// Define the interface for loading state\ninterface Loading {\n  loading: boolean;\n}\n\nconst AddBranch: React.FC = () => {\n  // Retrieve loading state from Redux using useSelector hook\n  const { loading } = useSelector((state: { common: Loading }) => state.common);\n  const dispatch: any = useDispatch();\n  const endpoint = \"branch\";\n  const navigate = useNavigate();\n  const toast = useToast();\n\n  // Initialize React Hook Form for form validation and data retrieval\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<FormData>();\n\n  // Handle form submission\n  const onSubmit = (data: FormData) => {\n    // Dispatch the postData action to add the branch and retrieve updated data\n    dispatch(postData(data, endpoint, navigate, toast)).then(() => {\n      dispatch(getData(\"branch\"));\n    });\n  };\n\n  return (\n    <Stack h=\"100%\">\n      {/* Form starts */}\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <SimpleGrid columns={3} px={10} py={5} gap={6} mt={3}>\n          <Box>\n            <FormControl variant=\"floating\" id=\"Branch-Name\">\n              <Input\n                autoComplete=\"off\"\n                {...register(\"BranchName\", { required: true })}\n                borderColor={errors?.BranchName ? \"red.500\" : \"gray.400\"}\n                borderRadius={\"0.25rem\"}\n                size=\"sm\"\n                placeholder=\" \"\n              />\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\n                Branch Name\n              </FormLabel>\n              {errors.BranchName && (\n                <Text color=\"red.500\" fontSize=\"sm\">\n                  Branch name is required\n                </Text>\n              )}\n            </FormControl>\n          </Box>\n          <Box\n            display={\"flex\"}\n            justifyContent={\"flex-start\"}\n            alignItems={\"center\"}\n          >\n            {/* Submit button */}\n            <Button\n              isLoading={loading}\n              loadingText=\"Please wait...\"\n              type=\"submit\"\n              size={\"sm\"}\n              _hover={{ bg: \"#FF9000\" }}\n              w=\"8.188rem\"\n              bg=\"#FF9000\"\n              borderRadius={\"0.25rem\"}\n              color=\"whiteAlpha.900\"\n              fontWeight={\"700\"}\n              fontSize={\"1rem\"}\n            >\n              Add Branch\n            </Button>\n          </Box>\n        </SimpleGrid>\n      </form>\n      {/* Form ends */}\n    </Stack>\n  );\n};\n\nexport default AddBranch;\n","import {\n  useFormControlContext,\n  useFormControlStyles\n} from \"./chunk-6ZNYZUDD.mjs\";\n\n// src/form-label.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */ jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : { ref, ...rest };\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      ...ownProps,\n      className: cx(\"chakra-form__label\", props.className),\n      __css: {\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles\n      },\n      children: [\n        children,\n        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator\n      ]\n    }\n  );\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(\n  function RequiredIndicator2(props, ref) {\n    const field = useFormControlContext();\n    const styles = useFormControlStyles();\n    if (!(field == null ? void 0 : field.isRequired))\n      return null;\n    const className = cx(\"chakra-form__required-indicator\", props.className);\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),\n        __css: styles.requiredIndicator,\n        className\n      }\n    );\n  }\n);\nRequiredIndicator.displayName = \"RequiredIndicator\";\n\nexport {\n  FormLabel,\n  RequiredIndicator\n};\n"],"names":["loading","useSelector","state","common","dispatch","useDispatch","navigate","useNavigate","toast","useToast","_useForm","useForm","register","handleSubmit","errors","formState","_jsx","Stack","h","children","onSubmit","data","postData","then","getData","_jsxs","SimpleGrid","columns","px","py","gap","mt","Box","FormControl","variant","id","Input","_objectSpread","autoComplete","required","borderColor","BranchName","borderRadius","size","placeholder","FormLabel","fontWeight","color","Text","fontSize","display","justifyContent","alignItems","Button","isLoading","loadingText","type","_hover","bg","w","forwardRef","passedProps","ref","_a","styles","useStyleConfig","props","omitThemingProps","className","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","_objectWithoutProperties","_excluded","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","cx","__css","textAlign","isRequired","displayName","useFormControlStyles","getRequiredIndicatorProps"],"sourceRoot":""}