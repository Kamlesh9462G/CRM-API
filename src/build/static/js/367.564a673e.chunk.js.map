{"version":3,"file":"static/js/367.564a673e.chunk.js","mappings":"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","sources":["components/Loader.tsx","pages/callHistory/CallHistory.tsx"],"sourcesContent":["// Loader Component: Displays a loader spinner within a table row using react-loader-spinner and Chakra UI.\r\nimport { Box, Center, Spinner, Td, Tr } from \"@chakra-ui/react\";\r\nimport {\r\n  Skeleton,\r\n  SkeletonCircle,\r\n  SkeletonText,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\n// import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <Tr height={400} maxHeight=\"400px\">\r\n      <Td colSpan={25}>\r\n        <Center h=\"100%\">\r\n          {/* <Spinner\r\n            speed=\"0.3s\"\r\n            thickness=\"3px\"\r\n            emptyColor=\"gray.200\"\r\n            color=\"orange.300\"\r\n            size=\"xl\"\r\n          /> */}\r\n          {/* <Box>Heyyyyy</Box> */}\r\n          <Box>\r\n            <SkeletonText\r\n              mt=\"4\"\r\n              noOfLines={12}\r\n              spacing=\"4\"\r\n              skeletonHeight=\"4\"\r\n              width=\"84rem\"\r\n              borderRadius=\"2rem\"\r\n            />\r\n          </Box>\r\n        </Center>\r\n      </Td>\r\n    </Tr>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","/*\r\n  StatusList Component:\r\n  This component displays a list of status fetched from the API. It provides the ability to add, update, and delete cities.\r\n  It utilizes Chakra UI components for the table layout and styling.\r\n\r\n  It does the following:\r\n  - Imports necessary dependencies and components\r\n  - Defines the interface for status lists\r\n  - Retrieves the contacts and loading state from Redux using the useSelector hook\r\n  - Initializes the dispatch function from Redux using the useDispatch hook\r\n  - Initializes the navigate function from react-router-dom for navigation purposes\r\n  - Defines the endpoint for API calls\r\n  - Initializes the useToast hook for displaying toast messages\r\n  - Fetches status data when the component mounts, only if there are no contacts present\r\n  - Handles the delete operation for a status by dispatching the deleteData action and fetching updated status data\r\n  - Renders the status list table using Chakra UI components, including table headers and rows\r\n  - Displays a loader while data is being fetched\r\n  - Provides buttons for adding a new status, refreshing the status list, and deleting a status with a confirmation dialog\r\n*/\r\nimport React, { useEffect, useMemo } from \"react\";\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  IconButton,\r\n  Spacer,\r\n  Stack,\r\n  Table,\r\n  TableContainer,\r\n  Tbody,\r\n  Td,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n} from \"@chakra-ui/react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getData } from \"../../redux/actions/common.action\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { FiRefreshCcw } from \"react-icons/fi\";\r\nimport {\r\n  BsFillTelephoneInboundFill,\r\n  BsFillTelephoneOutboundFill,\r\n} from \"react-icons/bs\";\r\n\r\n//interface for the status lists\r\ninterface StatusLists {\r\n  loading: boolean;\r\n  contacts: {\r\n    serialNumber: number;\r\n    phoneNumber: string;\r\n    callType: string;\r\n    duration: number;\r\n\r\n    _id: number;\r\n  }[];\r\n}\r\nconst CallHistory: React.FC = () => {\r\n  // Accessing the contacts and loading state from the common reducer using the useSelector hook\r\n  const { contacts, loading } = useSelector(\r\n    (state: { common: StatusLists }) => state.common\r\n  );\r\n\r\n  // Obtaining the dispatch function using the useDispatch hook\r\n  const dispatch: any = useDispatch();\r\n\r\n  // Accessing the useNavigate hook and assigning it to the Navigate variable\r\n  const Navigate = useNavigate();\r\n\r\n  // Setting the endpoint to \"status\"\r\n  const endpoint: string = \"contact\";\r\n\r\n  // Memoizing the contacts array using the useMemo hook\r\n  const memoizedContacts = useMemo(() => contacts, [contacts]);\r\n\r\n  // Fetching the data if the memoized contacts array is empty\r\n  useEffect(() => {\r\n    if (!memoizedContacts || memoizedContacts?.length === 0) {\r\n      dispatch(getData(endpoint));\r\n    }\r\n  }, [dispatch, endpoint, memoizedContacts?.length]);\r\n\r\n  return (\r\n    <Stack h=\"100%\" mt={1}>\r\n      <Box\r\n        px={10}\r\n        h=\"40px\"\r\n        display={\"flex\"}\r\n        justifyContent={\"space-between\"}\r\n        alignItems={\"center\"}\r\n      >\r\n        {\" \"}\r\n        {/* <Text color={\"#000000\"} fontSize={\"1.25rem\"} fontWeight={\"600\"}>\r\n          Status List\r\n        </Text> */}\r\n        <Spacer />\r\n        <Box mt=\"2\" ml=\"3\">\r\n          <Button\r\n            size={\"xs\"}\r\n            borderRadius={\"full\"}\r\n            onClick={() => dispatch(getData(endpoint))}\r\n          >\r\n            <FiRefreshCcw />\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n      <Divider\r\n        bg=\"gray.300\" // Set the background color to dark gray\r\n        height=\"2px\" // Set the height of the divider\r\n      />\r\n      <TableContainer px=\"2\">\r\n        <Box overflowY=\"auto\" height={480} maxHeight=\"480px\">\r\n          <Table variant=\"simple\" size=\"sm\">\r\n            <Thead bg={\"gray.100\"} position={\"sticky\"} top=\"0\">\r\n              <Tr>\r\n                <Th>#</Th>\r\n                <Th>Name</Th>\r\n                <Th>Phone Number</Th>\r\n                <Th>Type</Th>\r\n                <Th>Duration</Th>\r\n              </Tr>\r\n            </Thead>\r\n            {loading ? (\r\n              <Loader />\r\n            ) : (\r\n              <Tbody>\r\n                {contacts?.map((el, i) => (\r\n                  <Tr key={el._id}>\r\n                    <Td>{i + 1}</Td>\r\n                    <Td>\r\n                      <IconButton\r\n                        colorScheme={\r\n                          el.callType === \"Inbound\" ? \"green\" : \"red\"\r\n                        }\r\n                        aria-label=\"Call Segun\"\r\n                        size=\"sm\"\r\n                        mx={2}\r\n                        icon={\r\n                          el.callType === \"Inbound\" ? (\r\n                            <BsFillTelephoneInboundFill />\r\n                          ) : (\r\n                            <BsFillTelephoneOutboundFill />\r\n                          )\r\n                        }\r\n                      />\r\n                    </Td>\r\n                    <Td>{el.phoneNumber}</Td>\r\n                    <Td>{el.callType}</Td>\r\n                    <Td>{el.duration}</Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n            )}\r\n          </Table>\r\n        </Box>\r\n      </TableContainer>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default CallHistory;\r\n"],"names":["_jsx","Tr","height","maxHeight","children","Td","colSpan","Center","h","Box","SkeletonText","mt","noOfLines","spacing","skeletonHeight","width","borderRadius","_useSelector","useSelector","state","common","contacts","loading","dispatch","useDispatch","endpoint","useNavigate","memoizedContacts","useMemo","useEffect","length","getData","_jsxs","Stack","px","display","justifyContent","alignItems","Spacer","ml","Button","size","onClick","FiRefreshCcw","Divider","bg","TableContainer","overflowY","Table","variant","Thead","position","top","Th","Loader","Tbody","map","el","i","IconButton","colorScheme","callType","mx","icon","BsFillTelephoneInboundFill","BsFillTelephoneOutboundFill","phoneNumber","duration","_id"],"sourceRoot":""}