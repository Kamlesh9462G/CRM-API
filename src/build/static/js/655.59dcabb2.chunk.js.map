{"version":3,"file":"static/js/655.59dcabb2.chunk.js","mappings":"oQA6KA,UAlH+B,WAE7B,IAAMA,GAAgBC,EAAAA,EAAAA,MAGdC,GAAOC,EAAAA,EAAAA,MAAPD,GAGFE,GAAWC,EAAAA,EAAAA,MAGXC,GAAQC,EAAAA,EAAAA,KAGRC,EAAmB,SAGzBC,GAAsCC,EAAAA,EAAAA,KACpC,SAACC,GAA+B,OAAKA,EAAMC,MAAM,IAD3CC,EAAMJ,EAANI,OAAkBC,GAAFL,EAARM,SAAiBN,EAAPK,SAK1BE,GAMIC,EAAAA,EAAAA,IAAkB,CACpBC,cAAe,CACbC,YAAkB,OAANN,QAAM,IAANA,OAAM,EAANA,EAAQM,aAAc,MAPpCC,EAAYJ,EAAZI,aACAC,EAAQL,EAARK,SACaC,EAAMN,EAAnBO,UAAaD,OACbE,EAAKR,EAALQ,MACAC,EAAOT,EAAPS,SAQFC,EAAAA,EAAAA,YAAU,WACR1B,GAAS2B,EAAAA,EAAAA,IAAYzB,EAAIM,IACzBR,GAAS4B,EAAAA,EAAAA,IAAQpB,GACnB,GAAG,CAACN,EAAIF,KAGR0B,EAAAA,EAAAA,YAAU,WACJb,GACFW,EAAM,CACJL,WAAkB,OAANN,QAAM,IAANA,OAAM,EAANA,EAAQM,YAG1B,GAAG,CAACN,EAAQW,IAWZ,OACEK,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,EAAE,OAAMC,SAAA,EAKbC,EAAAA,EAAAA,KAAA,QAAMC,SAAUd,GAdH,SAACe,GAChBnC,GACEoC,EAAAA,EAAAA,IAAWlC,EAAIM,EAAU,CAAEW,WAAYgB,EAAKhB,YAAcf,EAAUE,IACpE+B,MAAK,WACLrC,GAAS4B,EAAAA,EAAAA,IAAQ,UACnB,GACF,IAQ2CI,UACrCH,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACC,QAAS,EAAGC,GAAI,GAAIC,GAAI,EAAGC,IAAK,EAAEV,SAAA,EAC5CH,EAAAA,EAAAA,MAACc,EAAAA,GAAG,CAAAX,SAAA,EACFC,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CAACC,SAAU,OAAQC,GAAG,IAAIC,GAAG,MAAKf,SAAC,iBAGxCC,EAAAA,EAAAA,KAACe,EAAAA,GAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACA5B,EAAS,aAAc,CAAE6B,UAAU,KAAO,IAC9CC,KAAM,KACNC,YAAa9B,EAAOH,WAAa,UAAY,WAC7CkC,aAAc,aAEf/B,EAAOH,aACNc,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CAACU,MAAM,UAAUT,SAAS,KAAIb,SAAC,gCAMxCC,EAAAA,EAAAA,KAACU,EAAAA,GAAG,CACFY,GAAI,EACJC,QAAS,OACTC,eAAgB,aAChBC,WAAY,SAAS1B,UAErBC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,CACLC,UAAW9C,EACX+C,YAAY,iBACZC,KAAK,SACLX,KAAM,KACNY,OAAQ,CAAEC,GAAI,WACdC,EAAE,WACFD,GAAG,UACHX,aAAc,UACdC,MAAM,iBACNY,WAAY,MACZrB,SAAU,OAAOb,SAClB,0BAQPC,EAAAA,EAAAA,KAACkC,EAAAA,QAAO,CAAC1C,QAASA,MAGxB,C","sources":["pages/status/UpdateStatus.tsx"],"sourcesContent":["/*\r\n  UpdateStatus Component:\r\n  This component allows updating a status by providing a form with a select input for the status name.\r\n  It utilizes Chakra UI components for styling and form handling using react-hook-form.\r\n\r\n  It does the following:\r\n  - Imports necessary dependencies and components\r\n  - Defines the interfaces for UpdateStatus and FormData\r\n  - Retrieves the status and statuses data from Redux using the useSelector hook\r\n  - Initializes the dispatch function from Redux using the useDispatch hook\r\n  - Retrieves the \"id\" parameter from the URL using the useParams hook\r\n  - Initializes the navigate function from react-router-dom for navigation purposes\r\n  - Initializes the useToast hook for displaying toast messages\r\n  - Defines the endpoint for API calls\r\n  - Initializes the react-hook-form for form handling and sets default form values based on the status data\r\n  - Fetches status data and the specific status by ID when the component mounts\r\n  - Resets the form values when the status data changes\r\n  - Handles form submission by dispatching the updateData action and fetching updated status data\r\n  - Renders the form with a select input for status name and displays form validation errors if any\r\n*/\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Input,\r\n  Select,\r\n  SimpleGrid,\r\n  Stack,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getData,\r\n  getDataById,\r\n  updateData,\r\n} from \"../../redux/actions/common.action\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { DevTool } from \"@hookform/devtools\";\r\n\r\n//interface for the updatedata\r\ninterface UpdateStatus {\r\n  status: {\r\n    StatusName: string;\r\n  };\r\n  statuses: {\r\n    StatusName: string;\r\n    _id: string;\r\n  }[];\r\n  loading: boolean;\r\n}\r\n\r\n//interface for filled pre formdata\r\ninterface FormData {\r\n  StatusName: string;\r\n}\r\n\r\nconst UpdateStatus: React.FC = () => {\r\n  // Obtaining the dispatch function using the useDispatch hook\r\n  const dispatch: any = useDispatch();\r\n\r\n  // Accessing the id parameter from the URL using the useParams hook\r\n  const { id } = useParams();\r\n\r\n  // Accessing the useNavigate hook and assigning it to the navigate variable\r\n  const navigate = useNavigate();\r\n\r\n  // Accessing the useToast hook and assigning it to the toast variable\r\n  const toast = useToast();\r\n\r\n  // Setting the endpoint to \"status\"\r\n  const endpoint: string = \"status\";\r\n\r\n  // Accessing the status and statuses variables from the common reducer using the useSelector hook\r\n  const { status, statuses, loading } = useSelector(\r\n    (state: { common: UpdateStatus }) => state.common\r\n  );\r\n\r\n  // Setting up form validation and state management using the useForm hook\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    formState: { errors },\r\n    reset,\r\n    control,\r\n  } = useForm<FormData>({\r\n    defaultValues: {\r\n      StatusName: status?.StatusName || \"\", // Setting the default value for the StatusName field based on the status data\r\n    },\r\n  });\r\n\r\n  // Fetching the data for the specified status and all statuses\r\n  useEffect(() => {\r\n    dispatch(getDataById(id, endpoint)); // Fetching the specific status data by ID\r\n    dispatch(getData(endpoint)); // Fetching all statuses\r\n  }, [id, dispatch]);\r\n\r\n  // Resetting the form fields when the status data changes\r\n  useEffect(() => {\r\n    if (status) {\r\n      reset({\r\n        StatusName: status?.StatusName, // Resetting the StatusName field with the updated value\r\n      });\r\n    }\r\n  }, [status, reset]);\r\n\r\n  // Handling form submission\r\n  const onSubmit = (data: FormData) => {\r\n    dispatch(\r\n      updateData(id, endpoint, { StatusName: data.StatusName }, navigate, toast)\r\n    ).then(() => {\r\n      dispatch(getData(\"status\")); // Fetching the updated status data after successful submission\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Stack h=\"100%\">\r\n      {/* heading starts */}\r\n\r\n      {/* heading end */}\r\n      {/* inputs starts */}\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <SimpleGrid columns={3} px={10} py={1} gap={6}>\r\n          <Box>\r\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\r\n              Status Name\r\n            </Text>\r\n            <Input\r\n              {...register(\"StatusName\", { required: true })}\r\n              size={\"sm\"}\r\n              borderColor={errors.StatusName ? \"red.500\" : \"gray.400\"}\r\n              borderRadius={\"0.25rem\"}\r\n            />\r\n            {errors.StatusName && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                Status name is required\r\n              </Text>\r\n            )}\r\n          </Box>\r\n\r\n          <Box\r\n            mt={6}\r\n            display={\"flex\"}\r\n            justifyContent={\"flex-start\"}\r\n            alignItems={\"center\"}\r\n          >\r\n            <Button\r\n              isLoading={loading}\r\n              loadingText=\"Please wait...\"\r\n              type=\"submit\"\r\n              size={\"sm\"}\r\n              _hover={{ bg: \"#FF9000\" }}\r\n              w=\"8.188rem\"\r\n              bg=\"#FF9000\"\r\n              borderRadius={\"0.25rem\"}\r\n              color=\"whiteAlpha.900\"\r\n              fontWeight={\"700\"}\r\n              fontSize={\"1rem\"}\r\n            >\r\n              Update Status\r\n            </Button>\r\n          </Box>\r\n        </SimpleGrid>\r\n      </form>\r\n      {/* inputs end */}\r\n\r\n      <DevTool control={control} />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default UpdateStatus;\r\n"],"names":["dispatch","useDispatch","id","useParams","navigate","useNavigate","toast","useToast","endpoint","_useSelector","useSelector","state","common","status","loading","statuses","_useForm","useForm","defaultValues","StatusName","handleSubmit","register","errors","formState","reset","control","useEffect","getDataById","getData","_jsxs","Stack","h","children","_jsx","onSubmit","data","updateData","then","SimpleGrid","columns","px","py","gap","Box","Text","fontSize","ml","mb","Input","_objectSpread","required","size","borderColor","borderRadius","color","mt","display","justifyContent","alignItems","Button","isLoading","loadingText","type","_hover","bg","w","fontWeight","DevTool"],"sourceRoot":""}