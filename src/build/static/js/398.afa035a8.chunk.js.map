{"version":3,"file":"static/js/398.afa035a8.chunk.js","mappings":"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","sources":["components/AlertDialouge.tsx","components/Loader.tsx","pages/leads/components/AttachmentPopup.tsx","pages/leads/components/UpdateDatePopup.tsx","pages/leads/components/StatusPopup.tsx","pages/leads/components/CoursePricePopup.tsx","pages/leads/components/CourseNamePopup.tsx","pages/leads/components/HoverBox.tsx","pages/leads/LeadList.tsx"],"sourcesContent":["// AlertDialogDelete Component: Displays a delete confirmation dialog using Chakra UI.\r\n// Props:\r\n// - handleDelete: Function to handle the delete action when confirmed.\r\n// - id: The identifier of the item to delete.\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n  useDisclosure,\r\n  Button,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nimport { RiDeleteBinLine } from \"react-icons/ri\";\r\nimport { useSelector } from \"react-redux\";\r\ninterface Props {\r\n  handleDelete: (id: number) => void;\r\n  id: number;\r\n}\r\n\r\ninterface Loading {\r\n  loading: boolean;\r\n}\r\n\r\nconst AlertDialogDelete: React.FC<Props> = ({ handleDelete, id }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const cancelRef = React.useRef<HTMLButtonElement>(null);\r\n  const { loading } = useSelector((state: { common: Loading }) => state.common);\r\n  const onDeleteClick = () => {\r\n    handleDelete(id);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box onClick={onOpen}>\r\n        <RiDeleteBinLine color=\"red\" size={18} cursor={\"pointer\"} />\r\n      </Box>\r\n\r\n      <AlertDialog\r\n        isOpen={isOpen}\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n      >\r\n        <AlertDialogOverlay\r\n          bg=\"blackAlpha.300\"\r\n          backdropFilter=\"blur(5px) hue-rotate(90deg)\"\r\n        >\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              Delete\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>\r\n              Are you sure? You can't undo this action afterwards.\r\n            </AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button\r\n                size=\"sm\"\r\n                fontWeight={\"medium\"}\r\n                ref={cancelRef}\r\n                onClick={onClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                fontWeight={\"medium\"}\r\n                isLoading={loading}\r\n                loadingText=\"Please wait...\"\r\n                colorScheme=\"red\"\r\n                onClick={onDeleteClick}\r\n                ml={3}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\nexport default AlertDialogDelete;\r\n","// Loader Component: Displays a loader spinner within a table row using react-loader-spinner and Chakra UI.\r\nimport { Box, Center, Spinner, Td, Tr } from \"@chakra-ui/react\";\r\nimport {\r\n  Skeleton,\r\n  SkeletonCircle,\r\n  SkeletonText,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\n// import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <Tr height={400} maxHeight=\"400px\">\r\n      <Td colSpan={25}>\r\n        <Center h=\"100%\">\r\n          {/* <Spinner\r\n            speed=\"0.3s\"\r\n            thickness=\"3px\"\r\n            emptyColor=\"gray.200\"\r\n            color=\"orange.300\"\r\n            size=\"xl\"\r\n          /> */}\r\n          {/* <Box>Heyyyyy</Box> */}\r\n          <Box>\r\n            <SkeletonText\r\n              mt=\"4\"\r\n              noOfLines={12}\r\n              spacing=\"4\"\r\n              skeletonHeight=\"4\"\r\n              width=\"84rem\"\r\n              borderRadius=\"2rem\"\r\n            />\r\n          </Box>\r\n        </Center>\r\n      </Td>\r\n    </Tr>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n  useDisclosure,\r\n  Button,\r\n  Box,\r\n  FormControl,\r\n  FormLabel,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\ninterface Props {\r\n  image: string;\r\n}\r\n\r\n\r\nconst AttachmentPopup: React.FC<Props> = ({ image }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const cancelRef = React.useRef<HTMLButtonElement>(null);\r\n\r\n  return (\r\n    <>\r\n      <Box onClick={onOpen}>\r\n        <Button\r\n          size=\"xs\"\r\n          fontWeight={\"medium\"}\r\n          mr=\"4\"\r\n          colorScheme=\"gray\"\r\n          background={\"none\"}\r\n          color=\"orange.500\"\r\n          px=\"2\"\r\n        >\r\n          Click Here\r\n        </Button>\r\n      </Box>\r\n\r\n      <AlertDialog\r\n        isOpen={isOpen}\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n      >\r\n        <AlertDialogOverlay\r\n          bg=\"blackAlpha.300\"\r\n          backdropFilter=\"blur(5px) hue-rotate(90deg)\"\r\n        >\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              {/* Update Price */}\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>\r\n              <FormControl variant=\"floating\" id=\"SourceName\">\r\n                <Image src={image} alt=\"No-image\" />\r\n\r\n                <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                  Attachments\r\n                </FormLabel>\r\n              </FormControl>\r\n            </AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button\r\n                ref={cancelRef}\r\n                onClick={onClose}\r\n                fontWeight={\"medium\"}\r\n                size=\"sm\"\r\n                colorScheme=\"red\"\r\n                ml={3}\r\n              >\r\n                Close\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\nexport default AttachmentPopup;\r\n","import {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n  useDisclosure,\r\n  Button,\r\n  Box,\r\n  Select,\r\n  FormControl,\r\n  FormLabel,\r\n  useToast,\r\n  Input,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateData } from \"../../../redux/actions/common.action\";\r\nimport { useNavigate } from \"react-router-dom\";\r\ninterface Props {\r\n  date: string;\r\n  id: string;\r\n  getDataById: (enpoint: string, id: string) => void;\r\n}\r\n\r\ninterface UpdateDate {\r\n  loading: boolean;\r\n}\r\n\r\nconst UpdateDatePopup: React.FC<Props> = ({ date, id, getDataById }) => {\r\n  const [selectedDate, setSelectedDate] = useState<string>();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const dispatch: any = useDispatch();\r\n  const toast = useToast();\r\n\r\n  const endpoint: string = \"lead\";\r\n  const navigate = useNavigate();\r\n  const cancelRef = React.useRef<HTMLButtonElement>(null);\r\n  const { loading } = useSelector(\r\n    (state: { common: UpdateDate }) => state.common\r\n  );\r\n  const onUpdateDate = () => {\r\n    dispatch(\r\n      updateData(id, endpoint, { FollowupDate: selectedDate }, navigate, toast)\r\n    ).then(() => dispatch(getDataById(id, endpoint)));\r\n    onClose();\r\n  };\r\n  useEffect(() => {\r\n    //    const formattedDate = new Date(date).toLocaleDateString(\"en-GB\");\r\n    setSelectedDate(date); // Update selectedDate when the date prop changes\r\n  }, [date]);\r\n\r\n  return (\r\n    <>\r\n      <Box onClick={onOpen}>\r\n        <Button\r\n          size=\"xs\"\r\n          fontSize={\"10px\"}\r\n          fontWeight={\"medium\"}\r\n          mr=\"4\"\r\n          colorScheme=\"orange\"\r\n          variant=\"outline\"\r\n          color=\"orange.500\"\r\n          px=\"2\"\r\n        >\r\n          Update Date\r\n        </Button>\r\n      </Box>\r\n\r\n      <AlertDialog\r\n        isOpen={isOpen}\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n      >\r\n        <AlertDialogOverlay\r\n          bg=\"blackAlpha.300\"\r\n          backdropFilter=\"blur(5px) hue-rotate(90deg)\"\r\n        >\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              {/* Update Price */}\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>\r\n              <FormControl variant=\"floating\" id=\"SourceName\">\r\n                <Input\r\n                  type=\"date\"\r\n                  value={\r\n                    selectedDate\r\n                      ? new Date(selectedDate).toISOString().substr(0, 10)\r\n                      : \"\"\r\n                  }\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                    setSelectedDate(e.target.value)\r\n                  }\r\n                />\r\n\r\n                <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                  Product Price\r\n                </FormLabel>\r\n              </FormControl>\r\n            </AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button\r\n                ref={cancelRef}\r\n                onClick={onClose}\r\n                size=\"sm\"\r\n                fontWeight={\"medium\"}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                fontWeight={\"medium\"}\r\n                size=\"sm\"\r\n                isLoading={loading}\r\n                loadingText=\"Please wait...\"\r\n                colorScheme=\"green\"\r\n                onClick={onUpdateDate}\r\n                ml={3}\r\n              >\r\n                Update\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\nexport default UpdateDatePopup;\r\n","import {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n  useDisclosure,\r\n  Button,\r\n  Box,\r\n  Select,\r\n  FormControl,\r\n  FormLabel,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { RiDeleteBinLine } from \"react-icons/ri\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getData, updateData } from \"../../../redux/actions/common.action\";\r\nimport { useNavigate } from \"react-router-dom\";\r\ninterface Props {\r\n  status: string;\r\n  id: string;\r\n  getDataById: (enpoint: string, id: string) => void;\r\n}\r\n\r\ninterface StatusLists {\r\n  statuses: {\r\n    StatusName: string;\r\n  }[];\r\n  loading: boolean;\r\n}\r\n\r\nconst StatusPopup: React.FC<Props> = ({ status, id, getDataById }) => {\r\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"\");\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const dispatch: any = useDispatch();\r\n  const toast = useToast();\r\n  const endpointc: string = \"status\";\r\n  const endpoint: string = \"lead\";\r\n  const navigate = useNavigate();\r\n  const cancelRef = React.useRef<HTMLButtonElement>(null);\r\n  const { loading, statuses } = useSelector(\r\n    (state: { common: StatusLists }) => state.common\r\n  );\r\n  const onUpdatePrice = () => {\r\n    dispatch(\r\n      updateData(id, endpoint, { Status: selectedStatus }, navigate, toast)\r\n    ).then(() => dispatch(getDataById(id, endpoint)));\r\n    onClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getData(endpointc));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setSelectedStatus(status);\r\n  }, [status]);\r\n\r\n  return (\r\n    <>\r\n      <Box onClick={onOpen}>\r\n        <Button\r\n          size=\"xs\"\r\n          fontSize={\"10px\"}\r\n          fontWeight={\"medium\"}\r\n          mr=\"4\"\r\n          colorScheme=\"orange\"\r\n          variant=\"outline\"\r\n          color=\"orange.500\"\r\n          px=\"2\"\r\n        >\r\n          Update Status\r\n        </Button>\r\n      </Box>\r\n\r\n      <AlertDialog\r\n        isOpen={isOpen}\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n      >\r\n        <AlertDialogOverlay\r\n          bg=\"blackAlpha.300\"\r\n          backdropFilter=\"blur(5px) hue-rotate(90deg)\"\r\n        >\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              {/* Update Price */}\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>\r\n              <FormControl variant=\"floating\" id=\"SourceName\">\r\n                <Select\r\n                  value={selectedStatus}\r\n                  onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\r\n                    setSelectedStatus(e.target.value)\r\n                  }\r\n                >\r\n                  <option value={selectedStatus}>{selectedStatus}</option>{\" \"}\r\n                  {/* Set initial value */}\r\n                  {statuses?.map((el, i) => (\r\n                    <option value={el.StatusName} key={i}>\r\n                      {el.StatusName}\r\n                    </option>\r\n                  ))}\r\n                </Select>\r\n                <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                  Status\r\n                </FormLabel>\r\n              </FormControl>\r\n            </AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button\r\n                ref={cancelRef}\r\n                onClick={onClose}\r\n                size=\"sm\"\r\n                fontWeight={\"medium\"}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                fontWeight={\"medium\"}\r\n                size=\"sm\"\r\n                isLoading={loading}\r\n                loadingText=\"Please wait...\"\r\n                colorScheme=\"green\"\r\n                onClick={onUpdatePrice}\r\n                ml={3}\r\n              >\r\n                Update\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\nexport default StatusPopup;\r\n","import {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n  useDisclosure,\r\n  Button,\r\n  Box,\r\n  FormControl,\r\n  FormLabel,\r\n  useToast,\r\n  Input,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { RiDeleteBinLine } from \"react-icons/ri\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getData, updateData } from \"../../../redux/actions/common.action\";\r\nimport { useNavigate } from \"react-router-dom\";\r\ninterface Props {\r\n  coursePrice: number;\r\n  id: string;\r\n  getDataById: (enpoint: string, id: string) => void;\r\n}\r\n\r\ninterface CourseLists {\r\n  loading: boolean;\r\n}\r\n\r\nconst CoursePricePopup: React.FC<Props> = ({\r\n  coursePrice,\r\n  id,\r\n  getDataById,\r\n}) => {\r\n  const [selectedPrice, setSelectedPrice] = useState<number>();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const dispatch: any = useDispatch();\r\n  const toast = useToast();\r\n\r\n  const endpoint: string = \"lead\";\r\n  const navigate = useNavigate();\r\n  const cancelRef = React.useRef<HTMLButtonElement>(null);\r\n  const { loading } = useSelector(\r\n    (state: { common: CourseLists }) => state.common\r\n  );\r\n  const onUpdatePrice = () => {\r\n    dispatch(\r\n      updateData(id, endpoint, { CoursePrice: selectedPrice }, navigate, toast)\r\n    ).then(() => dispatch(getDataById(id, endpoint)));\r\n    onClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSelectedPrice(coursePrice); // Update selectedPrice when the coursePrice prop changes\r\n  }, [coursePrice]);\r\n\r\n  return (\r\n    <>\r\n      <Box onClick={onOpen}>\r\n        <Button\r\n          size=\"xs\"\r\n          fontSize={\"10px\"}\r\n          fontWeight={\"medium\"}\r\n          mr=\"4\"\r\n          colorScheme=\"orange\"\r\n          variant=\"outline\"\r\n          color=\"orange.500\"\r\n          px=\"2\"\r\n        >\r\n          Update Price\r\n        </Button>\r\n      </Box>\r\n\r\n      <AlertDialog\r\n        isOpen={isOpen}\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n      >\r\n        <AlertDialogOverlay\r\n          bg=\"blackAlpha.300\"\r\n          backdropFilter=\"blur(5px) hue-rotate(90deg)\"\r\n        >\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              {/* Update Price */}\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>\r\n              <FormControl variant=\"floating\" id=\"SourceName\">\r\n                <Input\r\n                  type=\"number\"\r\n                  value={selectedPrice}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n                    setSelectedPrice(+e.target.value)\r\n                  }\r\n                />\r\n\r\n                <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                  Course Price\r\n                </FormLabel>\r\n              </FormControl>\r\n            </AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button\r\n                ref={cancelRef}\r\n                onClick={onClose}\r\n                size=\"sm\"\r\n                fontWeight={\"medium\"}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                fontWeight={\"medium\"}\r\n                size=\"sm\"\r\n                isLoading={loading}\r\n                loadingText=\"Please wait...\"\r\n                colorScheme=\"green\"\r\n                onClick={onUpdatePrice}\r\n                ml={3}\r\n              >\r\n                Update\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\nexport default CoursePricePopup;\r\n","import {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n  useDisclosure,\r\n  Button,\r\n  Box,\r\n  Select,\r\n  FormControl,\r\n  FormLabel,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { RiDeleteBinLine } from \"react-icons/ri\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getData, updateData } from \"../../../redux/actions/common.action\";\r\nimport { useNavigate } from \"react-router-dom\";\r\ninterface Props {\r\n  course: string;\r\n  id: string;\r\n  coursePrice: string;\r\n  getDataById: (enpoint: string, id: string) => void;\r\n}\r\n\r\ninterface CourseLists {\r\n  courses: {\r\n    CourseName: string;\r\n  }[];\r\n  loading: boolean;\r\n}\r\n\r\nconst CourseNamePopup: React.FC<Props> = ({\r\n  course,\r\n  coursePrice,\r\n  id,\r\n  getDataById,\r\n}) => {\r\n  const [selectedCourse, setSelectedCourse] = useState<string>(\"\");\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const dispatch: any = useDispatch();\r\n  const toast = useToast();\r\n  const endpointc: string = \"course\";\r\n  const endpoint: string = \"lead\";\r\n  const navigate = useNavigate();\r\n  const cancelRef = React.useRef<HTMLButtonElement>(null);\r\n  const { loading, courses } = useSelector(\r\n    (state: { common: CourseLists }) => state.common\r\n  );\r\n  const onUpdatePrice = () => {\r\n    dispatch(\r\n      updateData(\r\n        id,\r\n        endpoint,\r\n        { EnquiryCourse: selectedCourse, CoursePrice: coursePrice },\r\n        navigate,\r\n        toast\r\n      )\r\n    );\r\n    dispatch(getDataById(id, endpoint));\r\n    onClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getData(endpointc));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setSelectedCourse(course);\r\n  }, [course]);\r\n\r\n  return (\r\n    <>\r\n      <Box onClick={onOpen}>\r\n        <Button\r\n          size=\"xs\"\r\n          fontSize={\"10px\"}\r\n          fontWeight={\"medium\"}\r\n          mr=\"4\"\r\n          colorScheme=\"orange\"\r\n          variant=\"outline\"\r\n          color=\"orange.500\"\r\n          px=\"2\"\r\n        >\r\n          Update Course\r\n        </Button>\r\n      </Box>\r\n\r\n      <AlertDialog\r\n        isOpen={isOpen}\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n      >\r\n        <AlertDialogOverlay\r\n          bg=\"blackAlpha.300\"\r\n          backdropFilter=\"blur(5px) hue-rotate(90deg)\"\r\n        >\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              {/* Update Price */}\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>\r\n              <FormControl variant=\"floating\" id=\"SourceName\">\r\n                <Select\r\n                  value={selectedCourse}\r\n                  onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\r\n                    setSelectedCourse(e.target.value)\r\n                  }\r\n                >\r\n                  <option value={selectedCourse}>{selectedCourse}</option>{\" \"}\r\n                  {/* Set initial value */}\r\n                  {courses?.map((el, i) => (\r\n                    <option value={el.CourseName} key={i}>\r\n                      {el.CourseName}\r\n                    </option>\r\n                  ))}\r\n                </Select>\r\n                <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                  Course Name\r\n                </FormLabel>\r\n              </FormControl>\r\n            </AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button\r\n                ref={cancelRef}\r\n                onClick={onClose}\r\n                size=\"sm\"\r\n                fontWeight={\"medium\"}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                fontWeight={\"medium\"}\r\n                size=\"sm\"\r\n                isLoading={loading}\r\n                loadingText=\"Please wait...\"\r\n                colorScheme=\"green\"\r\n                onClick={onUpdatePrice}\r\n                ml={3}\r\n              >\r\n                Update\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\nexport default CourseNamePopup;\r\n","import React from \"react\";\r\nimport { Box, Text, Spinner, border } from \"@chakra-ui/react\";\r\nimport Loader from \"../../../components/Loader\";\r\n\r\ninterface HoverBoxProps {\r\n  loading: boolean;\r\n  logs: any;\r\n  position: { top: number; right: number };\r\n  onMouseEnter: () => void;\r\n  onMouseLeave: () => void;\r\n}\r\n\r\nconst HoverBox: React.FC<HoverBoxProps> = ({\r\n  loading,\r\n  logs,\r\n  position,\r\n  onMouseEnter,\r\n  onMouseLeave,\r\n}) => {\r\n  const { top, right } = position;\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Box\r\n          onMouseEnter={onMouseEnter}\r\n          onMouseLeave={onMouseLeave}\r\n          position=\"absolute\"\r\n          top={top}\r\n          right={right}\r\n          bg=\"white\"\r\n          rounded=\"md\"\r\n          borderWidth=\"2\"\r\n          padding={2}\r\n          zIndex={10}\r\n          boxShadow=\"md\" // Add a shadow to the box\r\n        >\r\n          <Spinner\r\n            thickness=\"4px\"\r\n            speed=\"0.65s\"\r\n            emptyColor=\"gray.200\"\r\n            color=\"blue.500\"\r\n            size=\"md\"\r\n          />\r\n        </Box>\r\n      ) : (\r\n        <Box\r\n          onMouseEnter={onMouseEnter}\r\n          onMouseLeave={onMouseLeave}\r\n          position=\"absolute\"\r\n          top={top}\r\n          right={right}\r\n          bg=\"white\"\r\n          fontSize=\"sm\"\r\n          rounded=\"md\"\r\n          borderWidth=\"2\"\r\n          padding={2}\r\n          zIndex={10}\r\n          // height=\"200px\"\r\n          width=\"260px\" // Adjust the desired width\r\n          overflowY=\"auto\" // Add vertical scrollbar when content exceeds the height\r\n          textAlign=\"start\" // Align text to the start of the box\r\n          boxShadow=\"md\" // Add a shadow to the box\r\n        >\r\n          {/* Content */}\r\n          {logs.length <= 0 ? (\r\n            <Box color={\"red.400\"} fontWeight={600}>\r\n              There is no log history!\r\n            </Box>\r\n          ) : (\r\n            <ul>\r\n              {logs?.map((el: any, index: number) => (\r\n                <li\r\n                  key={index}\r\n                  style={{\r\n                    background: index % 2 === 0 ? \"#F7FAFC\" : \"#EDF2F7\", // Change background color of even/odd rows\r\n                    transition: \"background-color 0.3s\", // Add animation to background color change on hover\r\n                    padding: \"4px\", // Add padding to each list item\r\n                    cursor: \"pointer\", // Show pointer cursor on hover\r\n                  }}\r\n                >\r\n                  {el.Remarks}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HoverBox;\r\n","// declare module \"react-date-range\";\r\nimport {\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  RadioGroup,\r\n  Select,\r\n  SimpleGrid,\r\n  Stack,\r\n  Table,\r\n  TableContainer,\r\n  Tbody,\r\n  Radio,\r\n  Td,\r\n  Text,\r\n  Textarea,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useDisclosure,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { Modal, ModalContent, ModalFooter, ModalBody } from \"@chakra-ui/react\";\r\n\r\nimport { DateRange } from \"react-date-range\";\r\n\r\nimport format from \"date-fns/format\";\r\n\r\nimport \"react-date-range/dist/styles.css\";\r\nimport \"react-date-range/dist/theme/default.css\";\r\nimport React, { useState, useEffect, useMemo, useRef } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  deleteData,\r\n  getData,\r\n  getDataById,\r\n  postData,\r\n} from \"../../redux/actions/common.action\";\r\nimport { MultiSelect } from \"react-multi-select-component\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { SearchIcon } from \"@chakra-ui/icons\";\r\nimport axios from \"axios\";\r\n\r\nimport AlertDialogDelete from \"../../components/AlertDialouge\";\r\n\r\nimport { TfiEye } from \"react-icons/tfi\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { FaSortAlphaDownAlt, FaSortAlphaUp } from \"react-icons/fa\";\r\nimport AttachmentPopup from \"./components/AttachmentPopup\";\r\nimport UpdateDatePopup from \"./components/UpdateDatePopup\";\r\nimport StatusPopup from \"./components/StatusPopup\";\r\nimport CoursePricePopup from \"./components/CoursePricePopup\";\r\nimport CourseNamePopup from \"./components/CourseNamePopup\";\r\nimport { BASE_URL } from \"../../config/RequestMethod\";\r\nimport HoverBox from \"./components/HoverBox\";\r\n\r\nimport moment from \"moment\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nconst LeadList = () => {\r\n  const {\r\n    cities,\r\n    signinuser,\r\n    sources,\r\n    statuses,\r\n    branches,\r\n    courses,\r\n    users,\r\n    error,\r\n  } = useSelector((state: any) => state.common);\r\n\r\n  const dispatch: any = useDispatch();\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    dispatch(getData(\"branch\"));\r\n    dispatch(getData(\"user\"));\r\n    dispatch(getData(\"source\"));\r\n    dispatch(getData(\"city\"));\r\n    dispatch(getData(\"status\"));\r\n    dispatch(getData(\"course\"));\r\n  }, [dispatch]);\r\n\r\n  const [city, setCities] = useState<Option[]>([]);\r\n  const [citylist, setCityList] = useState<string>(\"\");\r\n\r\n  const [source, setSource] = useState<Option[]>([]);\r\n  const [sourcelist, setSourceList] = useState<string>(\"\");\r\n  const [status, setStatus] = useState<Option[]>([\r\n    { value: \"6369252dd85a641f10cdf4f2\", label: \"Open\" },\r\n    { value: \"6369252dd85a641f10cdf4f6\", label: \"Final Lead\" },\r\n    { value: \"6369252dd85a641f10cdf4f8\", label: \"Hot Lead\" },\r\n  ]);\r\n\r\n  const [statuslist, setStatusList] = useState<string>(\"\");\r\n  const [branch, setBranch] = useState<Option[]>([]);\r\n  const [branchlist, setBranchList] = useState<string>(\"\");\r\n  const [course, setCourse] = useState<Option[]>([]);\r\n  const [courselist, setCourseList] = useState<string>(\"\");\r\n  const [user, setUser] = useState<Option[]>([]);\r\n  const [userlist, setUserList] = useState<string>(\"\");\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [search, setSearch] = useState<string>(\"\");\r\n  const [limit, setLimit] = useState<number>(100);\r\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\" | \"\">(\"\");\r\n  const [sortColumn, setSortColumn] = useState(\"\");\r\n\r\n  //  console.log(filteredData,\"ok\")\r\n\r\n  const [followUpStart, setfollowUpStart] = useState([\r\n    {\r\n      startDate: null,\r\n      endDate: null,\r\n      key: \"selection\",\r\n    },\r\n  ]);\r\n  const [enquiryDate, setEnqDate] = useState([\r\n    {\r\n      startDate: null,\r\n      endDate: null,\r\n      key: \"selection\",\r\n    },\r\n  ]);\r\n\r\n  // open close\r\n  const [open, setOpen] = useState(false);\r\n  const [openenq, setOpenenq] = useState(false);\r\n\r\n  // get the target element to toggle\r\n  const refOne = useRef<HTMLDivElement>(null);\r\n  const refTwo = useRef<HTMLDivElement>(null);\r\n  interface Option {\r\n    value: string;\r\n    label: string;\r\n  }\r\n\r\n  const hideOnEscape = (e: KeyboardEvent) => {\r\n    if (e.key === \"Escape\") {\r\n      setOpen(false);\r\n      setOpenenq(false);\r\n    }\r\n  };\r\n\r\n  //Hide on outside click\r\n  const hideOnClickOutside = (e: MouseEvent) => {\r\n    // console.log(refOne.current)\r\n    // console.log(e.target)\r\n    if (refOne.current && !refOne.current.contains(e.target as Node)) {\r\n      setOpen(false);\r\n    }\r\n    if (refTwo.current && !refTwo.current.contains(e.target as Node)) {\r\n      setOpenenq(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", hideOnEscape);\r\n    document.addEventListener(\"mousedown\", hideOnClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", hideOnEscape);\r\n      document.removeEventListener(\"mousedown\", hideOnClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  interface City {\r\n    _id: string;\r\n    CityName: string;\r\n  }\r\n\r\n  interface Source {\r\n    _id: string;\r\n    SourceName: string;\r\n  }\r\n\r\n  interface Status {\r\n    _id: string;\r\n    StatusName: string;\r\n  }\r\n  interface Branch {\r\n    _id: string;\r\n    BranchName: string;\r\n  }\r\n  interface Course {\r\n    _id: string;\r\n    CourseName: string;\r\n  }\r\n  interface User {\r\n    _id: string;\r\n    Name: string;\r\n  }\r\n\r\n  const cityOptions: Option[] = cities?.map((city: City) => ({\r\n    value: city._id,\r\n    label: city.CityName,\r\n  }));\r\n  const sourceOptions: Option[] = sources?.map((source: Source) => ({\r\n    value: source._id,\r\n    label: source.SourceName,\r\n  }));\r\n  const statusOptions: Option[] = statuses?.map((status: Status) => ({\r\n    value: status._id,\r\n    label: status.StatusName,\r\n  }));\r\n  const branchOptions: Option[] = branches?.map((branch: Branch) => ({\r\n    value: branch._id,\r\n    label: branch.BranchName,\r\n  }));\r\n  const courseOptions: Option[] = courses?.map((course: Course) => ({\r\n    value: course._id,\r\n    label: course.CourseName,\r\n  }));\r\n  const userOptions: Option[] = users?.map((user: User) => ({\r\n    value: user._id,\r\n    label: user.Name,\r\n  }));\r\n\r\n  function debounce(func: Function, delay: number) {\r\n    let timeoutId: ReturnType<typeof setTimeout>;\r\n    return (...args: any[]) => {\r\n      clearTimeout(timeoutId);\r\n      timeoutId = setTimeout(() => func(...args), delay);\r\n    };\r\n  }\r\n\r\n  const handleFilterSubmit = async (): Promise<void> => {\r\n    try {\r\n      setIsLoading(true);\r\n      const token = Cookies.get(\"token\"); // Get the token from the cookie\r\n      const url = `${BASE_URL}lead/?City=${citylist}&Source=${sourcelist}&Status=${statuslist}&Branch=${branchlist}&AssignTo=${userlist}&Course=${courselist}&limit=${limit}&page=${page}&keyword=${search}`;\r\n\r\n      const res = await axios.get(url, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`, // Pass the token in the headers\r\n        },\r\n      });\r\n\r\n      setFilteredData(res.data.Data);\r\n      setTotalPages(res.data.totalPages);\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  // Debounce the handleFilterSubmit function by 1 second\r\n  const debouncedHandleFilterSubmit = debounce(handleFilterSubmit, 1000);\r\n  useEffect(() => {\r\n    debouncedHandleFilterSubmit();\r\n  }, [\r\n    citylist,\r\n    sourcelist,\r\n    statuslist,\r\n\r\n    branchlist,\r\n    userlist,\r\n    courselist,\r\n    page,\r\n    limit,\r\n    followUpStart,\r\n    enquiryDate,\r\n  ]);\r\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearch(event.target.value);\r\n    debouncedHandleFilterSubmit();\r\n  };\r\n  const handlePageChange = (pageNumber: number) => {\r\n    if (pageNumber < 1 || pageNumber > totalPages) {\r\n      return;\r\n    }\r\n    setPage(pageNumber);\r\n  };\r\n  const endpoint: string = \"lead\";\r\n  const toast = useToast();\r\n  const handleDelete = async (id: number) => {\r\n    await dispatch(deleteData(id, endpoint, toast));\r\n    handleFilterSubmit();\r\n  };\r\n\r\n  //sorting for the table\r\n  const handleSort = (column: string) => {\r\n    //  console.log(\"Clicked on column:\", column);\r\n    if (column === sortColumn) {\r\n      setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\r\n    } else {\r\n      setSortOrder(\"asc\");\r\n      setSortColumn(column);\r\n    }\r\n    //  console.log(\"Sort Column:\", sortColumn);\r\n    //  console.log(\"Sort Order:\", sortOrder);\r\n  };\r\n\r\n  const sortedData = useMemo(() => {\r\n    if (sortColumn === \"\") {\r\n      return filteredData;\r\n    }\r\n\r\n    const sorted = [...filteredData].sort((a, b) => {\r\n      const valueA = a[sortColumn] as string;\r\n      const valueB = b[sortColumn] as string;\r\n\r\n      if (typeof valueA === \"string\" && typeof valueB === \"string\") {\r\n        const lowercaseA = valueA.toLowerCase();\r\n        const lowercaseB = valueB.toLowerCase();\r\n\r\n        if (lowercaseA < lowercaseB) {\r\n          return sortOrder === \"asc\" ? -1 : 1;\r\n        }\r\n        if (lowercaseA > lowercaseB) {\r\n          return sortOrder === \"asc\" ? 1 : -1;\r\n        }\r\n      }\r\n      return 0;\r\n    });\r\n\r\n    // console.log(\"Sorted Data:\", sorted);\r\n    return sorted;\r\n  }, [filteredData, sortColumn, sortOrder]);\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [size, setSize] = React.useState(\"full\");\r\n\r\n  const handleSizeClick = (newSize: any) => {\r\n    setSize(newSize);\r\n    onOpen();\r\n  };\r\n\r\n  const { loading, lead, logs, leadLogss, prevCourses, prevStatusHistory } =\r\n    useSelector((state: any) => state.common);\r\n\r\n  const [remarks, setRemarks] = useState<string>(\"\");\r\n  const [logtype, setLogtype] = useState<string>(\"\");\r\n  const [log_id, setlogid] = useState<string>(\"\");\r\n  // console.log(log_id, \"id form element\");\r\n  // const { id } = useParams<string>();\r\n\r\n  const AddLog = () => {\r\n    const formData = {\r\n      leadId: log_id,\r\n      Remarks: remarks,\r\n      LogType: logtype,\r\n    };\r\n    // console.log(formData);\r\n    dispatch(postData(formData, \"lead/logs\", navigate, toast)).then(() => {\r\n      dispatch(getDataById(log_id, endpoint));\r\n      setRemarks(\"\");\r\n      setLogtype(\"\");\r\n    });\r\n  };\r\n\r\n  // const [hoveredIndex, setHoveredIndex] = useState<null | boolean>(null);\r\n  const [hoveredIndex, setHoveredIndex] = useState<null | number | -1>(null);\r\n  const [isHoveringHoverBox, setIsHoveringHoverBox] = useState(false);\r\n  const handleMouseEnter = (index: number, id: number) => {\r\n    setHoveredIndex(index);\r\n    dispatch(getDataById(id, endpoint));\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoveredIndex(null);\r\n  };\r\n\r\n  const handleHoverBoxMouseEnter = () => {\r\n    setIsHoveringHoverBox(true);\r\n  };\r\n\r\n  const handleHoverBoxMouseLeave = () => {\r\n    setIsHoveringHoverBox(false);\r\n  };\r\n\r\n  // Calculate the position for each HoverBox\r\n  const calculateHoverBoxPosition = (index: number) => {\r\n    const targetElement = document.getElementById(`eye-${index}`);\r\n    if (targetElement) {\r\n      const { top, right } = targetElement.getBoundingClientRect();\r\n      return { top, right };\r\n    }\r\n    return { top: 0, right: 20 };\r\n  };\r\n\r\n  return (\r\n    <Stack>\r\n      <Modal\r\n        onClose={onClose}\r\n        size=\"custom\"\r\n        isOpen={isOpen}\r\n        closeOnOverlayClick={false}\r\n      >\r\n        <ModalContent\r\n          width=\"74.4rem\"\r\n          mt={\"4.5rem\"}\r\n          sx={{\r\n            position: \"fixed\",\r\n          }}\r\n        >\r\n          <ModalBody width=\"79rem\" bg={\"white\"}>\r\n            <Stack h=\"100%\">\r\n              <SimpleGrid\r\n                columns={2}\r\n                gridTemplateColumns=\"30% 70%\"\r\n                border={\"1px solid #ccc\"}\r\n              >\r\n                <Box>\r\n                  <Box border=\"1px solid #ccc\" borderRadius={5} m={1}>\r\n                    <TableContainer>\r\n                      <Table size=\"sm\" variant=\"simple\">\r\n                        <Thead>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Th fontWeight={\"700\"} w={15} p={0.5}>\r\n                              Client Details\r\n                            </Th>\r\n                            <Th w={15} p={0.5}></Th>\r\n                          </Tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                          <Tr\r\n                            w={15}\r\n                            p={0.5}\r\n                            borderLeft={\"4px\"}\r\n                            borderLeftColor={\"#FF0000\"}\r\n                          >\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                            >\r\n                              Name\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}>\r\n                              {lead?.Name}\r\n                            </Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#8CB663\"}\r\n                            >\r\n                              Mobile\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}>\r\n                              {lead?.Phone1}\r\n                            </Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#0A9AE3\"}\r\n                            >\r\n                              Phone No.\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}>\r\n                              {lead?.Phone2}\r\n                            </Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#B235C6\"}\r\n                            >\r\n                              Email ID\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}>\r\n                              {lead?.Email}\r\n                            </Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#EFF230\"}\r\n                            >\r\n                              Address\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}>\r\n                              {lead?.location}\r\n                            </Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#FF0000\"}\r\n                            >\r\n                              City\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}>\r\n                              {lead?.City}\r\n                            </Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#8CB663\"}\r\n                            >\r\n                              Product\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}>\r\n                              <Box\r\n                                display={\"flex\"}\r\n                                justifyContent={\"space-between\"}\r\n                                alignItems={\"center\"}\r\n                                w=\"100%\"\r\n                              >\r\n                                {lead?.EnquiryCourse}\r\n                                <CourseNamePopup\r\n                                  course={lead?.EnquiryCourse}\r\n                                  id={lead?._id}\r\n                                  getDataById={getDataById}\r\n                                  coursePrice={lead?.CoursePrice}\r\n                                />\r\n                              </Box>\r\n                            </Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#0A9AE3\"}\r\n                            >\r\n                              Price\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}>\r\n                              <Box\r\n                                display={\"flex\"}\r\n                                justifyContent={\"space-between\"}\r\n                                alignItems={\"center\"}\r\n                              >\r\n                                {lead?.CoursePrice}\r\n                                <CoursePricePopup\r\n                                  coursePrice={lead?.CoursePrice}\r\n                                  id={lead?._id}\r\n                                  getDataById={getDataById}\r\n                                />\r\n                              </Box>\r\n                            </Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#B235C6\"}\r\n                            >\r\n                              Assign To\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}>\r\n                              {lead?.AssignTo}\r\n                            </Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#EFF230\"}\r\n                            >\r\n                              Status\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}>\r\n                              <Box\r\n                                display={\"flex\"}\r\n                                justifyContent={\"space-between\"}\r\n                                alignItems={\"center\"}\r\n                              >\r\n                                <Badge variant=\"outline\" colorScheme=\"green\">\r\n                                  {lead?.Status}\r\n                                </Badge>\r\n                                <StatusPopup\r\n                                  status={lead?.Status}\r\n                                  id={lead?._id}\r\n                                  getDataById={getDataById}\r\n                                />\r\n                              </Box>\r\n                            </Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#FB0101\"}\r\n                            >\r\n                              Created By\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}>\r\n                              {lead?.CreatedBy}\r\n                            </Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#8CB663\"}\r\n                            >\r\n                              Enquiry Date\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}>\r\n                              {new Date(lead?.EnquiryDate).toLocaleString(\r\n                                \"en-US\",\r\n                                {\r\n                                  year: \"numeric\",\r\n                                  month: \"numeric\",\r\n                                  day: \"numeric\",\r\n\r\n                                  hour12: true,\r\n                                }\r\n                              )}\r\n                            </Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#0A9AE3\"}\r\n                            >\r\n                              Follow Up\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}>\r\n                              <Box\r\n                                display=\"flex\"\r\n                                justifyContent=\"space-between\"\r\n                                alignItems=\"center\"\r\n                              >\r\n                                {lead?.FollowupDate && (\r\n                                  <span>\r\n                                    {new Date(lead.FollowupDate).toLocaleString(\r\n                                      \"en-US\",\r\n                                      {\r\n                                        year: \"numeric\",\r\n                                        month: \"numeric\",\r\n                                        day: \"numeric\",\r\n                                        hour12: true,\r\n                                      }\r\n                                    )}\r\n                                  </span>\r\n                                )}\r\n                                <UpdateDatePopup\r\n                                  date={lead?.FollowupDate}\r\n                                  id={lead?._id}\r\n                                  getDataById={getDataById}\r\n                                />\r\n                              </Box>\r\n                            </Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#B235C6\"}\r\n                            >\r\n                              Attachment\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}>\r\n                              <AttachmentPopup image={lead?.Attachments} />\r\n                            </Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#EFF230\"}\r\n                            >\r\n                              Source\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}>\r\n                              {lead?.Source}\r\n                            </Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#FB0101\"}\r\n                            >\r\n                              Promotion\r\n                            </Td>\r\n                            <Td w={15} fontSize={\"0.7rem\"} p={0.5}></Td>\r\n                          </Tr>\r\n                          <Tr w={15} p={0.5}>\r\n                            <Td\r\n                              w={15}\r\n                              fontSize={\"0.7rem\"}\r\n                              p={0.5}\r\n                              fontWeight={500}\r\n                              borderLeft={\"4px\"}\r\n                              borderLeftColor={\"#8CB663\"}\r\n                            >\r\n                              Remarks\r\n                            </Td>\r\n                            {lead?.Remark && lead.Remark.length > 0 && (\r\n                              <Td\r\n                                w={15}\r\n                                fontSize={\"0.7rem\"}\r\n                                p={0.5}\r\n                                color=\"red.500\"\r\n                                fontWeight={600}\r\n                              >\r\n                                {lead?.Remark}\r\n                              </Td>\r\n                            )}\r\n                          </Tr>\r\n                        </Tbody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Box>\r\n                  <Box borderRadius={5} m={1} mx={2}>\r\n                    <RadioGroup\r\n                      defaultValue=\"OutBound\"\r\n                      value={logtype}\r\n                      onChange={(value) => setLogtype(value)}\r\n                    >\r\n                      <Stack spacing={10} direction=\"row\">\r\n                        <Text fontWeight={700} fontSize={\"0.8rem\"}>\r\n                          Log Type:\r\n                        </Text>\r\n                        <Radio\r\n                          fontSize={\"0.7rem\"}\r\n                          colorScheme=\"green\"\r\n                          value=\"InBound\"\r\n                          borderColor={\"gray.400\"}\r\n                        >\r\n                          <Text fontSize={\"0.7rem\"}>Inbound</Text>\r\n                        </Radio>\r\n                        <Radio\r\n                          fontSize={\"0.7rem\"}\r\n                          colorScheme=\"green\"\r\n                          value=\"OutBound\"\r\n                          borderColor={\"gray.400\"}\r\n                        >\r\n                          <Text fontSize={\"0.7rem\"}>Outbound</Text>\r\n                        </Radio>\r\n                      </Stack>\r\n                    </RadioGroup>\r\n                    <Text fontWeight={\"700\"} fontSize={\"0.8rem\"}>\r\n                      Remarks\r\n                    </Text>\r\n                    <Textarea\r\n                      value={remarks}\r\n                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\r\n                        setRemarks(e.target.value)\r\n                      }\r\n                      borderColor={\"gray.400\"}\r\n                      fontSize={\"0.7rem\"}\r\n                    ></Textarea>\r\n                    <Flex w=\"full\" justifyContent={\"flex-end\"} mt=\"1\">\r\n                      {/* <Link to=\"/lead-list\"> */}\r\n                      <Button\r\n                        size=\"xs\"\r\n                        mr=\"2\"\r\n                        colorScheme=\"teal\"\r\n                        variant=\"outline\"\r\n                        borderRadius=\"0.3rem\"\r\n                        onClick={onClose} // Replace with your desired onClick handler\r\n                      >\r\n                        Back\r\n                      </Button>\r\n                      {/* </Link> */}\r\n                      <Button\r\n                        size=\"xs\"\r\n                        colorScheme=\"green\"\r\n                        borderRadius=\"0.3rem\"\r\n                        onClick={AddLog}\r\n                      >\r\n                        Add Log\r\n                      </Button>\r\n                    </Flex>\r\n                  </Box>\r\n                </Box>\r\n\r\n                <Box\r\n                  border=\"1px solid #ccc\"\r\n                  borderRadius={5}\r\n                  m={1}\r\n                  overflowY=\"scroll\"\r\n                  maxHeight=\"90vh\"\r\n                  position={\"sticky\"}\r\n                >\r\n                  <TableContainer>\r\n                    <Box>\r\n                      <Table\r\n                        className=\"customTable\"\r\n                        size=\"sm\"\r\n                        variant=\"striped\"\r\n                      >\r\n                        <Thead position=\"sticky\" top=\"0\">\r\n                          <Tr>\r\n                            <Th fontWeight=\"700\" zIndex={2} bg={\"white\"}>\r\n                              Log History\r\n                            </Th>\r\n                            <Th w={25}></Th>\r\n                          </Tr>\r\n                        </Thead>\r\n                        {/* logs */}\r\n                        <Tbody>\r\n                          {leadLogss?.map((el: any, index: any) => (\r\n                            <Tr key={index}>\r\n                              <Td fontSize=\"0.7rem\">\r\n                                <div>\r\n                                  <span\r\n                                    style={{\r\n                                      fontWeight: \"500\",\r\n                                      marginRight: \"5px\",\r\n                                      color: \"black\",\r\n                                    }}\r\n                                  >\r\n                                    Log Type:\r\n                                  </span>\r\n                                  {el.LogType}\r\n                                </div>\r\n                                <div\r\n                                  style={{\r\n                                    color: \"#078431\",\r\n                                    fontSize: \"12px\",\r\n                                    whiteSpace: \"pre-wrap\",\r\n                                  }}\r\n                                >\r\n                                  <span\r\n                                    style={{\r\n                                      fontWeight: \"500\",\r\n                                      marginRight: \"5px\",\r\n                                      color: \"black\",\r\n                                    }}\r\n                                  >\r\n                                    Remarks:\r\n                                  </span>\r\n                                  {el.Remarks}\r\n                                </div>\r\n                              </Td>\r\n                              <Td w={15} fontSize=\"0.7rem\" p={0.5}>\r\n                                created by {el.createdBy} on{\" \"}\r\n                                {moment(el.createdAt).format(\r\n                                  \"DD/MM/YYYY HH:mm\"\r\n                                )}\r\n                              </Td>\r\n                            </Tr>\r\n                          ))}\r\n                        </Tbody>\r\n                      </Table>\r\n                    </Box>\r\n                  </TableContainer>\r\n                  <Box\r\n                    border=\"1px solid #ccc\"\r\n                    borderRadius={5}\r\n                    m={1}\r\n                    maxHeight=\"90vh\"\r\n                    position={\"sticky\"}\r\n                    overflowY=\"scroll\"\r\n                  >\r\n                    <TableContainer>\r\n                      <Table size=\"sm\" className=\"customTable\">\r\n                        <Thead>\r\n                          <Tr w={15} p={2}>\r\n                            <Th fontWeight=\"700\" w={15} p={0.5}>\r\n                              Product History\r\n                            </Th>\r\n                          </Tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                          {prevCourses?.map((el: any, index: number) => {\r\n                            return (\r\n                              <Tr w={15} p={2} key={index}>\r\n                                <Td\r\n                                  // w={15}\r\n                                  fontSize=\"0.7rem\"\r\n                                  p={1}\r\n                                  style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                  }}\r\n                                >\r\n                                  <div>\r\n                                    <div>\r\n                                      <span\r\n                                        style={{\r\n                                          color: \"#078431\",\r\n                                          fontSize: \"12px\",\r\n                                        }}\r\n                                      >\r\n                                        Previous Product:\r\n                                      </span>{\" \"}\r\n                                      {el.prevCourse}\r\n                                    </div>\r\n                                    <div>\r\n                                      {\" \"}\r\n                                      <span\r\n                                        style={{\r\n                                          color: \"#078431\",\r\n                                          fontSize: \"12px\",\r\n                                        }}\r\n                                      >\r\n                                        Product Price:\r\n                                      </span>{\" \"}\r\n                                      {el.prevPrice}\r\n                                    </div>\r\n                                  </div>\r\n                                  <div>\r\n                                    Created By {el.createdBy} on{\" \"}\r\n                                    {moment(el.createdAt).format(\r\n                                      \"DD/MM/YYYY HH:mm\"\r\n                                    )}\r\n                                  </div>\r\n                                </Td>\r\n                              </Tr>\r\n                            );\r\n                          })}\r\n                        </Tbody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Box>\r\n                  <Box\r\n                    border=\"1px solid #ccc\"\r\n                    borderRadius={5}\r\n                    m={1}\r\n                    maxHeight=\"90vh\"\r\n                    position={\"sticky\"}\r\n                    overflowY=\"scroll\"\r\n                  >\r\n                    <TableContainer>\r\n                      <Table size=\"sm\" className=\"customTable\">\r\n                        <Thead>\r\n                          <Tr w={15} p={2}>\r\n                            <Th fontWeight=\"700\" w={15} p={0.5}>\r\n                              Status History\r\n                            </Th>\r\n                          </Tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                          {prevStatusHistory?.map((el: any, index: any) => (\r\n                            <Tr\r\n                              key={index}\r\n                              style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                                alignItems: \"center\",\r\n                              }}\r\n                            >\r\n                              <Td fontSize=\"0.7rem\">\r\n                                <div\r\n                                  style={{\r\n                                    color: \"#078431\",\r\n                                    fontSize: \"12px\",\r\n                                    whiteSpace: \"pre-wrap\",\r\n                                  }}\r\n                                >\r\n                                  <span\r\n                                    style={{\r\n                                      fontWeight: \"500\",\r\n                                      marginRight: \"5px\",\r\n                                      color: \"black\",\r\n                                    }}\r\n                                  >\r\n                                    Remarks:\r\n                                  </span>\r\n                                  {el.status}\r\n                                </div>\r\n                              </Td>\r\n                              <Td fontSize=\"0.7rem\" p={0.5}>\r\n                                created by {el.createdBy} on{\" \"}\r\n                                {moment(el.createdAt).format(\r\n                                  \"DD/MM/YYYY HH:mm\"\r\n                                )}\r\n                              </Td>\r\n                            </Tr>\r\n                          ))}\r\n                        </Tbody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Box>\r\n                </Box>\r\n              </SimpleGrid>\r\n            </Stack>\r\n          </ModalBody>\r\n          <ModalFooter></ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n\r\n      <Stack py=\"1\" bg=\"whiteAlpha.900\" borderRadius={\"0.25rem\"}>\r\n        <SimpleGrid\r\n          columns={{ sm: 2, md: 3, lg: 4 }}\r\n          gap=\"0.5rem\"\r\n          px=\"2\"\r\n          zIndex={4}\r\n        >\r\n          <Box>\r\n            <Text\r\n              fontSize={\"0.8rem\"}\r\n              ml=\"2\"\r\n              mb=\"0.1\"\r\n              fontWeight=\"500\"\r\n              color=\"black.600\"\r\n            >\r\n              City\r\n            </Text>\r\n            <MultiSelect\r\n              className=\"rmsc\"\r\n              options={cityOptions}\r\n              value={city}\r\n              onChange={(value: Option[]) => {\r\n                setCities(value);\r\n                setCityList(value?.map((city: Option) => city.label).join(\",\"));\r\n              }}\r\n              labelledBy=\"Select City\"\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Text\r\n              fontSize={\"0.8rem\"}\r\n              ml=\"2\"\r\n              mb=\"0.1\"\r\n              fontWeight=\"500\"\r\n              color=\"black.600\"\r\n            >\r\n              Source\r\n            </Text>\r\n            <MultiSelect\r\n              className=\"rmsc\"\r\n              options={sourceOptions}\r\n              value={source}\r\n              onChange={(value: Option[]) => {\r\n                setSource(value);\r\n                setSourceList(\r\n                  value?.map((source: Option) => source.label).join(\",\")\r\n                );\r\n              }}\r\n              labelledBy=\"Select Source\"\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Text\r\n              fontSize={\"0.8rem\"}\r\n              ml=\"2\"\r\n              mb=\"0.1\"\r\n              fontWeight=\"500\"\r\n              color=\"black.600\"\r\n            >\r\n              Status\r\n            </Text>\r\n            <MultiSelect\r\n              className=\"rmsc\"\r\n              options={statusOptions}\r\n              value={status}\r\n              onChange={(value: Option[]) => {\r\n                setStatus(value);\r\n                setStatusList(\r\n                  value?.map((status: Option) => status.label).join(\",\")\r\n                );\r\n              }}\r\n              labelledBy=\"Select Source\"\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Text\r\n              fontSize={\"0.8rem\"}\r\n              ml=\"2\"\r\n              mb=\"0.1\"\r\n              fontWeight=\"500\"\r\n              color=\"black.600\"\r\n            >\r\n              Branch\r\n            </Text>\r\n            <MultiSelect\r\n              className=\"rmsc\"\r\n              options={branchOptions}\r\n              value={branch}\r\n              onChange={(value: Option[]) => {\r\n                setBranch(value);\r\n                setBranchList(\r\n                  value?.map((branch: Option) => branch.label).join(\",\")\r\n                );\r\n              }}\r\n              labelledBy=\"Select Source\"\r\n            />\r\n          </Box>\r\n\r\n          <Box>\r\n            <Text\r\n              fontSize={\"0.8rem\"}\r\n              ml=\"2\"\r\n              mb=\"0.1\"\r\n              fontWeight=\"500\"\r\n              color=\"black.600\"\r\n            >\r\n              Product\r\n            </Text>\r\n            <MultiSelect\r\n              className=\"rmsc\"\r\n              options={courseOptions}\r\n              value={course}\r\n              onChange={(value: Option[]) => {\r\n                setCourse(value);\r\n                setCourseList(\r\n                  value?.map((branch: Option) => branch.label).join(\",\")\r\n                );\r\n              }}\r\n              labelledBy=\"Select course\"\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Text\r\n              fontSize={\"0.8rem\"}\r\n              ml=\"2\"\r\n              mb=\"\"\r\n              fontWeight=\"500\"\r\n              color=\"black.600\"\r\n            >\r\n              Assign To\r\n            </Text>\r\n            <MultiSelect\r\n              className=\"rmsc\"\r\n              options={userOptions}\r\n              value={user}\r\n              onChange={(value: Option[]) => {\r\n                setUser(value);\r\n                setUserList(value?.map((user: Option) => user.label).join(\",\"));\r\n              }}\r\n              labelledBy=\"Select user\"\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <div className=\"calendarWrap\">\r\n              <Text\r\n                fontSize={\"0.8rem\"}\r\n                ml=\"2\"\r\n                mb=\"\"\r\n                fontWeight=\"500\"\r\n                color=\"black.600\"\r\n              >\r\n                Follow Up Date\r\n              </Text>\r\n              <Input\r\n                borderColor={\"#A0AEC0\"}\r\n                size=\"sm\"\r\n                borderRadius={\"0.25rem\"}\r\n                w=\"full\"\r\n                h=\"27px\"\r\n                placeholder=\"Select date\"\r\n                value={\r\n                  followUpStart[0].startDate && followUpStart[0].endDate\r\n                    ? `${format(\r\n                        followUpStart[0].startDate,\r\n                        \"dd/MM/yyyy\"\r\n                      )} to ${format(followUpStart[0].endDate, \"dd/MM/yyyy\")}`\r\n                    : \"\"\r\n                }\r\n                readOnly\r\n                onClick={() => setOpen((open) => !open)}\r\n              />\r\n\r\n              <div ref={refOne}>\r\n                {open && (\r\n                  <DateRange\r\n                    onChange={(item: any) => setfollowUpStart([item.selection])}\r\n                    editableDateInputs={true}\r\n                    moveRangeOnFirstSelection={false}\r\n                    ranges={followUpStart.map((r) => ({\r\n                      ...r,\r\n                      startDate: r.startDate || undefined,\r\n                      endDate: r.endDate || undefined,\r\n                    }))}\r\n                    direction=\"horizontal\"\r\n                    className=\"calendarElement\"\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </Box>\r\n          <Box>\r\n            <div className=\"calendarWrap\">\r\n              <Text\r\n                fontSize={\"0.8rem\"}\r\n                ml=\"2\"\r\n                mb=\"\"\r\n                fontWeight=\"500\"\r\n                color=\"black.600\"\r\n              >\r\n                Enquiry Date\r\n              </Text>\r\n              <Input\r\n                borderColor={\"#A0AEC0\"}\r\n                size=\"sm\"\r\n                borderRadius={\"0.25rem\"}\r\n                w=\"full\"\r\n                h=\"27px\"\r\n                placeholder=\"Select date\"\r\n                value={\r\n                  enquiryDate[0].startDate && enquiryDate[0].endDate\r\n                    ? `${format(\r\n                        enquiryDate[0].startDate,\r\n                        \"dd/MM/yyyy\"\r\n                      )} to ${format(enquiryDate[0].endDate, \"dd/MM/yyyy\")}`\r\n                    : \"\"\r\n                }\r\n                readOnly\r\n                onClick={() => setOpenenq((openenq) => !openenq)}\r\n              />\r\n\r\n              <div ref={refTwo}>\r\n                {openenq && (\r\n                  <DateRange\r\n                    onChange={(item: any) => setEnqDate([item.selection])}\r\n                    editableDateInputs={true}\r\n                    moveRangeOnFirstSelection={false}\r\n                    ranges={enquiryDate.map((r) => ({\r\n                      ...r,\r\n                      startDate: r.startDate || undefined,\r\n                      endDate: r.endDate || undefined,\r\n                    }))}\r\n                    direction=\"horizontal\"\r\n                    className=\"calendarElement\"\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </Box>\r\n        </SimpleGrid>\r\n      </Stack>\r\n\r\n      <Stack py=\"1\" bg=\"whiteAlpha.900\" borderRadius={\"0.25rem\"}>\r\n        <Box\r\n          px=\"4\"\r\n          display={\"flex\"}\r\n          justifyContent={\"space-between\"}\r\n          alignItems={\"center\"}\r\n        >\r\n          <Box>\r\n            <Select\r\n              borderRadius={\"0.25rem\"}\r\n              borderColor={\"gray.400\"}\r\n              size=\"xs\"\r\n              value={limit}\r\n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\r\n                setLimit(parseInt(e.target.value, 10))\r\n              }\r\n            >\r\n              <option value={20}>20</option>\r\n              <option value={50}>50</option>\r\n              <option value={100}>100</option>\r\n              <option value={200}>200</option>\r\n            </Select>\r\n          </Box>\r\n          <Box>\r\n            <InputGroup>\r\n              <InputLeftElement pointerEvents=\"none\">\r\n                <SearchIcon color=\"gray.400\" mb=\"4\" />\r\n              </InputLeftElement>\r\n              <Input\r\n                w=\"400px\"\r\n                value={search}\r\n                onChange={handleSearchChange}\r\n                borderRadius={\"0.25rem\"}\r\n                borderColor=\"gray.400\"\r\n                size=\"xs\"\r\n                type=\"text\"\r\n                placeholder=\"Search here...\"\r\n              />\r\n            </InputGroup>\r\n          </Box>\r\n        </Box>\r\n        <Box overflowX=\"auto\" className=\"shrinkable-table\">\r\n          <TableContainer className=\"tarun\" whiteSpace={\"nowrap\"}>\r\n            <Box overflowY=\"auto\" height={350} maxHeight=\"350px\">\r\n              <Table size=\"sm\">\r\n                <Thead\r\n                  bg={\"blue.600\"}\r\n                  color={\"whiteAlpha.900\"}\r\n                  position={\"sticky\"}\r\n                  borderRadius={\"20px\"}\r\n                  top=\"0\"\r\n                  zIndex={1}\r\n                >\r\n                  <Tr>\r\n                    <Th\r\n                      onClick={() => handleSort(\"UID\")}\r\n                      padding={2}\r\n                      w={15}\r\n                      fontSize={\"0.65rem\"}\r\n                      color={\"whiteAlpha.900\"}\r\n                    >\r\n                      <Text display=\"flex\" justifyContent=\"start\" gap=\"1\">\r\n                        {\" \"}\r\n                        <span> UID </span>\r\n                        <span>\r\n                          {sortColumn === \"UID\" && sortOrder === \"asc\" && (\r\n                            <FaSortAlphaUp\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                              size={13}\r\n                            />\r\n                          )}\r\n                          {sortColumn === \"UID\" && sortOrder === \"desc\" && (\r\n                            <FaSortAlphaDownAlt\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                          {sortColumn !== \"UID\" && (\r\n                            <FaSortAlphaUp\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                        </span>\r\n                      </Text>\r\n                    </Th>\r\n                    <Th\r\n                      onClick={() => handleSort(\"AssignTo\")}\r\n                      padding={2}\r\n                      w={15}\r\n                      fontSize={\"0.65rem\"}\r\n                      color={\"whiteAlpha.900\"}\r\n                    >\r\n                      <Text display=\"flex\" justifyContent=\"start\" gap=\"1\">\r\n                        {\" \"}\r\n                        <span> Ass To </span>\r\n                        <span>\r\n                          {sortColumn === \"AssignTo\" && sortOrder === \"asc\" && (\r\n                            <FaSortAlphaUp\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                              size={13}\r\n                            />\r\n                          )}\r\n                          {sortColumn === \"AssignTo\" &&\r\n                            sortOrder === \"desc\" && (\r\n                              <FaSortAlphaDownAlt\r\n                                size={13}\r\n                                style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                              />\r\n                            )}\r\n                          {sortColumn !== \"AssignTo\" && (\r\n                            <FaSortAlphaUp\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                        </span>\r\n                      </Text>\r\n                    </Th>\r\n                    <Th\r\n                      onClick={() => handleSort(\"Source\")}\r\n                      padding={2}\r\n                      w={15}\r\n                      fontSize={\"0.65rem\"}\r\n                      color={\"whiteAlpha.900\"}\r\n                    >\r\n                      <Text display=\"flex\" justifyContent=\"start\" gap=\"1\">\r\n                        {\" \"}\r\n                        <span> Source </span>\r\n                        <span>\r\n                          {sortColumn === \"Source\" && sortOrder === \"asc\" && (\r\n                            <FaSortAlphaUp\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                              size={13}\r\n                            />\r\n                          )}\r\n                          {sortColumn === \"Source\" && sortOrder === \"desc\" && (\r\n                            <FaSortAlphaDownAlt\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                          {sortColumn !== \"Source\" && (\r\n                            <FaSortAlphaUp\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                        </span>\r\n                      </Text>\r\n                    </Th>\r\n                    <Th\r\n                      onClick={() => handleSort(\"City\")}\r\n                      padding={2}\r\n                      w={15}\r\n                      fontSize={\"0.65rem\"}\r\n                      color={\"whiteAlpha.900\"}\r\n                    >\r\n                      <Text display=\"flex\" justifyContent=\"start\" gap=\"1\">\r\n                        {\" \"}\r\n                        <span> City </span>\r\n                        <span>\r\n                          {sortColumn === \"City\" && sortOrder === \"asc\" && (\r\n                            <FaSortAlphaUp\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                              size={13}\r\n                            />\r\n                          )}\r\n                          {sortColumn === \"City\" && sortOrder === \"desc\" && (\r\n                            <FaSortAlphaDownAlt\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                          {sortColumn !== \"City\" && (\r\n                            <FaSortAlphaUp\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                        </span>\r\n                      </Text>\r\n                    </Th>\r\n                    <Th\r\n                      onClick={() => handleSort(\"Status\")}\r\n                      padding={2}\r\n                      w={15}\r\n                      fontSize={\"0.65rem\"}\r\n                      color={\"whiteAlpha.900\"}\r\n                    >\r\n                      <Text display=\"flex\" justifyContent=\"start\" gap=\"1\">\r\n                        {\" \"}\r\n                        <span> Status </span>\r\n                        <span>\r\n                          {sortColumn === \"Status\" && sortOrder === \"asc\" && (\r\n                            <FaSortAlphaUp\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                              size={13}\r\n                            />\r\n                          )}\r\n                          {sortColumn === \"Status\" && sortOrder === \"desc\" && (\r\n                            <FaSortAlphaDownAlt\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                          {sortColumn !== \"Status\" && (\r\n                            <FaSortAlphaUp\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                        </span>\r\n                      </Text>\r\n                    </Th>\r\n                    <Th\r\n                      onClick={() => handleSort(\"EnquiryDate\")}\r\n                      padding={2}\r\n                      w={15}\r\n                      fontSize={\"0.65rem\"}\r\n                      color={\"whiteAlpha.900\"}\r\n                    >\r\n                      <Text display=\"flex\" justifyContent=\"start\" gap=\"1\">\r\n                        {\" \"}\r\n                        <span> Enq. Date </span>\r\n                        <span>\r\n                          {sortColumn === \"EnquiryDate\" &&\r\n                            sortOrder === \"asc\" && (\r\n                              <FaSortAlphaUp\r\n                                style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                                size={13}\r\n                              />\r\n                            )}\r\n                          {sortColumn === \"EnquiryDate\" &&\r\n                            sortOrder === \"desc\" && (\r\n                              <FaSortAlphaDownAlt\r\n                                size={13}\r\n                                style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                              />\r\n                            )}\r\n                          {sortColumn !== \"EnquiryDate\" && (\r\n                            <FaSortAlphaUp\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                        </span>\r\n                      </Text>\r\n                    </Th>\r\n                    <Th\r\n                      padding={2}\r\n                      w={15}\r\n                      fontSize={\"0.65rem\"}\r\n                      color={\"whiteAlpha.900\"}\r\n                    >\r\n                      Lfd\r\n                    </Th>\r\n                    <Th\r\n                      onClick={() => handleSort(\"Name\")}\r\n                      padding={2}\r\n                      w={15}\r\n                      fontSize={\"0.65rem\"}\r\n                      color={\"whiteAlpha.900\"}\r\n                    >\r\n                      <Text display=\"flex\" justifyContent=\"start\" gap=\"1\">\r\n                        {\" \"}\r\n                        <span> Name</span>\r\n                        <span>\r\n                          {sortColumn === \"Name\" && sortOrder === \"asc\" && (\r\n                            <FaSortAlphaUp\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                              size={13}\r\n                            />\r\n                          )}\r\n                          {sortColumn === \"Name\" && sortOrder === \"desc\" && (\r\n                            <FaSortAlphaDownAlt\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                          {sortColumn !== \"Name\" && (\r\n                            <FaSortAlphaUp\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                        </span>\r\n                      </Text>\r\n                    </Th>\r\n                    <Th\r\n                      onClick={() => handleSort(\"Phone1\")}\r\n                      padding={2}\r\n                      w={15}\r\n                      fontSize={\"0.65rem\"}\r\n                      color={\"whiteAlpha.900\"}\r\n                    >\r\n                      <Text display=\"flex\" justifyContent=\"start\" gap=\"1\">\r\n                        {\" \"}\r\n                        <span> Mob 1</span>\r\n                        <span>\r\n                          {sortColumn === \"Phone1\" && sortOrder === \"asc\" && (\r\n                            <FaSortAlphaUp\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                              size={13}\r\n                            />\r\n                          )}\r\n                          {sortColumn === \"Phone1\" && sortOrder === \"desc\" && (\r\n                            <FaSortAlphaDownAlt\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                          {sortColumn !== \"Phone1\" && (\r\n                            <FaSortAlphaUp\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                        </span>\r\n                      </Text>\r\n                    </Th>\r\n                    <Th\r\n                      onClick={() => handleSort(\"Course\")}\r\n                      padding={2}\r\n                      w={15}\r\n                      fontSize={\"0.65rem\"}\r\n                      color={\"whiteAlpha.900\"}\r\n                    >\r\n                      <Text display=\"flex\" justifyContent=\"start\" gap=\"1\">\r\n                        {\" \"}\r\n                        <span> Product</span>\r\n                        <span>\r\n                          {sortColumn === \"Course\" && sortOrder === \"asc\" && (\r\n                            <FaSortAlphaUp\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                              size={13}\r\n                            />\r\n                          )}\r\n                          {sortColumn === \"Course\" && sortOrder === \"desc\" && (\r\n                            <FaSortAlphaDownAlt\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                          {sortColumn !== \"Course\" && (\r\n                            <FaSortAlphaUp\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                        </span>\r\n                      </Text>\r\n                    </Th>\r\n                    <Th\r\n                      onClick={() => handleSort(\"CoursePrice\")}\r\n                      padding={2}\r\n                      w={15}\r\n                      fontSize={\"0.65rem\"}\r\n                      color={\"whiteAlpha.900\"}\r\n                    >\r\n                      <Text display=\"flex\" justifyContent=\"start\" gap=\"1\">\r\n                        {\" \"}\r\n                        <span> Price</span>\r\n                        <span>\r\n                          {sortColumn === \"CoursePrice\" &&\r\n                            sortOrder === \"asc\" && (\r\n                              <FaSortAlphaUp\r\n                                style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                                size={13}\r\n                              />\r\n                            )}\r\n                          {sortColumn === \"CoursePrice\" &&\r\n                            sortOrder === \"desc\" && (\r\n                              <FaSortAlphaDownAlt\r\n                                size={13}\r\n                                style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                              />\r\n                            )}\r\n                          {sortColumn !== \"CoursePrice\" && (\r\n                            <FaSortAlphaUp\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                        </span>\r\n                      </Text>\r\n                    </Th>\r\n                    <Th\r\n                      onClick={() => handleSort(\"Days2\")}\r\n                      padding={2}\r\n                      w={15}\r\n                      fontSize={\"0.65rem\"}\r\n                      color={\"whiteAlpha.900\"}\r\n                    >\r\n                      <Text display=\"flex\" justifyContent=\"start\" gap=\"1\">\r\n                        {\" \"}\r\n                        <span> Days</span>\r\n                        <span>\r\n                          {sortColumn === \"Days2\" && sortOrder === \"asc\" && (\r\n                            <FaSortAlphaUp\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                              size={13}\r\n                            />\r\n                          )}\r\n                          {sortColumn === \"Days2\" && sortOrder === \"desc\" && (\r\n                            <FaSortAlphaDownAlt\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                          {sortColumn !== \"Days2\" && (\r\n                            <FaSortAlphaUp\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                        </span>\r\n                      </Text>\r\n                    </Th>\r\n                    <Th\r\n                      onClick={() => handleSort(\"FollowupDate\")}\r\n                      padding={2}\r\n                      w={15}\r\n                      fontSize={\"0.65rem\"}\r\n                      color={\"whiteAlpha.900\"}\r\n                    >\r\n                      <Text display=\"flex\" justifyContent=\"start\" gap=\"1\">\r\n                        {\" \"}\r\n                        <span> Follow Up</span>\r\n                        <span>\r\n                          {sortColumn === \"FollowupDate\" &&\r\n                            sortOrder === \"asc\" && (\r\n                              <FaSortAlphaUp\r\n                                style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                                size={13}\r\n                              />\r\n                            )}\r\n                          {sortColumn === \"FollowupDate\" &&\r\n                            sortOrder === \"desc\" && (\r\n                              <FaSortAlphaDownAlt\r\n                                size={13}\r\n                                style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                              />\r\n                            )}\r\n                          {sortColumn !== \"FollowupDate\" && (\r\n                            <FaSortAlphaUp\r\n                              size={13}\r\n                              style={{ marginTop: \"1px\", cursor: \"pointer\" }}\r\n                            />\r\n                          )}\r\n                        </span>\r\n                      </Text>\r\n                    </Th>\r\n                    <Th\r\n                      padding={2}\r\n                      w={15}\r\n                      fontSize={\"0.65rem\"}\r\n                      color={\"whiteAlpha.900\"}\r\n                    >\r\n                      Action\r\n                    </Th>\r\n                  </Tr>\r\n                </Thead>\r\n                <Tbody>\r\n                  {isLoading ? (\r\n                    <Loader />\r\n                  ) : error ? (\r\n                    <Tr>\r\n                      <Td\r\n                        color=\"whiteAlpha.900\"\r\n                        bg=\"red.500\"\r\n                        colSpan={14}\r\n                        textAlign=\"center\"\r\n                        fontWeight={700}\r\n                      >\r\n                        Something went wrong. Please try again later.\r\n                      </Td>\r\n                    </Tr>\r\n                  ) : !isLoading && filteredData?.length === 0 ? (\r\n                    <Tr>\r\n                      <Td\r\n                        color=\"whiteAlpha.900\"\r\n                        bg=\"red.500\"\r\n                        colSpan={14}\r\n                        textAlign=\"center\"\r\n                        fontWeight={700}\r\n                      >\r\n                        No Data Found\r\n                      </Td>\r\n                    </Tr>\r\n                  ) : (\r\n                    sortedData?.map((el: any, index: any) => (\r\n                      <Tr\r\n                        key={el._id}\r\n                        fontSize={\"0.5rem\"}\r\n                        style={{ position: \"relative\" }}\r\n                        bg={\r\n                          el.Status === \"Hot Lead\"\r\n                            ? \"yellow.300\"\r\n                            : el.Status === \"Final Lead\"\r\n                            ? \"green.300\"\r\n                            : el.Status === \"Unsubscribe\"\r\n                            ? \"red.500\"\r\n                            : el.Status === \"Open\"\r\n                            ? \"gray.50\"\r\n                            : \"\"\r\n                        }\r\n                      >\r\n                        <Td\r\n                          fontWeight=\"500\"\r\n                          fontSize={\"0.8rem\"}\r\n                          padding={2}\r\n                          w={15}\r\n                        >\r\n                          {el.UID}\r\n                        </Td>\r\n                        <Td\r\n                          fontWeight=\"500\"\r\n                          fontSize={\"0.8rem\"}\r\n                          padding={2}\r\n                          w={15}\r\n                        >\r\n                          {el.AssignTo}\r\n                        </Td>\r\n                        <Td\r\n                          fontWeight=\"500\"\r\n                          fontSize={\"0.8rem\"}\r\n                          padding={2}\r\n                          w={15}\r\n                        >\r\n                          {el.Source}\r\n                        </Td>\r\n                        <Td\r\n                          fontWeight=\"500\"\r\n                          fontSize={\"0.8rem\"}\r\n                          padding={2}\r\n                          w={15}\r\n                        >\r\n                          {el.City}\r\n                        </Td>\r\n                        <Td\r\n                          fontWeight=\"500\"\r\n                          fontSize={\"0.8rem\"}\r\n                          padding={2}\r\n                          w={15}\r\n                        >\r\n                          {el.Status}\r\n                        </Td>\r\n                        <Td\r\n                          fontWeight=\"500\"\r\n                          fontSize={\"0.8rem\"}\r\n                          padding={2}\r\n                          w={15}\r\n                        >\r\n                          {new Date(el.EnquiryDate).toLocaleDateString()}\r\n                        </Td>\r\n                        <Td\r\n                          fontWeight=\"500\"\r\n                          fontSize={\"0.8rem\"}\r\n                          textAlign={\"center\"}\r\n                          padding={2}\r\n                          w={15}\r\n                        >\r\n                          {el.Days2}\r\n                        </Td>\r\n                        <Td\r\n                          fontWeight=\"500\"\r\n                          fontSize={\"0.8rem\"}\r\n                          padding={2}\r\n                          w={15}\r\n                        >\r\n                          {el.Name}\r\n                        </Td>\r\n                        <Td\r\n                          fontWeight=\"500\"\r\n                          fontSize={\"0.8rem\"}\r\n                          padding={2}\r\n                          w={15}\r\n                        >\r\n                          {el.Phone1}\r\n                        </Td>\r\n                        <Td\r\n                          fontWeight=\"500\"\r\n                          fontSize={\"0.8rem\"}\r\n                          padding={2}\r\n                          w={15}\r\n                          textOverflow={\"ellipsis\"}\r\n                          overflow={\"hidden\"}\r\n                          whiteSpace={\"nowrap\"}\r\n                        >\r\n                          {/* {el.Course.length > 10 ? `${el.Course.slice(0, 10)}...` : el.Course} */}\r\n                          {el.Course}\r\n                        </Td>\r\n\r\n                        <Td\r\n                          fontWeight=\"500\"\r\n                          fontSize={\"0.8rem\"}\r\n                          padding={2}\r\n                          w={15}\r\n                        >\r\n                          {el.CoursePrice}\r\n                        </Td>\r\n                        <Td\r\n                          fontWeight=\"500\"\r\n                          fontSize={\"0.8rem\"}\r\n                          padding={2}\r\n                          w={15}\r\n                        >\r\n                          {\" \"}\r\n                          {el.Days2}\r\n                        </Td>\r\n                        <Td\r\n                          fontWeight=\"500\"\r\n                          fontSize={\"0.8rem\"}\r\n                          padding={2}\r\n                          w={15}\r\n                        >\r\n                          {new Date(el.EnquiryDate).toLocaleDateString()}\r\n                        </Td>\r\n\r\n                        <Td\r\n                          textAlign={\"center\"}\r\n                          fontSize={\"0.8rem\"}\r\n                          // padding={2}\r\n                          w={15}\r\n                        >\r\n                          {/* <Box>\r\n                            {logs?.map((remark: any, index: any) => (\r\n                              <div>\r\n                                <Flex justify={\"start\"} alignItems={\"center\"}>\r\n                                  <span>{1}</span>\r\n                                  <span>{\"Remarks\"}</span>\r\n                                </Flex>\r\n                                <Flex>\r\n                                  <span>{1}</span>\r\n                                  <span>{\"Remarks\"}</span>\r\n                                </Flex>\r\n                              </div>\r\n                            ))}\r\n                          </Box> */}\r\n                          <Box display={\"flex\"} gap=\"2\">\r\n                            <TfiEye\r\n                              // id={`eye-${index}`}\r\n                              color=\"#2b6cb0\"\r\n                              size={16}\r\n                              cursor={\"pointer\"}\r\n                              onClick={() => {\r\n                                handleSizeClick(size);\r\n                                setlogid(el._id);\r\n                                dispatch(getDataById(el._id, endpoint));\r\n                              }}\r\n                              onMouseEnter={() =>\r\n                                handleMouseEnter(index, el._id)\r\n                              }\r\n                              onMouseLeave={handleMouseLeave}\r\n\r\n                              // onClick={() => navigate(`/log/${el._id}`)}\r\n                            />\r\n\r\n                            {/* {hoveredIndex === index && <HoverBox />} */}\r\n                            {hoveredIndex === index || isHoveringHoverBox ? (\r\n                              <HoverBox\r\n                                loading={loading}\r\n                                logs={logs}\r\n                                position={calculateHoverBoxPosition(index)}\r\n                                onMouseEnter={handleHoverBoxMouseEnter}\r\n                                onMouseLeave={handleHoverBoxMouseLeave}\r\n                              />\r\n                            ) : null}\r\n\r\n                            {signinuser?.UserType === 2 && 3 && (\r\n                              <AlertDialogDelete\r\n                                id={el?._id}\r\n                                handleDelete={handleDelete}\r\n                              />\r\n                            )}\r\n                          </Box>\r\n                        </Td>\r\n                      </Tr>\r\n                    ))\r\n                  )}\r\n                </Tbody>\r\n              </Table>\r\n            </Box>\r\n          </TableContainer>\r\n        </Box>\r\n        <Box\r\n          display={\"flex\"}\r\n          justifyContent={\"flex-end\"}\r\n          gap={\"3\"}\r\n          px={3}\r\n          borderTop={\"1px gray.500\"}\r\n        >\r\n          <Button\r\n            size={\"xs\"}\r\n            onClick={() => handlePageChange(page - 1)}\r\n            colorScheme=\"gray\"\r\n            disabled={page === 1}\r\n            borderRadius={\"50%\"}\r\n            p={\"0.5rem 0\"}\r\n          >\r\n            &lt;\r\n          </Button>\r\n          {Array.from({ length: totalPages }, (_, i) => i + 1).map(\r\n            (pageNumber) => {\r\n              if (\r\n                pageNumber <= 3 ||\r\n                (pageNumber >= page - 1 && pageNumber <= page + 1) ||\r\n                pageNumber > totalPages - 3\r\n              ) {\r\n                return (\r\n                  <Button\r\n                    size={\"xs\"}\r\n                    borderRadius={\"50%\"}\r\n                    p={\"0.5rem 0\"}\r\n                    key={pageNumber}\r\n                    onClick={() => handlePageChange(pageNumber)}\r\n                    disabled={page === pageNumber}\r\n                    colorScheme={page === pageNumber ? \"orange\" : \"gray\"}\r\n                  >\r\n                    {pageNumber}\r\n                  </Button>\r\n                );\r\n              } else if (pageNumber === 4 || pageNumber === totalPages - 2) {\r\n                return <Text key={pageNumber}>...</Text>;\r\n              } else {\r\n                return null;\r\n              }\r\n            }\r\n          )}\r\n\r\n          <Button\r\n            size={\"xs\"}\r\n            borderRadius={\"50%\"}\r\n            p={\"0.5rem 0\"}\r\n            onClick={() => handlePageChange(page + 1)}\r\n            disabled={page === totalPages}\r\n          >\r\n            &gt;\r\n          </Button>\r\n        </Box>\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default LeadList;\r\n"],"names":["_ref","handleDelete","id","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","cancelRef","React","loading","useSelector","state","common","_jsxs","_Fragment","children","_jsx","Box","onClick","RiDeleteBinLine","color","size","cursor","AlertDialog","leastDestructiveRef","AlertDialogOverlay","bg","backdropFilter","AlertDialogContent","AlertDialogHeader","fontSize","fontWeight","AlertDialogBody","AlertDialogFooter","Button","ref","isLoading","loadingText","colorScheme","ml","Tr","height","maxHeight","Td","colSpan","Center","h","SkeletonText","mt","noOfLines","spacing","skeletonHeight","width","borderRadius","image","mr","background","px","FormControl","variant","Image","src","alt","FormLabel","date","getDataById","_useState","useState","_useState2","_slicedToArray","selectedDate","setSelectedDate","dispatch","useDispatch","toast","useToast","endpoint","navigate","useNavigate","useEffect","Input","type","value","Date","toISOString","substr","onChange","e","target","updateData","FollowupDate","then","status","selectedStatus","setSelectedStatus","_useSelector","statuses","getData","Select","map","el","i","StatusName","Status","coursePrice","selectedPrice","setSelectedPrice","CoursePrice","course","selectedCourse","setSelectedCourse","courses","CourseName","EnquiryCourse","logs","position","onMouseEnter","onMouseLeave","top","right","rounded","borderWidth","padding","zIndex","boxShadow","Spinner","thickness","speed","emptyColor","overflowY","textAlign","length","index","style","transition","Remarks","cities","signinuser","sources","branches","users","error","city","setCities","_useState3","_useState4","citylist","setCityList","_useState5","_useState6","source","setSource","_useState7","_useState8","sourcelist","setSourceList","_useState9","label","_useState10","setStatus","_useState11","_useState12","statuslist","setStatusList","_useState13","_useState14","branch","setBranch","_useState15","_useState16","branchlist","setBranchList","_useState17","_useState18","setCourse","_useState19","_useState20","courselist","setCourseList","_useState21","_useState22","user","setUser","_useState23","_useState24","userlist","setUserList","_useState25","_useState26","filteredData","setFilteredData","_useState27","_useState28","page","setPage","_useState29","_useState30","totalPages","setTotalPages","_useState31","_useState32","setIsLoading","_useState33","_useState34","search","setSearch","_useState35","_useState36","limit","setLimit","_useState37","_useState38","sortOrder","setSortOrder","_useState39","_useState40","sortColumn","setSortColumn","_useState41","startDate","endDate","key","_useState42","followUpStart","setfollowUpStart","_useState43","_useState44","enquiryDate","setEnqDate","_useState45","_useState46","open","setOpen","_useState47","_useState48","openenq","setOpenenq","refOne","useRef","refTwo","hideOnEscape","hideOnClickOutside","current","contains","document","addEventListener","removeEventListener","cityOptions","_id","CityName","sourceOptions","SourceName","statusOptions","branchOptions","BranchName","courseOptions","userOptions","Name","handleFilterSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","url","res","wrap","_context","prev","next","Cookies","concat","BASE_URL","axios","headers","Authorization","sent","data","Data","t0","console","stop","apply","arguments","debouncedHandleFilterSubmit","func","delay","timeoutId","_len","args","Array","_key","clearTimeout","setTimeout","debounce","handlePageChange","pageNumber","_ref2","_callee2","_context2","deleteData","_x","handleSort","column","sortedData","useMemo","_toConsumableArray","sort","a","b","valueA","valueB","lowercaseA","toLowerCase","lowercaseB","_React$useState","_React$useState2","setSize","_useSelector2","lead","leadLogss","prevCourses","prevStatusHistory","_useState49","_useState50","remarks","setRemarks","_useState51","_useState52","logtype","setLogtype","_useState53","_useState54","log_id","setlogid","_useState55","_useState56","hoveredIndex","setHoveredIndex","_useState57","_useState58","isHoveringHoverBox","setIsHoveringHoverBox","handleMouseLeave","handleHoverBoxMouseEnter","handleHoverBoxMouseLeave","calculateHoverBoxPosition","targetElement","getElementById","_targetElement$getBou","getBoundingClientRect","Stack","Modal","closeOnOverlayClick","ModalContent","sx","ModalBody","SimpleGrid","columns","gridTemplateColumns","border","m","TableContainer","Table","Thead","w","p","Th","Tbody","borderLeft","borderLeftColor","Phone1","Phone2","Email","location","City","display","justifyContent","alignItems","CourseNamePopup","CoursePricePopup","AssignTo","Badge","StatusPopup","CreatedBy","EnquiryDate","toLocaleString","year","month","day","hour12","UpdateDatePopup","AttachmentPopup","Attachments","Source","Remark","mx","RadioGroup","defaultValue","direction","Text","Radio","borderColor","Textarea","Flex","formData","leadId","LogType","postData","className","marginRight","whiteSpace","createdBy","moment","createdAt","format","prevCourse","prevPrice","ModalFooter","py","sm","md","lg","gap","mb","MultiSelect","options","join","labelledBy","placeholder","readOnly","DateRange","item","selection","editableDateInputs","moveRangeOnFirstSelection","ranges","r","_objectSpread","undefined","parseInt","InputGroup","InputLeftElement","pointerEvents","SearchIcon","event","overflowX","FaSortAlphaUp","marginTop","FaSortAlphaDownAlt","Loader","UID","toLocaleDateString","Days2","textOverflow","overflow","Course","TfiEye","handleMouseEnter","HoverBox","UserType","AlertDialogDelete","borderTop","disabled","from","_"],"sourceRoot":""}