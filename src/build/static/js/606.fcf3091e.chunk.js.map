{"version":3,"file":"static/js/606.fcf3091e.chunk.js","mappings":"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","sources":["components/AlertDialouge.tsx","components/Loader.tsx","pages/branch/BranchList.tsx"],"sourcesContent":["// AlertDialogDelete Component: Displays a delete confirmation dialog using Chakra UI.\n// Props:\n// - handleDelete: Function to handle the delete action when confirmed.\n// - id: The identifier of the item to delete.\nimport {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n  useDisclosure,\n  Button,\n  Box,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\n\nimport { RiDeleteBinLine } from \"react-icons/ri\";\nimport { useSelector } from \"react-redux\";\ninterface Props {\n  handleDelete: (id: number) => void;\n  id: number;\n}\n\ninterface Loading {\n  loading: boolean;\n}\n\nconst AlertDialogDelete: React.FC<Props> = ({ handleDelete, id }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = React.useRef<HTMLButtonElement>(null);\n  const { loading } = useSelector((state: { common: Loading }) => state.common);\n  const onDeleteClick = () => {\n    handleDelete(id);\n    onClose();\n  };\n\n  return (\n    <>\n      <Box onClick={onOpen}>\n        <RiDeleteBinLine color=\"red\" size={18} cursor={\"pointer\"} />\n      </Box>\n\n      <AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n      >\n        <AlertDialogOverlay\n          bg=\"blackAlpha.300\"\n          backdropFilter=\"blur(5px) hue-rotate(90deg)\"\n        >\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n              Delete\n            </AlertDialogHeader>\n\n            <AlertDialogBody>\n              Are you sure? You can't undo this action afterwards.\n            </AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button\n                size=\"sm\"\n                fontWeight={\"medium\"}\n                ref={cancelRef}\n                onClick={onClose}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"sm\"\n                fontWeight={\"medium\"}\n                isLoading={loading}\n                loadingText=\"Please wait...\"\n                colorScheme=\"red\"\n                onClick={onDeleteClick}\n                ml={3}\n              >\n                Delete\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n    </>\n  );\n};\nexport default AlertDialogDelete;\n","// Loader Component: Displays a loader spinner within a table row using react-loader-spinner and Chakra UI.\nimport { HStack, Td, Tr } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { ColorRing } from \"react-loader-spinner\";\n\nconst Loader = () => {\n  return (\n    <Tr height={400} maxHeight=\"400px\">\n      <Td colSpan={25}>\n        <HStack justifyContent=\"center\" alignItems=\"center\" w=\"100%\">\n          <ColorRing\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"blocks-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"blocks-wrapper\"\n            colors={[\"#e15b64\", \"#f47e60\", \"#f8b26a\", \"#abbd81\", \"#849b87\"]}\n          />\n        </HStack>\n      </Td>\n    </Tr>\n  );\n};\n\nexport default Loader;\n","/*\n  BranchList Component:\n  This component represents a list of branches. It displays a table with the branch details,\n  including the serial number, creation date, branch name, and action buttons for editing and deleting branches.\n  It utilizes Chakra UI components for the table layout and styling. The component retrieves branch data from Redux\n  and dispatches actions for deleting and retrieving branch data.\n\n  It does the following:\n  - Imports necessary dependencies and components\n  - Defines the interface for branch lists\n  - Retrieves branch data and loading state from Redux using the useSelector hook\n  - Initializes the navigate function from react-router-dom for navigation purposes\n  - Defines the endpoint for API calls\n  - Initializes the useToast hook for displaying toast messages\n  - Memoizes the branches array for efficient rendering\n  - Uses the useEffect hook to retrieve branch data if the memoized branches array is empty\n  - Defines the handleDelete function to delete a branch and retrieve updated data\n  - Renders the branch list table using Chakra UI components, including the table header and body\n*/\n\nimport React, { useEffect, useMemo } from \"react\";\nimport {\n  Box,\n  Button,\n  Divider,\n  Spacer,\n  Stack,\n  Table,\n  TableContainer,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteData, getData } from \"../../redux/actions/common.action\";\nimport { useNavigate } from \"react-router-dom\";\nimport { CiEdit } from \"react-icons/ci\";\nimport AlertDialogDelete from \"../../components/AlertDialouge\";\nimport Loader from \"../../components/Loader\";\n\n// Define the interface for branch lists\ninterface BranchLists {\n  loading: boolean;\n  branches: {\n    serialNumber: number;\n    createdAt: string;\n    BranchName: string;\n    _id: number;\n  }[];\n}\n\nconst BranchList: React.FC = () => {\n  // Retrieve branch data and loading state from Redux using useSelector hook\n  const { branches, loading } = useSelector(\n    (state: { common: BranchLists }) => state.common\n  );\n  console.log(branches);\n  const dispatch: any = useDispatch();\n  const Navigate = useNavigate();\n  const endpoint: string = \"branch\";\n  const toast = useToast();\n\n  // Memoize the branches array for efficient rendering\n  const memoizedBranches = useMemo(() => branches, [branches]);\n\n  useEffect(() => {\n    // Retrieve branch data if the memoized branches array is empty\n    if (memoizedBranches.length === 0) {\n      dispatch(getData(endpoint));\n    }\n  }, [dispatch, endpoint, memoizedBranches.length]);\n\n  // Handle branch deletion\n  const handleDelete = async (id: number) => {\n    await dispatch(deleteData(id, endpoint, toast));\n    dispatch(getData(endpoint));\n  };\n\n  return (\n    <Stack h=\"100%\" mt={1}>\n      <Box\n        px={10}\n        h=\"40px\"\n        display={\"flex\"}\n        justifyContent={\"space-between\"}\n        alignItems={\"center\"}\n      >\n        {/* Heading and add branch button */}\n        <Spacer />\n        <Button\n          onClick={() => Navigate(\"/add-branch\")}\n          mt={2}\n          size={\"sm\"}\n          _hover={{ bg: \"#FF9000\" }}\n          w=\"7.188rem\"\n          bg=\"#FF9000\"\n          borderRadius={\"0.25rem\"}\n          color=\"whiteAlpha.900\"\n          fontWeight={\"700\"}\n          fontSize={\"1rem\"}\n        >\n          Add Branch\n        </Button>\n      </Box>\n      <Divider bg=\"gray.300\" height=\"2px\" />\n      <TableContainer px=\"2\">\n        <Box overflowY=\"auto\" height={480} maxHeight=\"480px\">\n          <Table variant=\"simple\" size=\"sm\">\n            {/* Table header */}\n            <Thead bg={\"gray.100\"} position={\"sticky\"} top=\"0\">\n              <Tr>\n                <Th>#</Th>\n                <Th>Date Created</Th>\n                <Th>Branch Name</Th>\n                <Th>Action</Th>\n              </Tr>\n            </Thead>\n\n            <Tbody>\n              {/* Table body */}\n              {/* Display loader if loading is true, otherwise render the branch rows */}\n              {loading ? (\n                <Loader />\n              ) : (\n                branches?.map((el, i) => (\n                  <Tr key={el._id}>\n                    <Td>{i + 1}</Td>\n                    <Td>{new Date(el.createdAt).toLocaleDateString()}</Td>\n                    <Td>{el.BranchName}</Td>\n                    {/* Action buttons */}\n                    <Td display={\"flex\"} alignItems={\"center\"}>\n                      {/* Edit button */}\n                      <Box\n                        cursor={\"pointer\"}\n                        mr={\"5\"}\n                        onClick={() => Navigate(`/update-branch/${el._id}`)}\n                      >\n                        <CiEdit color=\"blue\" size={19} />\n                      </Box>\n                      {/* Delete button */}\n                      <Box cursor={\"pointer\"}>\n                        <AlertDialogDelete\n                          id={el._id}\n                          handleDelete={handleDelete}\n                        />\n                      </Box>\n                    </Td>\n                  </Tr>\n                ))\n              )}\n            </Tbody>\n          </Table>\n        </Box>\n      </TableContainer>\n    </Stack>\n  );\n};\n\nexport default BranchList;\n"],"names":["_ref","handleDelete","id","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","cancelRef","React","loading","useSelector","state","common","_jsxs","_Fragment","children","_jsx","Box","onClick","RiDeleteBinLine","color","size","cursor","AlertDialog","leastDestructiveRef","AlertDialogOverlay","bg","backdropFilter","AlertDialogContent","AlertDialogHeader","fontSize","fontWeight","AlertDialogBody","AlertDialogFooter","Button","ref","isLoading","loadingText","colorScheme","ml","Tr","height","maxHeight","Td","colSpan","HStack","justifyContent","alignItems","w","ColorRing","visible","width","ariaLabel","wrapperStyle","wrapperClass","colors","_useSelector","branches","console","log","dispatch","useDispatch","Navigate","useNavigate","endpoint","toast","useToast","memoizedBranches","useMemo","useEffect","length","getData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","deleteData","stop","_x","apply","arguments","Stack","h","mt","px","display","Spacer","_hover","borderRadius","Divider","TableContainer","overflowY","Table","variant","Thead","position","top","Th","Tbody","Loader","map","el","i","Date","createdAt","toLocaleDateString","BranchName","mr","concat","_id","CiEdit","AlertDialogDelete"],"sourceRoot":""}