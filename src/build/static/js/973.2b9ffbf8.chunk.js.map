{"version":3,"file":"static/js/973.2b9ffbf8.chunk.js","mappings":"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","sources":["pages/dashboard/AdminDashboard.tsx"],"sourcesContent":["/**\r\n * AdminDashboard Component:\r\n * Renders the admin dashboard with various analytics and statistics.\r\n * Fetches data related to leads count, source analytics, and course analytics.\r\n * Displays charts and visual representations of the data using ApexCharts.\r\n * Provides information about different types of leads and their counts.\r\n * Shows top courses purchased and calls made using bar and line charts.\r\n * Presents source analytics in a bar chart.\r\n */\r\n\r\nimport {\r\n  Box,\r\n  Divider,\r\n  HStack,\r\n  Image,\r\n  SimpleGrid,\r\n  Spacer,\r\n  Stack,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport { ApexOptions } from \"apexcharts\";\r\nimport totalleads from \"../../icons/totalleads.svg\";\r\nimport openleads from \"../../icons/openleads.svg\";\r\nimport finalleads from \"../../icons/finalleads.svg\";\r\nimport hotleads from \"../../icons/hotleads.svg\";\r\nimport unsubscribe from \"../../icons/unsubscribe.svg\";\r\nimport wronglead from \"../../icons/wronglead.svg\";\r\nimport enrolled from \"../../icons/enrolled.svg\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getData } from \"../../redux/actions/common.action\";\r\n\r\n// Define the shape of the analytics data\r\ninterface Analytics {\r\n  leadscount: {\r\n    totalLeads: number;\r\n    openLeads: number;\r\n    finalLeads: number;\r\n    hotLeads: number;\r\n    wrongLeads: number;\r\n    enrolledLeads: number;\r\n    totalPrice: number;\r\n    openPrice: number;\r\n    finalPrice: number;\r\n    hotPrice: number;\r\n    enrolledPrice: number;\r\n    unsubscribePrice: number;\r\n    unSubscribedLeads: number;\r\n    wrongPrice: number;\r\n  };\r\n  sourceanalytics: {\r\n    _id: string;\r\n    leads: number;\r\n  }[];\r\n  courseanalytics: {\r\n    _id: string;\r\n    count: number;\r\n  }[];\r\n}\r\n\r\nconst AdminDashboard = () => {\r\n  // Retrieve data from the Redux store\r\n  const { leadscount, sourceanalytics, courseanalytics } = useSelector(\r\n    (state: { common: Analytics }) => state.common\r\n  );\r\n\r\n  const dispatch: any = useDispatch();\r\n\r\n  // Fetch data from the API on component mount\r\n  useEffect(() => {\r\n    dispatch(getData(\"dashboard/leads-count\"));\r\n    dispatch(getData(\"dashboard/analytics\"));\r\n    dispatch(getData(\"dashboard/source\"));\r\n  }, [dispatch]);\r\n\r\n  // Extract categories and data for course analytics\r\n  const categoriestoshow = courseanalytics\r\n    ?.map((item) => item._id)\r\n    .filter((id) => id !== null);\r\n  const categoriesdatacourse = courseanalytics?.map((item) => item.count);\r\n\r\n  // Extract categories and data for source analytics\r\n  const categoriestoshowSource = sourceanalytics\r\n    ?.map((item) => item._id)\r\n    .filter((id) => id !== null);\r\n  const categoriesdatasource = sourceanalytics?.map((item) => item.leads);\r\n\r\n  // Calculate the total count for course analytics\r\n  const totalCount = categoriesdatacourse.reduce(\r\n    (total, count) => total + count,\r\n    0\r\n  );\r\n\r\n  // Calculate the percentage for each count value in course analytics\r\n  const percentages = categoriesdatacourse.map(\r\n    (count) => (count / totalCount) * 100\r\n  );\r\n\r\n  const leadsData = [\r\n    {\r\n      icons: totalleads,\r\n      name: \"Total Leads\",\r\n      amount: leadscount && leadscount?.totalPrice,\r\n      numofLeads: leadscount && leadscount?.totalLeads,\r\n      color: \"#37AE00\",\r\n    },\r\n    {\r\n      icons: openleads,\r\n      name: \"Open Leads\",\r\n      amount: leadscount && leadscount?.openPrice,\r\n      numofLeads: leadscount && leadscount?.openLeads,\r\n      color: \"#E27A00\",\r\n    },\r\n    {\r\n      icons: finalleads,\r\n      name: \"Final Leads\",\r\n      amount: leadscount && leadscount?.finalPrice,\r\n      numofLeads: leadscount && leadscount?.finalLeads,\r\n      color: \"#1243A0\",\r\n    },\r\n    {\r\n      icons: hotleads,\r\n      name: \"Hot Leads\",\r\n      amount: leadscount && leadscount?.hotPrice,\r\n      numofLeads: leadscount && leadscount?.hotLeads,\r\n      color: \"#5B5B60\",\r\n    },\r\n    {\r\n      icons: unsubscribe,\r\n      name: \"Unsubscribed\",\r\n      amount: leadscount && leadscount?.unsubscribePrice,\r\n      numofLeads: leadscount && leadscount?.unSubscribedLeads,\r\n      color: \"#FFBF00\",\r\n    },\r\n    {\r\n      icons: wronglead,\r\n      name: \"Wrong Leads\",\r\n      amount: leadscount && leadscount?.wrongPrice,\r\n      numofLeads: leadscount && leadscount?.wrongLeads,\r\n      color: \"#FF0000\",\r\n    },\r\n    {\r\n      icons: enrolled,\r\n      name: \"Enrolled\",\r\n      amount: leadscount && leadscount?.enrolledPrice,\r\n      numofLeads: leadscount && leadscount?.enrolledLeads,\r\n      color: \"#8580C2\",\r\n    },\r\n  ];\r\n\r\n  const [data, setData] = useState([\r\n    75, 90, 60, 85, 70, 80, 95, 75, 90, 60, 85, 70, 80,\r\n  ]);\r\n\r\n  const [datas, setDatas] = useState([\r\n    75, 90, 60, 85, 70, 80, 95, 75, 90, 60, 85, 70, 80,\r\n  ]);\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  const colors: any = [\"#ff0000\", \"#00ff00\", \"#0000ff\", \"#ffff00\", \"#ff00ff\"];\r\n  let curve: any = \"smooth\";\r\n\r\n  const options = {\r\n    chart: {\r\n      id: \"horizontal-bar\",\r\n      toolbar: {\r\n        show: false,\r\n      },\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        horizontal: true,\r\n        distributed: true,\r\n      },\r\n    },\r\n    xaxis: {\r\n      categories: categoriestoshow,\r\n    },\r\n    yaxis: {\r\n      type: \"logarithmic\",\r\n      labels: {\r\n        style: {\r\n          fontWeight: \"bold\",\r\n        },\r\n      },\r\n    },\r\n    colors: [\r\n      \"#33b2df\",\r\n      \"#546E7A\",\r\n      \"#d4526e\",\r\n      \"#13d8aa\",\r\n      \"#A5978B\",\r\n      \"#2b908f\",\r\n      \"#f9a3a4\",\r\n      \"#90ee7e\",\r\n      \"#f48024\",\r\n      \"#69d2e7\",\r\n    ],\r\n  };\r\n\r\n  const options2: ApexOptions = {\r\n    chart: {\r\n      type: \"line\",\r\n      height: 350,\r\n      toolbar: {\r\n        show: false,\r\n      },\r\n    },\r\n    stroke: {\r\n      width: 3,\r\n      curve: \"smooth\",\r\n      colors: [\"#ff9800\"], // Orange color\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        horizontal: false,\r\n        columnWidth: \"55%\",\r\n        colors: colors,\r\n      },\r\n    },\r\n    dataLabels: {\r\n      enabled: false,\r\n    },\r\n    xaxis: {\r\n      categories: categories,\r\n    },\r\n    yaxis: {\r\n      labels: {\r\n        style: {\r\n          fontWeight: \"bold\",\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const series = [\r\n    {\r\n      data: categoriesdatacourse,\r\n    },\r\n  ];\r\n\r\n  const series_source = [\r\n    {\r\n      data: categoriesdatasource,\r\n    },\r\n  ];\r\n\r\n  const options3: ApexOptions = {\r\n    chart: {\r\n      type: \"bar\",\r\n      height: 350,\r\n      toolbar: {\r\n        show: false,\r\n      },\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        horizontal: false,\r\n        columnWidth: \"40%\",\r\n        distributed: true,\r\n      },\r\n    },\r\n    dataLabels: {\r\n      enabled: false,\r\n    },\r\n    xaxis: {\r\n      categories: categoriestoshowSource,\r\n    },\r\n    yaxis: {\r\n      labels: {\r\n        style: {\r\n          fontWeight: \"bold\",\r\n        },\r\n      },\r\n    },\r\n    colors: [\r\n      \"#d4526e\",\r\n      \"#546E7A\",\r\n      \"#13d8aa\",\r\n      \"#A5978B\",\r\n      \"#2b908f\",\r\n      \"#33b2df\",\r\n      \"#90ee7e\",\r\n      \"#f48024\",\r\n      \"#f9a3a4\",\r\n      \"#69d2e7\",\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Stack>\r\n      {/* Displaying the leads data */}\r\n      <SimpleGrid\r\n        columns={{ base: 2, sm: 2, md: 3, lg: 4 }}\r\n        gap=\"0.5rem\"\r\n        bg=\"gray.100\"\r\n        pb=\"2\"\r\n      >\r\n        {leadsData?.map((el, i) => (\r\n          <Box\r\n            h=\"3.7rem\"\r\n            px=\"4\"\r\n            py=\"1\"\r\n            borderRadius={\"1.1rem\"}\r\n            bg=\"whiteAlpha.900\"\r\n          >\r\n            <HStack>\r\n              <Box>\r\n                <Text\r\n                  fontSize={\"0.9rem\"}\r\n                  padding={1}\r\n                  fontWeight={\"800\"}\r\n                  color={el.color}\r\n                >\r\n                  ₹ {el.amount}\r\n                </Text>\r\n                <Text fontSize={\"0.95rem\"} fontWeight={400}>\r\n                  {el.name}{\" \"}\r\n                  <span style={{ fontWeight: \"600\", marginTop: \"8px\" }}>\r\n                    {el.numofLeads}\r\n                  </span>{\" \"}\r\n                </Text>\r\n              </Box>\r\n              <Spacer />\r\n              <Box mt=\"0\">\r\n                <Image\r\n                  mt={\"0\"}\r\n                  borderRadius=\"full\"\r\n                  boxSize=\"40px\"\r\n                  src={el.icons}\r\n                  alt=\"error Icons\"\r\n                />\r\n              </Box>\r\n            </HStack>\r\n          </Box>\r\n        ))}\r\n      </SimpleGrid>\r\n\r\n      {/* Displaying top courses purchased */}\r\n      <Stack py=\"1\" mt=\"2\" bg=\"whiteAlpha.900\" borderRadius={\"0.25rem\"}>\r\n        <SimpleGrid columns={{ sm: 1, md: 3 }} gap=\"0.8rem\" p=\"1\">\r\n          <Box bg=\"gray.100\" p=\"1\" borderRadius={\"5\"}>\r\n            <Text ml=\"4\" mb=\"-2\" fontSize={\"1rem\"} fontWeight={700}>\r\n              Top Courses Purchased\r\n            </Text>\r\n            <Chart\r\n              options={options}\r\n              series={series}\r\n              type=\"bar\"\r\n              height=\"370\"\r\n              width=\"100%\"\r\n            />\r\n          </Box>\r\n          <Box bg=\"gray.100\" p=\"1\" borderRadius={5}>\r\n            <Text ml=\"4\" mb=\"-2\" fontSize={\"1rem\"} fontWeight={700}>\r\n              Calls Made\r\n            </Text>\r\n            <Chart\r\n              options={options2}\r\n              series={series}\r\n              type=\"line\"\r\n              height=\"380\"\r\n              width=\"100%\"\r\n            />\r\n          </Box>\r\n          <Box bg=\"gray.100\" p=\"1\" borderRadius={5}>\r\n            <Text ml=\"4\" mb=\"-2\" fontSize={\"1rem\"} fontWeight={700}>\r\n              Source\r\n            </Text>\r\n            <Chart\r\n              options={options3}\r\n              series={series_source}\r\n              type=\"bar\"\r\n              height=\"380\"\r\n              width=\"100%\"\r\n            />\r\n          </Box>\r\n        </SimpleGrid>\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n"],"names":["_useSelector","useSelector","state","common","leadscount","sourceanalytics","courseanalytics","dispatch","useDispatch","useEffect","getData","categoriestoshow","map","item","_id","filter","id","categoriesdatacourse","count","categoriestoshowSource","categoriesdatasource","leads","totalCount","reduce","total","leadsData","icons","totalleads","name","amount","totalPrice","numofLeads","totalLeads","color","openleads","openPrice","openLeads","finalleads","finalPrice","finalLeads","hotleads","hotPrice","hotLeads","unsubscribe","unsubscribePrice","unSubscribedLeads","wronglead","wrongPrice","wrongLeads","enrolled","enrolledPrice","enrolledLeads","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","_useState5","_useState6","categories","options","chart","toolbar","show","plotOptions","bar","horizontal","distributed","xaxis","yaxis","type","labels","style","fontWeight","colors","options2","height","stroke","width","curve","columnWidth","dataLabels","enabled","series","data","series_source","options3","_jsxs","Stack","children","_jsx","SimpleGrid","columns","base","sm","md","lg","gap","bg","pb","el","i","Box","h","px","py","borderRadius","HStack","Text","fontSize","padding","marginTop","Spacer","mt","Image","boxSize","src","alt","p","ml","mb","Chart"],"sourceRoot":""}