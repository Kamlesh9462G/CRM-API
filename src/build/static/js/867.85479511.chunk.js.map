{"version":3,"file":"static/js/867.85479511.chunk.js","mappings":"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","sources":["pages/user/AddnewUser.tsx"],"sourcesContent":["/*\n  AddnewUser Component:\n  This component is a form for adding a new user. It provides the following functionalities:\n  - Input fields for capturing user details such as name, phone number, email, branch, city, username,\n    user type, and password.\n  - An option to upload an image for the user.\n  - A dropdown for selecting permissions.\n  - Validation for required fields and password length.\n  - Dispatching Redux actions to fetch branch, user, and city data.\n  - Submitting the form data to the server using Redux actions.\n  - Navigating to the \"team-list\" page upon successful submission.\n\n  The form data is handled using the react-hook-form library, and Chakra UI components are used for styling.\n*/\n\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Select as ChakraSelect,\n  SimpleGrid,\n  Stack,\n  Text,\n} from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getData, postData } from \"../../redux/actions/common.action\";\nimport Select from \"react-select\";\n// import Select from \"react-select\";\nimport makeAnimated from \"react-select/animated\";\nimport { useForm } from \"react-hook-form\";\nimport { DevTool } from \"@hookform/devtools\";\ninterface AddUsers {\n  Email: string;\n  Name: string;\n  UserName: string;\n  UserType: string;\n  Phone: number;\n  MacAddress: string;\n\n  City: string;\n  Branch: string;\n  Password: string;\n  // image: any;\n  selectedUsers: Array<string>;\n}\n\n// const initialState: AddUsers = {\n//   Email: \"\",\n//   Name: \"\",\n//   UserName: \"\",\n//   UserType: \"\",\n//   Phone: 0,\n//   City: \"\",\n//   MacAddress: \"\",\n//   Password: \"\",\n//   Branch: \"\",\n//   Password: \"\",\n//   image: null,\n// };\ninterface imageData {\n  file: any;\n}\nconst initialImage = {\n  file: null,\n};\n\nconst AddnewUser: React.FC = () => {\nconst [formData, setFormdata] = useState(null);\nconst [image, setImage] = useState<imageData>(initialImage);\n\n//getting the values of branch ,users and city using  the useSelector hook from common reducer.\nconst { branches, users, cities } = useSelector((state: any) => state.common);\n\n// Destructuring the methods and properties from the useForm hook\nconst {\n  register, // Function to register form inputs\n  handleSubmit, // Function to handle form submission\n  control, // Form control for inputs\n  setValue, // Function to set form input values\n  formState: { errors }, // Object containing form validation errors\n} = useForm<AddUsers>();\n\n\n// Fetch branch, user, and city data when the component mounts\nuseEffect(() => {\n  dispatch(getData(\"branch\")); // Fetch branch data\n  dispatch(getData(\"user\")); // Fetch user data\n  dispatch(getData(\"city\")); // Fetch city data\n}, []);\n\nconst endpoint: string = \"user\"; // API endpoint for posting user data\nconst dispatch: any = useDispatch();\nconst Navigate = useNavigate();\n\nconst handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n  const file = e.target.files?.[0];\n  setImage({\n    ...image,\n    file: file || null, // Store the selected file in the formData\n  });\n};\n\nconst onSubmit = (formData: AddUsers) => {\n  const formDataToSend = new FormData();\n  // Append form data to the formDataToSend\n  Object.entries(formData).forEach(([key, value]) => {\n    formDataToSend.append(key, value);\n  });\n  formDataToSend.append(\"file\", image.file); // Append the selected image file to the formData\n  const selectedPermissions = selectedUsers\n    .map((user: any) => user.label)\n    .join(\",\");\n  formDataToSend.append(\"Permission\", selectedPermissions); // Append selected permissions to the formData\n\n  dispatch(postData(formDataToSend, endpoint)).then(() => {\n    dispatch(getData(\"user\")); // Fetch updated user data after successful submission\n    Navigate(\"/team-list\"); // Navigate to the \"team-list\" page\n    console.log(\"ok\");\n  });\n};\n\n// Create option elements for each branch\nconst branchoptions = branches?.map((branch: any) => (\n  <option key={branch._id} value={branch.branchName}>\n    {branch.branchName}\n  </option>\n));\n\n// Create option elements for each city\nconst cityoptions = cities?.map((city: any) => (\n  <option key={city._id} value={city.cityName}>\n    {city.cityName}\n  </option>\n));\n\nconst animatedComponents = makeAnimated();\nconst [selectedUsers, setSelectedUsers] = useState([]);\n\nconst handleSelectChange = (selectedOptions: any) => {\n  setSelectedUsers(selectedOptions);\n};\n\n// Create options for each user\nconst userOptions = users?.map((user: any) => ({\n  value: user._id,\n  label: user.Name,\n}));\n\n// Validation function for password length\nconst minLength = (value: string) => {\n  return value.length >= 6 || \"Password must be at least 6 characters long\";\n};\n\n  return (\n    <Stack h=\"100%\">\n      {/* inputs starts */}\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <SimpleGrid\n          columns={[1, 1, 2, 3]} // Set the number of columns for different screen sizes\n          autoFlow=\"row\" // Set the flow of the grid items to row\n          gap={7}\n          px={[2, 5]} // Set the horizontal padding for different screen sizes\n          py={[2, 5]} // Set the vertical padding for different screen sizes\n          minWidth=\"250px\"\n        >\n          <Box>\n            <FormControl variant=\"floating\" id=\"Name\">\n              <Input\n                autoComplete=\"off\"\n                {...register(\"Name\", {\n                  required: \"name is required\",\n                })}\n                borderColor={errors?.Name ? \"red.500\" : \"gray.400\"}\n                borderRadius={\"0.25rem\"}\n                size=\"sm\"\n                placeholder=\" \"\n                className=\"autocomplete-input\"\n              />\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\n                Enter Name\n              </FormLabel>\n              {errors.Name && (\n                <Text color=\"red.500\" fontSize=\"xs\">\n                  {errors.Name?.message}\n                </Text>\n              )}\n            </FormControl>\n          </Box>\n          <Box>\n            <FormControl variant=\"floating\" id=\"Phone\">\n              <Input\n                autoComplete=\"off\"\n                {...register(\"Phone\", {\n                  required: \"mobile no is required\",\n                })}\n                borderColor={errors?.Phone ? \"red.500\" : \"gray.400\"}\n                borderRadius={\"0.25rem\"}\n                size=\"sm\"\n                placeholder=\" \"\n                type=\"number\"\n              />\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\n                Enter Phone No.\n              </FormLabel>\n              {errors.Phone && (\n                <Text color=\"red.500\" fontSize=\"xs\">\n                  mobile no is required\n                </Text>\n              )}\n            </FormControl>\n          </Box>\n          <Box>\n            <FormControl variant=\"floating\" id=\"Email\">\n              <Input\n                autoComplete=\"off\"\n                {...register(\"Email\", {\n                  required: \"email ID is required\",\n                })}\n                borderColor={errors?.Email ? \"red.500\" : \"gray.400\"}\n                borderRadius={\"0.25rem\"}\n                size=\"sm\"\n                placeholder=\" \"\n              />\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\n                Enter Email ID\n              </FormLabel>\n              {errors.Email && (\n                <Text color=\"red.500\" fontSize=\"xs\">\n                  email ID is required\n                </Text>\n              )}\n            </FormControl>\n          </Box>\n          <Box>\n            <FormControl variant=\"floating\" id=\"Branch\">\n              <ChakraSelect\n                {...register(\"Branch\", {\n                  required: \"Branch is required\",\n                })}\n                borderColor={errors?.Branch ? \"red.500\" : \"gray.400\"}\n                size=\"sm\"\n                borderRadius={\"0.25rem\"}\n                placeholder=\"\"\n              >\n                {\" \"}\n                <option value=\"\" disabled selected>\n                  Select Branch\n                </option>\n                {branchoptions}\n              </ChakraSelect>\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\n                Branch\n              </FormLabel>\n              {errors.Branch && (\n                <Text color=\"red.500\" fontSize=\"xs\">\n                  branch is required\n                </Text>\n              )}\n            </FormControl>\n          </Box>\n          <Box>\n            <FormControl variant=\"floating\" id=\"City\">\n              <ChakraSelect\n                {...register(\"City\", {\n                  required: \"City is required\",\n                })}\n                borderColor={errors?.City ? \"red.500\" : \"gray.400\"}\n                size=\"sm\"\n                borderRadius={\"0.25rem\"}\n                placeholder=\"\"\n              >\n                {\" \"}\n                <option value=\"\" disabled selected>\n                  Select City\n                </option>\n                {cityoptions}\n              </ChakraSelect>\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\n                City\n              </FormLabel>\n              {errors.City && (\n                <Text color=\"red.500\" fontSize=\"xs\">\n                  City is required\n                </Text>\n              )}\n            </FormControl>\n          </Box>\n          <Box>\n            <FormControl variant=\"floating\" id=\"UserName\">\n              <Input\n                autoComplete=\"off\"\n                {...register(\"UserName\", {\n                  required: \"UserName is required\",\n                })}\n                borderColor={errors?.UserName ? \"red.500\" : \"gray.400\"}\n                borderRadius={\"0.25rem\"}\n                size=\"sm\"\n                placeholder=\" \"\n              />\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\n                Enter Unique Username\n              </FormLabel>\n              {errors.UserName && (\n                <Text color=\"red.500\" fontSize=\"xs\">\n                  username is required\n                </Text>\n              )}\n            </FormControl>\n          </Box>\n          <Box>\n            <FormControl variant=\"floating\" id=\"UserType\">\n              <Input\n                autoComplete=\"off\"\n                {...register(\"UserType\", {\n                  required: \"UserType is required\",\n                })}\n                borderColor={errors?.UserType ? \"red.500\" : \"gray.400\"}\n                borderRadius={\"0.25rem\"}\n                size=\"sm\"\n                placeholder=\" \"\n              />\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\n                Enter User Profile\n              </FormLabel>\n              {errors.UserType && (\n                <Text color=\"red.500\" fontSize=\"xs\">\n                  user type is required\n                </Text>\n              )}\n            </FormControl>\n          </Box>\n          <Box>\n            <FormControl variant=\"floating\" id=\"Password\">\n              <Input\n                autoComplete=\"off\"\n                type=\"Password\"\n                {...register(\"Password\", {\n                  required: \"Password is required\",\n                  validate: minLength,\n                })}\n                borderColor={errors?.Password ? \"red.500\" : \"gray.400\"}\n                borderRadius={\"0.25rem\"}\n                size=\"sm\"\n                placeholder=\" \"\n              />\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\n                Password\n              </FormLabel>\n              {errors.Password && (\n                <Text color=\"red.500\" fontSize=\"xs\">\n                  {errors.Password?.message}\n                </Text>\n              )}\n            </FormControl>\n          </Box>\n          <Box>\n            <Input\n              // {...register(\"image\", {\n              //   required: \"image is required\",\n              // })}\n              borderColor={\"gray.400\"}\n              size=\"sm\"\n              type=\"file\"\n              borderRadius=\"0.25rem\"\n              sx={{\n                \"::file-selector-button\": {\n                  bg: \"gray.500\",\n                  color: \"white\",\n                  ml: -6,\n                  mt: 0.7,\n                  py: 1.45,\n                  px: 12,\n                  mr: 15,\n                  borderRadius: \"0.25rem\",\n                  _hover: {\n                    bg: \"blue.600\",\n                  },\n                },\n              }}\n              flexGrow={1}\n              onChange={handleImageChange}\n            />\n            {/* {errors.image && (\n              <Text color=\"red.500\" fontSize=\"xs\">\n                image is required\n              </Text>\n            )} */}\n          </Box>\n          <Box mt=\"-3\">\n            <Text fontSize={\"0.9rem\"} ml=\"2\" mb=\"0.5\">\n              Permissions\n            </Text>\n            <Select\n              // {...register(\"selectedUsers\", {\n              //   required: \"Permisssions is required\",\n              // })}\n              id=\"assigned-users\"\n              name=\"assigned-users\"\n              className=\"react-select-sm\"\n              styles={{\n                control: (provided, state) => ({\n                  ...provided,\n                  background: \"#fff\",\n                  borderColor: \"#9e9e9e\",\n                  minHeight: \"30px\",\n                  height: \"30px\",\n                  // boxShadow: state.isFocused ? null : null,\n                }),\n\n                valueContainer: (provided, state) => ({\n                  ...provided,\n                  height: \"30px\",\n                  padding: \"0 6px\",\n                }),\n\n                input: (provided, state) => ({\n                  ...provided,\n                  margin: \"0px\",\n                }),\n                indicatorSeparator: (state) => ({\n                  display: \"none\",\n                }),\n                indicatorsContainer: (provided, state) => ({\n                  ...provided,\n                  height: \"30px\",\n                }),\n              }}\n              placeholder=\"Select Permisssions\"\n              isMulti\n              components={animatedComponents}\n              options={userOptions}\n              value={selectedUsers}\n              onChange={handleSelectChange}\n            />\n            {/* {errors.selectedUsers && (\n              <Text color=\"red.500\" fontSize=\"xs\">\n               {errors.selectedUsers.message}\n              </Text>\n            )} */}\n          </Box>{\" \"}\n          <Box\n            display={\"flex\"}\n            justifyContent={\"flex-end\"}\n            alignItems={\"center\"}\n          ></Box>{\" \"}\n          <Box\n            display={\"flex\"}\n            justifyContent={\"flex-end\"}\n            alignItems={\"center\"}\n          >\n            <Button\n              type=\"submit\"\n              mt={6}\n              size={\"sm\"}\n              _hover={{ bg: \"#FF9000\" }}\n              w=\"8.188rem\"\n              bg=\"#FF9000\"\n              borderRadius={\"0.25rem\"}\n              color=\"whiteAlpha.900\"\n              fontWeight={\"700\"}\n              fontSize={\"1rem\"}\n            >\n              Submit\n            </Button>\n          </Box>{\" \"}\n        </SimpleGrid>\n      </form>\n      {/* inputs end */}\n      <DevTool control={control} />\n    </Stack>\n  );\n};\n\nexport default AddnewUser;\n"],"names":["initialImage","file","_errors$Name","_errors$Password","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","image","setImage","_useSelector","useSelector","state","common","branches","users","cities","_useForm","useForm","register","handleSubmit","control","errors","setValue","formState","useEffect","dispatch","getData","useDispatch","Navigate","useNavigate","branchoptions","map","branch","_jsx","value","branchName","children","_id","cityoptions","city","cityName","animatedComponents","makeAnimated","_useState5","_useState6","selectedUsers","setSelectedUsers","userOptions","user","label","Name","_jsxs","Stack","h","onSubmit","formData","formDataToSend","FormData","Object","entries","forEach","_ref","_ref2","key","append","selectedPermissions","join","postData","then","console","log","SimpleGrid","columns","autoFlow","gap","px","py","minWidth","Box","FormControl","variant","id","Input","_objectSpread","autoComplete","required","borderColor","borderRadius","size","placeholder","className","FormLabel","fontWeight","color","Text","fontSize","message","Phone","type","Email","ChakraSelect","Branch","disabled","selected","City","UserName","UserType","validate","length","Password","sx","bg","ml","mt","mr","_hover","flexGrow","onChange","e","_e$target$files","target","files","mb","Select","name","styles","provided","background","minHeight","height","valueContainer","padding","input","margin","indicatorSeparator","display","indicatorsContainer","isMulti","components","options","selectedOptions","justifyContent","alignItems","Button","w","DevTool"],"sourceRoot":""}