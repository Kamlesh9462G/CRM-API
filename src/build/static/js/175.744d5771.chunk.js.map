{"version":3,"file":"static/js/175.744d5771.chunk.js","mappings":"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","sources":["pages/city/AddCity.tsx","../node_modules/@chakra-ui/form-control/dist/chunk-RN6VKE3K.mjs"],"sourcesContent":["/*\n  AddCity Component:\n  This component represents a form for adding a new city. It allows the user to enter a city name in an input field\n  and submit the form to add the city. It utilizes Chakra UI components for the form layout and styling.\n  The component dispatches actions for adding and retrieving city data.\n\n  It does the following:\n  - Imports necessary dependencies and components\n  - Defines the interfaces for cities and loading state\n  - Retrieves the loading state from Redux using the useSelector hook\n  - Initializes the react-hook-form for form handling, including form submission and input validation\n  - Retrieves the dispatch function from Redux using the useDispatch hook\n  - Defines the endpoint for API calls\n  - Initializes the navigate function from react-router-dom for navigation purposes\n  - Initializes the useToast hook for displaying toast messages\n  - Handles form submission by dispatching the postData action and retrieving city data\n  - Renders the add city form using Chakra UI components, including the input field and submit button\n  - Includes the DevTool component from @hookform/devtools for form debugging (optional)\n*/\n\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  SimpleGrid,\n  Stack,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getData, postData } from \"../../redux/actions/common.action\";\nimport { useNavigate } from \"react-router-dom\";\nimport { DevTool } from \"@hookform/devtools\";\n\n// Interface for cities\ninterface Cities {\n  CityName: string;\n}\n\n// Interface for loading state\ninterface Loading {\n  loading: boolean;\n}\n\nconst AddCity: React.FC = () => {\n  const { loading } = useSelector((state: { common: Loading }) => state.common);\n  const {\n    register,\n    handleSubmit,\n    reset,\n    control,\n    formState: { errors },\n  } = useForm<Cities>();\n  const dispatch: any = useDispatch();\n  const endpoint: string = \"city\";\n  const navigate = useNavigate();\n  const toast = useToast();\n\n  const onSubmit = (formData: Cities) => {\n    // Handle form submission by dispatching the postData action and retrieving city data\n    dispatch(postData(formData, endpoint, navigate, toast)).then(() => {\n      dispatch(getData(\"city\"));\n      reset();\n    });\n  };\n\n  return (\n    <Stack h=\"100%\">\n      {/* Form */}\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <SimpleGrid columns={3} px={10} py={5} gap={6} mt={3}>\n          <Box>\n            <FormControl variant=\"floating\" id=\"City-Name\">\n              {/* City Name Input */}\n              <Input\n                autoComplete=\"off\"\n                {...register(\"CityName\", {\n                  required: \"City name is required\",\n                })}\n                borderColor={errors?.CityName ? \"red.500\" : \"gray.400\"}\n                borderRadius={\"0.25rem\"}\n                size=\"sm\"\n                placeholder=\" \"\n              />\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\n                City Name\n              </FormLabel>\n              {errors.CityName && (\n                <Text as=\"span\" fontSize=\"sm\" color=\"red.500\">\n                  {errors.CityName.message}\n                </Text>\n              )}\n            </FormControl>\n          </Box>\n          <Box\n            mb={errors.CityName ? \"6\" : 0}\n            display={\"flex\"}\n            justifyContent={\"flex-start\"}\n            alignItems={\"center\"}\n          >\n            {/* Add City Button */}\n            <Button\n              isLoading={loading}\n              loadingText=\"Please wait...\"\n              type=\"submit\"\n              size={\"sm\"}\n              _hover={{ bg: \"#FF9000\" }}\n              w=\"8.188rem\"\n              bg=\"#FF9000\"\n              borderRadius={\"0.25rem\"}\n              color=\"whiteAlpha.900\"\n              fontWeight={\"700\"}\n              fontSize={\"1rem\"}\n            >\n              Add City\n            </Button>\n          </Box>\n        </SimpleGrid>\n      </form>\n      {/* DevTool (optional) */}\n      <DevTool control={control} />\n    </Stack>\n  );\n};\n\nexport default AddCity;\n","import {\n  useFormControlContext,\n  useFormControlStyles\n} from \"./chunk-6ZNYZUDD.mjs\";\n\n// src/form-label.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */ jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : { ref, ...rest };\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      ...ownProps,\n      className: cx(\"chakra-form__label\", props.className),\n      __css: {\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles\n      },\n      children: [\n        children,\n        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator\n      ]\n    }\n  );\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(\n  function RequiredIndicator2(props, ref) {\n    const field = useFormControlContext();\n    const styles = useFormControlStyles();\n    if (!(field == null ? void 0 : field.isRequired))\n      return null;\n    const className = cx(\"chakra-form__required-indicator\", props.className);\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),\n        __css: styles.requiredIndicator,\n        className\n      }\n    );\n  }\n);\nRequiredIndicator.displayName = \"RequiredIndicator\";\n\nexport {\n  FormLabel,\n  RequiredIndicator\n};\n"],"names":["loading","useSelector","state","common","_useForm","useForm","register","handleSubmit","reset","control","errors","formState","dispatch","useDispatch","navigate","useNavigate","toast","useToast","_jsxs","Stack","h","children","_jsx","onSubmit","formData","postData","then","getData","SimpleGrid","columns","px","py","gap","mt","Box","FormControl","variant","id","Input","_objectSpread","autoComplete","required","borderColor","CityName","borderRadius","size","placeholder","FormLabel","fontWeight","color","Text","as","fontSize","message","mb","display","justifyContent","alignItems","Button","isLoading","loadingText","type","_hover","bg","w","DevTool","forwardRef","passedProps","ref","_a","styles","useStyleConfig","props","omitThemingProps","className","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","_objectWithoutProperties","_excluded","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","cx","__css","textAlign","isRequired","displayName","useFormControlStyles","getRequiredIndicatorProps"],"sourceRoot":""}