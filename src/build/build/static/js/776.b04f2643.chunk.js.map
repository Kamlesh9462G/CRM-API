{"version":3,"file":"static/js/776.b04f2643.chunk.js","mappings":"mQA+KA,UAlHqB,WAEnB,IAAAA,GAMIC,EAAAA,EAAAA,MALFC,EAAQF,EAARE,SACAC,EAAYH,EAAZG,aACAC,EAAKJ,EAALI,MACAC,EAAOL,EAAPK,QACaC,EAAMN,EAAnBO,UAAaD,OAIfE,GAAqCC,EAAAA,EAAAA,KACnC,SAACC,GAAgC,OAAKA,EAAMC,MAAM,IAD5CC,EAAMJ,EAANI,OAAiBC,GAAFL,EAAPM,QAAgBN,EAAPK,SAKjBE,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,EAAmB,SACnBC,GAAgBC,EAAAA,EAAAA,MAChBC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,MAGdC,EAAAA,EAAAA,YAAU,WACRN,GAASO,EAAAA,EAAAA,IAAYV,EAAIE,IACzBC,GAASQ,EAAAA,EAAAA,IAAQT,GACnB,GAAG,CAACF,KAGJS,EAAAA,EAAAA,YAAU,WACJZ,GACFR,EAAMQ,EAEV,GAAG,CAACA,IASJ,OACEe,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,EAAE,OAAMC,SAAA,EAKbC,EAAAA,EAAAA,KAAA,QAAMC,SAAU7B,GAZH,SAAC8B,GAChBf,GAASgB,EAAAA,EAAAA,IAAWnB,EAAIE,EAAUgB,EAAMb,EAAUE,IAAQa,MAAK,WAC7DjB,GAASQ,EAAAA,EAAAA,IAAQ,UACnB,GACF,IAQ2CI,UACrCH,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACC,QAAS,EAAGC,GAAI,GAAIC,GAAI,EAAGC,IAAK,EAAEV,SAAA,EAC5CH,EAAAA,EAAAA,MAACc,EAAAA,GAAG,CAAAX,SAAA,EACFC,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CAACC,SAAU,OAAQC,GAAG,IAAIC,GAAG,MAAKf,SAAC,iBAGxCC,EAAAA,EAAAA,KAACe,EAAAA,GAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACA7C,EAAS,aAAc,CAAE8C,UAAU,KAAO,IAC9CC,KAAM,KACNC,YAAa5C,EAAO6C,WAAa,UAAY,WAC7CC,aAAc,aAGf9C,EAAO6C,aACNpB,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CAACW,MAAM,UAAUV,SAAS,KAAIb,SAAC,gCAKxCH,EAAAA,EAAAA,MAACc,EAAAA,GAAG,CAAAX,SAAA,EACFC,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CAACC,SAAU,OAAQC,GAAG,IAAIC,GAAG,MAAKf,SAAC,iBAGxCC,EAAAA,EAAAA,KAACe,EAAAA,GAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACA7C,EAAS,cAAe,CAAE8C,UAAU,KAAO,IAC/CC,KAAM,KACNC,YAAmB,OAAN5C,QAAM,IAANA,GAAAA,EAAQgD,YAAc,UAAY,WAC/CF,aAAc,UACdG,YAAY,MAEbjD,EAAOgD,cACNvB,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CAACW,MAAM,UAAUV,SAAS,KAAIb,SAAC,iCAKxCC,EAAAA,EAAAA,KAACU,EAAAA,GAAG,CACFe,QAAS,OACTC,eAAgB,aAChBC,WAAY,SAAS5B,UAErBC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAM,CACLC,UAAW/C,EACXgD,YAAY,iBACZC,KAAK,SACLb,KAAM,KACNc,GAAI,EACJC,OAAQ,CAAEC,GAAI,WACdC,EAAE,WACFD,GAAG,UACHb,aAAc,UACdC,MAAM,iBACNc,WAAY,MACZxB,SAAU,OAAOb,SAClB,0BAOPC,EAAAA,EAAAA,KAACqC,EAAAA,QAAO,CAAC/D,QAASA,MAGxB,C","sources":["pages/source/UpdateSource.tsx"],"sourcesContent":["/*\r\n  UpdateSource Component:\r\n  This component allows updating a source by providing a form with a select input for the source name.\r\n  It utilizes Chakra UI components for styling and form handling using react-hook-form.\r\n\r\n  It does the following:\r\n  - Imports necessary dependencies and components\r\n  - Defines the interfaces for UpdateCities and FormData\r\n  - Retrieves the source and sources data from Redux using the useSelector hook\r\n  - Initializes the dispatch function from Redux using the useDispatch hook\r\n  - Retrieves the \"id\" parameter from the URL using the useParams hook\r\n  - Initializes the navigate function from react-router-dom for navigation purposes\r\n  - Initializes the useToast hook for displaying toast messages\r\n  - Defines the endpoint for API calls\r\n  - Initializes the react-hook-form for form handling and sets default form values based on the source data\r\n  - Fetches source data and the specific source by ID when the component mounts\r\n  - Resets the form values when the source data changes\r\n  - Handles form submission by dispatching the updateData action and fetching updated source data\r\n  - Renders the form with a select input for source name and displays form validation errors if any\r\n*/\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Input,\r\n  Select,\r\n  SimpleGrid,\r\n  Stack,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getData,\r\n  getDataById,\r\n  updateData,\r\n} from \"../../redux/actions/common.action\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { DevTool } from \"@hookform/devtools\";\r\n\r\n//interface for the update sources\r\ninterface UpdateSources {\r\n  source: {\r\n    SourceName: string;\r\n    Description: string;\r\n  };\r\n  sources: {\r\n    SourceName: string;\r\n    _id: string;\r\n  }[];\r\n  loading: boolean;\r\n}\r\n\r\n//interface for the filled form values\r\ninterface FormValues {\r\n  SourceName: string;\r\n  Description: string;\r\n}\r\n\r\nconst UpdateSource = () => {\r\n  // Accessing form-related hooks and variables\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    control,\r\n    formState: { errors },\r\n  } = useForm<FormValues>();\r\n\r\n  // Accessing the 'source', 'sources', and 'loading' state from the common reducer\r\n  const { source, sources, loading } = useSelector(\r\n    (state: { common: UpdateSources }) => state.common\r\n  );\r\n\r\n  // Accessing necessary hooks, variables, and parameters\r\n  const { id } = useParams();\r\n  const endpoint: string = \"source\";\r\n  const dispatch: any = useDispatch();\r\n  const navigate = useNavigate();\r\n  const toast = useToast();\r\n\r\n  // useEffect hook to fetch data when 'id' changes\r\n  useEffect(() => {\r\n    dispatch(getDataById(id, endpoint));\r\n    dispatch(getData(endpoint));\r\n  }, [id]);\r\n\r\n  // useEffect hook to reset form values when 'source' changes\r\n  useEffect(() => {\r\n    if (source) {\r\n      reset(source);\r\n    }\r\n  }, [source]);\r\n\r\n  // Function to handle form submission\r\n  const onSubmit = (data: FormValues) => {\r\n    dispatch(updateData(id, endpoint, data, navigate, toast)).then(() => {\r\n      dispatch(getData(\"source\"));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Stack h=\"100%\">\r\n      {/* heading starts */}\r\n\r\n      {/* heading end */}\r\n      {/* inputs starts */}\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <SimpleGrid columns={3} px={10} py={1} gap={6}>\r\n          <Box>\r\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\r\n              Source Name\r\n            </Text>\r\n            <Input\r\n              {...register(\"SourceName\", { required: true })}\r\n              size={\"sm\"}\r\n              borderColor={errors.SourceName ? \"red.500\" : \"gray.400\"}\r\n              borderRadius={\"0.25rem\"}\r\n            />\r\n\r\n            {errors.SourceName && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                Source name is required\r\n              </Text>\r\n            )}\r\n          </Box>\r\n          <Box>\r\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\r\n              Description\r\n            </Text>\r\n            <Input\r\n              {...register(\"Description\", { required: true })}\r\n              size={\"sm\"}\r\n              borderColor={errors?.Description ? \"red.500\" : \"gray.400\"}\r\n              borderRadius={\"0.25rem\"}\r\n              placeholder=\"\"\r\n            />\r\n            {errors.Description && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                Description is required.\r\n              </Text>\r\n            )}\r\n          </Box>\r\n          <Box\r\n            display={\"flex\"}\r\n            justifyContent={\"flex-start\"}\r\n            alignItems={\"center\"}\r\n          >\r\n            <Button\r\n              isLoading={loading}\r\n              loadingText=\"Please wait...\"\r\n              type=\"submit\"\r\n              size={\"sm\"}\r\n              mt={6}\r\n              _hover={{ bg: \"#FF9000\" }}\r\n              w=\"8.188rem\"\r\n              bg=\"#FF9000\"\r\n              borderRadius={\"0.25rem\"}\r\n              color=\"whiteAlpha.900\"\r\n              fontWeight={\"700\"}\r\n              fontSize={\"1rem\"}\r\n            >\r\n              Update Source\r\n            </Button>\r\n          </Box>\r\n        </SimpleGrid>\r\n      </form>\r\n      {/* inputs end */}\r\n      <DevTool control={control} />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default UpdateSource;\r\n"],"names":["_useForm","useForm","register","handleSubmit","reset","control","errors","formState","_useSelector","useSelector","state","common","source","loading","sources","id","useParams","endpoint","dispatch","useDispatch","navigate","useNavigate","toast","useToast","useEffect","getDataById","getData","_jsxs","Stack","h","children","_jsx","onSubmit","data","updateData","then","SimpleGrid","columns","px","py","gap","Box","Text","fontSize","ml","mb","Input","_objectSpread","required","size","borderColor","SourceName","borderRadius","color","Description","placeholder","display","justifyContent","alignItems","Button","isLoading","loadingText","type","mt","_hover","bg","w","fontWeight","DevTool"],"sourceRoot":""}