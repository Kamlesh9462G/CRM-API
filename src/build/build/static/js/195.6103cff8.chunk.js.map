{"version":3,"file":"static/js/195.6103cff8.chunk.js","mappings":"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","sources":["pages/course/AddCourse.tsx","../node_modules/@chakra-ui/form-control/dist/chunk-RN6VKE3K.mjs"],"sourcesContent":["/*\r\n  AddCourse Component:\r\n  This component allows adding a new course by providing a form with inputs for course name and course price.\r\n  It utilizes Chakra UI components for styling and form handling using react-hook-form.\r\n\r\n  It does the following:\r\n  - Imports necessary dependencies and components\r\n  - Defines the interface for AddCourses\r\n  - Initializes the react-hook-form for form handling and sets form validation rules\r\n  - Initializes the useDispatch function from Redux\r\n  - Initializes the navigate function from react-router-dom for navigation purposes\r\n  - Initializes the useToast hook for displaying toast messages\r\n  - Defines the onSubmit function to handle form submission\r\n  - Renders the form with inputs for course name and course price, and displays form validation errors if any\r\n*/\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  SimpleGrid,\r\n  Stack,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { DevTool } from \"@hookform/devtools\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getData, postData } from \"../../redux/actions/common.action\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n// Interface for the form data submitted by the user\r\ninterface AddCourses {\r\n  CourseName: string;\r\n  CourseValue: string;\r\n}\r\n\r\nconst AddCourse = () => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    control,\r\n    formState: { errors },\r\n  } = useForm<AddCourses>();\r\n  const dispatch: any = useDispatch();\r\n  const navigate = useNavigate();\r\n  const toast = useToast();\r\n\r\n  const onSubmit = (data: AddCourses) => {\r\n    const endpoint = \"course\";\r\n    // Dispatch the postData action to add a new course and fetch the updated course data\r\n    dispatch(postData(data, endpoint, navigate, toast)).then(() => {\r\n      dispatch(getData(\"course\"));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Stack h=\"100%\">\r\n      {/* Form */}\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <SimpleGrid columns={3} px={10} py={5} gap={6} mt={3}>\r\n          <Box>\r\n            {/* Course Name Input */}\r\n            <FormControl variant=\"floating\" id=\"CourseName\">\r\n              <Input\r\n                autoComplete=\"off\"\r\n                {...register(\"CourseName\", {\r\n                  required: \"Course name is required\",\r\n                })}\r\n                borderColor={errors?.CourseName ? \"red.500\" : \"gray.400\"}\r\n                borderRadius={\"0.25rem\"}\r\n                size=\"sm\"\r\n                placeholder=\" \"\r\n              />\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Course Name\r\n              </FormLabel>\r\n              {errors.CourseName && (\r\n                <Text as={\"span\"} fontSize=\"sm\" color=\"red.500\">\r\n                  {errors.CourseName.message}\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          <Box>\r\n            {/* Course Value Input */}\r\n            <FormControl variant=\"floating\" id=\"CourseValue\">\r\n              <Input\r\n                autoComplete=\"off\"\r\n                {...register(\"CourseValue\", {\r\n                  required: \"Course price is required\",\r\n                })}\r\n                borderColor={errors?.CourseValue ? \"red.500\" : \"gray.400\"}\r\n                borderRadius={\"0.25rem\"}\r\n                size=\"sm\"\r\n                placeholder=\" \"\r\n              />\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Course Price\r\n              </FormLabel>\r\n              {errors.CourseValue && (\r\n                <Text as={\"span\"} fontSize=\"sm\" color=\"red.500\">\r\n                  {errors.CourseValue.message}\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          <Box\r\n            display={\"flex\"}\r\n            justifyContent={\"flex-start\"}\r\n            alignItems={\"center\"}\r\n          >\r\n            {/* Add Course Button */}\r\n            <Button\r\n              type=\"submit\"\r\n              size={\"sm\"}\r\n              _hover={{ bg: \"#FF9000\" }}\r\n              w=\"8.188rem\"\r\n              bg=\"#FF9000\"\r\n              borderRadius={\"0.25rem\"}\r\n              color=\"whiteAlpha.900\"\r\n              fontWeight={\"700\"}\r\n              fontSize={\"1rem\"}\r\n            >\r\n              Add Course\r\n            </Button>\r\n          </Box>\r\n        </SimpleGrid>\r\n      </form>\r\n      {/* React Hook Form DevTool */}\r\n      <DevTool control={control} />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default AddCourse;\r\n","import {\n  useFormControlContext,\n  useFormControlStyles\n} from \"./chunk-6ZNYZUDD.mjs\";\n\n// src/form-label.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */ jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : { ref, ...rest };\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      ...ownProps,\n      className: cx(\"chakra-form__label\", props.className),\n      __css: {\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles\n      },\n      children: [\n        children,\n        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator\n      ]\n    }\n  );\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(\n  function RequiredIndicator2(props, ref) {\n    const field = useFormControlContext();\n    const styles = useFormControlStyles();\n    if (!(field == null ? void 0 : field.isRequired))\n      return null;\n    const className = cx(\"chakra-form__required-indicator\", props.className);\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),\n        __css: styles.requiredIndicator,\n        className\n      }\n    );\n  }\n);\nRequiredIndicator.displayName = \"RequiredIndicator\";\n\nexport {\n  FormLabel,\n  RequiredIndicator\n};\n"],"names":["_useForm","useForm","register","handleSubmit","control","errors","formState","dispatch","useDispatch","navigate","useNavigate","toast","useToast","_jsxs","Stack","h","children","_jsx","onSubmit","data","postData","then","getData","SimpleGrid","columns","px","py","gap","mt","Box","FormControl","variant","id","Input","_objectSpread","autoComplete","required","borderColor","CourseName","borderRadius","size","placeholder","FormLabel","fontWeight","color","Text","as","fontSize","message","CourseValue","display","justifyContent","alignItems","Button","type","_hover","bg","w","DevTool","forwardRef","passedProps","ref","_a","styles","useStyleConfig","props","omitThemingProps","className","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","_objectWithoutProperties","_excluded","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","cx","__css","textAlign","isRequired","displayName","useFormControlStyles","getRequiredIndicatorProps"],"sourceRoot":""}