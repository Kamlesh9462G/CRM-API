{"version":3,"file":"static/js/789.cb3768fb.chunk.js","mappings":"oQA6JA,UAnG6B,WAC3B,IAAMA,GAAgBC,EAAAA,EAAAA,MACdC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KACRC,EAAmB,OACzBC,GAAyBC,EAAAA,EAAAA,KACvB,SAACC,GAA+B,OAAKA,EAAMC,MAAM,IAD3CC,EAAIJ,EAAJI,KAKRC,GALoBL,EAANM,QAWVC,EAAAA,EAAAA,IAAkB,CACpBC,cAAe,CACbC,UAAc,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMK,WAAY,OAP9BC,EAAYL,EAAZK,aACAC,EAAQN,EAARM,SACaC,EAAMP,EAAnBQ,UAAaD,OACbE,EAAKT,EAALS,MACAC,EAAOV,EAAPU,SAOFC,EAAAA,EAAAA,YAAU,WAERzB,GAAS0B,EAAAA,EAAAA,IAAYxB,EAAIM,IACzBR,GAAS2B,EAAAA,EAAAA,IAAQnB,GACnB,GAAG,CAACN,EAAIF,KAERyB,EAAAA,EAAAA,YAAU,WAEJZ,GACFU,EAAM,CACJL,SAAUL,EAAKK,UAGrB,GAAG,CAACL,EAAMU,IAWV,OACEK,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,EAAE,OAAMC,SAAA,EAEbC,EAAAA,EAAAA,KAAA,QAAMC,SAAUd,GAZH,SAACe,GAEhBlC,GACEmC,EAAAA,EAAAA,IAAWjC,EAAIM,EAAU,CAAEU,SAAUgB,EAAKhB,UAAYd,EAAUE,IAChE8B,MAAK,WACLpC,GAAS2B,EAAAA,EAAAA,IAAQ,QACnB,GACF,IAK2CI,UACrCH,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACC,QAAS,EAAGC,GAAI,GAAIC,GAAI,EAAGC,IAAK,EAAEV,SAAA,EAC5CH,EAAAA,EAAAA,MAACc,EAAAA,GAAG,CAAAX,SAAA,EAEFC,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CAACC,SAAU,OAAQC,GAAG,IAAIC,GAAG,MAAKf,SAAC,eAGxCC,EAAAA,EAAAA,KAACe,EAAAA,GAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACA5B,EAAS,WAAY,CAAE6B,UAAU,KAAO,IAC5CC,KAAM,KACNC,YAAa9B,EAAOH,SAAW,UAAY,WAC3CkC,aAAc,aAEf/B,EAAOH,WACNc,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CAACU,MAAM,UAAUT,SAAS,KAAIb,SAAC,8BAMxCC,EAAAA,EAAAA,KAACU,EAAAA,GAAG,CACFY,GAAI,EACJC,QAAS,OACTC,eAAgB,aAChBC,WAAY,SAAS1B,UAGrBC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,CACLC,KAAK,SACLT,KAAM,KACNU,OAAQ,CAAEC,GAAI,WACdC,EAAE,WACFD,GAAG,UACHT,aAAc,UACdC,MAAM,iBACNU,WAAY,MACZnB,SAAU,OAAOb,SAClB,wBAOPC,EAAAA,EAAAA,KAACgC,EAAAA,QAAO,CAACxC,QAASA,MAGxB,C","sources":["pages/city/UpdateCity.tsx"],"sourcesContent":["/*\r\n  UpdateCity Component:\r\n  This component allows updating a city by providing a form with a select input for the city name.\r\n  It utilizes Chakra UI components for styling and form handling using react-hook-form.\r\n\r\n  It does the following:\r\n  - Imports necessary dependencies and components\r\n  - Defines the interfaces for UpdateCities and FormData\r\n  - Retrieves the city and cities data from Redux using the useSelector hook\r\n  - Initializes the dispatch function from Redux using the useDispatch hook\r\n  - Retrieves the \"id\" parameter from the URL using the useParams hook\r\n  - Initializes the navigate function from react-router-dom for navigation purposes\r\n  - Initializes the useToast hook for displaying toast messages\r\n  - Defines the endpoint for API calls\r\n  - Initializes the react-hook-form for form handling and sets default form values based on the city data\r\n  - Fetches city data and the specific city by ID when the component mounts\r\n  - Resets the form values when the city data changes\r\n  - Handles form submission by dispatching the updateData action and fetching updated city data\r\n  - Renders the form with a select input for city name and displays form validation errors if any\r\n*/\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Input,\r\n  Select,\r\n  SimpleGrid,\r\n  Stack,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getData,\r\n  getDataById,\r\n  updateData,\r\n} from \"../../redux/actions/common.action\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { DevTool } from \"@hookform/devtools\";\r\n\r\n// Interface for the city data used in the component\r\ninterface UpdateCities {\r\n  city: {\r\n    CityName: string;\r\n  };\r\n  cities: {\r\n    CityName: string;\r\n    _id: string;\r\n  }[];\r\n}\r\n\r\n// Interface for form data submitted by the user\r\ninterface FormData {\r\n  CityName: string;\r\n}\r\n\r\nconst UpdateCity: React.FC = () => {\r\n  const dispatch: any = useDispatch();\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const toast = useToast();\r\n  const endpoint: string = \"city\";\r\n  const { city, cities } = useSelector(\r\n    (state: { common: UpdateCities }) => state.common\r\n  );\r\n\r\n  // Form handling using react-hook-form\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    formState: { errors },\r\n    reset,\r\n    control,\r\n  } = useForm<FormData>({\r\n    defaultValues: {\r\n      CityName: city?.CityName || \"\",\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Fetch the specific city and all city data when the component mounts\r\n    dispatch(getDataById(id, endpoint));\r\n    dispatch(getData(endpoint));\r\n  }, [id, dispatch]);\r\n\r\n  useEffect(() => {\r\n    // Reset the form values when the city data changes\r\n    if (city) {\r\n      reset({\r\n        CityName: city.CityName,\r\n      });\r\n    }\r\n  }, [city, reset]);\r\n\r\n  const onSubmit = (data: FormData) => {\r\n    // Handle form submission by dispatching the updateData action and fetching updated city data\r\n    dispatch(\r\n      updateData(id, endpoint, { CityName: data.CityName }, navigate, toast)\r\n    ).then(() => {\r\n      dispatch(getData(\"city\"));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Stack h=\"100%\">\r\n      {/* Form */}\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <SimpleGrid columns={3} px={10} py={1} gap={6}>\r\n          <Box>\r\n            {/* City Name Input */}\r\n            <Text fontSize={\"1rem\"} ml=\"2\" mb=\"0.5\">\r\n              City Name\r\n            </Text>\r\n            <Input\r\n              {...register(\"CityName\", { required: true })}\r\n              size={\"sm\"}\r\n              borderColor={errors.CityName ? \"red.500\" : \"gray.400\"}\r\n              borderRadius={\"0.25rem\"}\r\n            />\r\n            {errors.CityName && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                City name is required\r\n              </Text>\r\n            )}\r\n          </Box>\r\n\r\n          <Box\r\n            mt={6}\r\n            display={\"flex\"}\r\n            justifyContent={\"flex-start\"}\r\n            alignItems={\"center\"}\r\n          >\r\n            {/* Update City Button */}\r\n            <Button\r\n              type=\"submit\"\r\n              size={\"sm\"}\r\n              _hover={{ bg: \"#FF9000\" }}\r\n              w=\"8.188rem\"\r\n              bg=\"#FF9000\"\r\n              borderRadius={\"0.25rem\"}\r\n              color=\"whiteAlpha.900\"\r\n              fontWeight={\"700\"}\r\n              fontSize={\"1rem\"}\r\n            >\r\n              Update City\r\n            </Button>\r\n          </Box>\r\n        </SimpleGrid>\r\n      </form>\r\n\r\n      <DevTool control={control} />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default UpdateCity;\r\n"],"names":["dispatch","useDispatch","id","useParams","navigate","useNavigate","toast","useToast","endpoint","_useSelector","useSelector","state","common","city","_useForm","cities","useForm","defaultValues","CityName","handleSubmit","register","errors","formState","reset","control","useEffect","getDataById","getData","_jsxs","Stack","h","children","_jsx","onSubmit","data","updateData","then","SimpleGrid","columns","px","py","gap","Box","Text","fontSize","ml","mb","Input","_objectSpread","required","size","borderColor","borderRadius","color","mt","display","justifyContent","alignItems","Button","type","_hover","bg","w","fontWeight","DevTool"],"sourceRoot":""}