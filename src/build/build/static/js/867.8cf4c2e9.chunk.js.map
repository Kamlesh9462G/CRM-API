{"version":3,"file":"static/js/867.8cf4c2e9.chunk.js","mappings":"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","sources":["pages/user/AddnewUser.tsx"],"sourcesContent":["/*\r\n  AddnewUser Component:\r\n  This component is a form for adding a new user. It provides the following functionalities:\r\n  - Input fields for capturing user details such as name, phone number, email, branch, city, username,\r\n    user type, and password.\r\n  - An option to upload an image for the user.\r\n  - A dropdown for selecting permissions.\r\n  - Validation for required fields and password length.\r\n  - Dispatching Redux actions to fetch branch, user, and city data.\r\n  - Submitting the form data to the server using Redux actions.\r\n  - Navigating to the \"team-list\" page upon successful submission.\r\n\r\n  The form data is handled using the react-hook-form library, and Chakra UI components are used for styling.\r\n*/\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Select as ChakraSelect,\r\n  SimpleGrid,\r\n  Stack,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getData, postData } from \"../../redux/actions/common.action\";\r\nimport Select from \"react-select\";\r\n// import Select from \"react-select\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { DevTool } from \"@hookform/devtools\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\n\r\ninterface AddUsers {\r\n  Email: string;\r\n  Name: string;\r\n  UserName: string;\r\n  UserType: number;\r\n  Phone: number;\r\n  MacAddress: string;\r\n\r\n  City: string;\r\n  Branch: string;\r\n  Password: string;\r\n  // image: any;\r\n  selectedUsers: Array<string>;\r\n}\r\n\r\n// const initialState: AddUsers = {\r\n//   Email: \"\",\r\n//   Name: \"\",\r\n//   UserName: \"\",\r\n//   UserType: \"\",\r\n//   Phone: 0,\r\n//   City: \"\",\r\n//   MacAddress: \"\",\r\n//   Password: \"\",\r\n//   Branch: \"\",\r\n//   Password: \"\",\r\n//   image: null,\r\n// };\r\ninterface imageData {\r\n  file: any;\r\n}\r\nconst initialImage = {\r\n  file: null,\r\n};\r\n\r\nconst AddnewUser: React.FC = () => {\r\n  // const [formData, setFormdata] = useState(null);\r\n  const [image, setImage] = useState<imageData>(initialImage);\r\n\r\n  //getting the values of branch ,users and city using  the useSelector hook from common reducer.\r\n  const { branches, users, cities } = useSelector((state: any) => state.common);\r\n\r\n  // Destructuring the methods and properties from the useForm hook\r\n  const {\r\n    register, // Function to register form inputs\r\n    handleSubmit, // Function to handle form submission\r\n    control, // Form control for inputs\r\n    // setValue, // Function to set form input values\r\n    formState: { errors }, // Object containing form validation errors\r\n  } = useForm<AddUsers>();\r\n\r\n  // Fetch branch, user, and city data when the component mounts\r\n  useEffect(() => {\r\n    dispatch(getData(\"branch\")); // Fetch branch data\r\n    dispatch(getData(\"user\")); // Fetch user data\r\n    dispatch(getData(\"city\")); // Fetch city data\r\n  }, [getData]);\r\n\r\n  const endpoint: string = \"user\"; // API endpoint for posting user data\r\n  const dispatch: any = useDispatch();\r\n  const Navigate = useNavigate();\r\n\r\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    setImage({\r\n      ...image,\r\n      file: file || null, // Store the selected file in the formData\r\n    });\r\n  };\r\n\r\n  const toast = useToast();\r\n\r\n  const onSubmit = (formData: AddUsers) => {\r\n    const requestData = {\r\n      ...formData,\r\n      file: image.file,\r\n    };\r\n\r\n    const selectedPermissions = selectedUsers.map((user: any) => user.label);\r\n    requestData.selectedUsers = selectedPermissions;\r\n\r\n    dispatch(postData(requestData, endpoint, Navigate, toast)).then(() => {\r\n      dispatch(getData(\"user\")); // Fetch updated user data after successful submission\r\n      Navigate(\"/user-list\"); // Navigate to the \"team-list\" page\r\n      console.log(\"ok\");\r\n    });\r\n  };\r\n\r\n  // Create option elements for each branch\r\n  const branchoptions = branches?.map((branch: any) => (\r\n    <option key={branch._id} value={branch.BranchName}>\r\n      {branch.BranchName}\r\n    </option>\r\n  ));\r\n\r\n  // Create option elements for each city\r\n  const cityoptions = cities?.map((city: any) => (\r\n    <option key={city._id} value={city.CityName}>\r\n      {city.CityName}\r\n    </option>\r\n  ));\r\n\r\n  const animatedComponents = makeAnimated();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n\r\n  const handleSelectChange = (selectedOptions: any) => {\r\n    setSelectedUsers(selectedOptions);\r\n  };\r\n\r\n  const filteredUsers = users.filter((user: any) => user.role === 3);\r\n\r\n  // Create options for each user\r\n  const userOptions = filteredUsers?.map((user: any) => ({\r\n    value: user._id,\r\n    label: user.Name,\r\n  }));\r\n\r\n  return (\r\n    <Stack h=\"100%\">\r\n      {/* inputs starts */}\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <SimpleGrid\r\n          columns={[1, 1, 2, 3]} // Set the number of columns for different screen sizes\r\n          autoFlow=\"row\" // Set the flow of the grid items to row\r\n          gap={7}\r\n          px={[2, 5]} // Set the horizontal padding for different screen sizes\r\n          py={[2, 5]} // Set the vertical padding for different screen sizes\r\n          minWidth=\"250px\"\r\n        >\r\n          <Box>\r\n            <FormControl variant=\"floating\" id=\"Name\">\r\n              <Input\r\n                autoComplete=\"off\"\r\n                {...register(\"Name\", {\r\n                  required: \"name is required\",\r\n                })}\r\n                borderColor={errors?.Name ? \"red.500\" : \"gray.400\"}\r\n                borderRadius={\"0.25rem\"}\r\n                size=\"sm\"\r\n                placeholder=\" \"\r\n                className=\"autocomplete-input\"\r\n              />\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Enter Name\r\n              </FormLabel>\r\n              {errors.Name && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  {errors.Name?.message}\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          <Box>\r\n            <FormControl variant=\"floating\" id=\"Phone\">\r\n              <Input\r\n                autoComplete=\"off\"\r\n                {...register(\"Phone\", {\r\n                  required: \"mobile no is required\",\r\n                })}\r\n                borderColor={errors?.Phone ? \"red.500\" : \"gray.400\"}\r\n                borderRadius={\"0.25rem\"}\r\n                size=\"sm\"\r\n                placeholder=\" \"\r\n                type=\"number\"\r\n              />\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Enter Phone No.\r\n              </FormLabel>\r\n              {errors.Phone && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  mobile no is required\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          <Box>\r\n            <FormControl variant=\"floating\" id=\"Email\">\r\n              <Input\r\n                autoComplete=\"off\"\r\n                {...register(\"Email\", {\r\n                  required: \"email ID is required\",\r\n                })}\r\n                borderColor={errors?.Email ? \"red.500\" : \"gray.400\"}\r\n                borderRadius={\"0.25rem\"}\r\n                size=\"sm\"\r\n                placeholder=\" \"\r\n              />\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Enter Email ID\r\n              </FormLabel>\r\n              {errors.Email && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  email ID is required\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          <Box>\r\n            <FormControl variant=\"floating\" id=\"Branch\">\r\n              <ChakraSelect\r\n                {...register(\"Branch\", {\r\n                  required: \"Branch is required\",\r\n                })}\r\n                borderColor={errors?.Branch ? \"red.500\" : \"gray.400\"}\r\n                size=\"sm\"\r\n                borderRadius={\"0.25rem\"}\r\n                placeholder=\"\"\r\n              >\r\n                {\" \"}\r\n                <option value=\"\" disabled selected>\r\n                  Select Branch\r\n                </option>\r\n                {branchoptions}\r\n              </ChakraSelect>\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Branch\r\n              </FormLabel>\r\n              {errors.Branch && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  branch is required\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          <Box>\r\n            <FormControl variant=\"floating\" id=\"City\">\r\n              <ChakraSelect\r\n                {...register(\"City\", {\r\n                  required: \"City is required\",\r\n                })}\r\n                borderColor={errors?.City ? \"red.500\" : \"gray.400\"}\r\n                size=\"sm\"\r\n                borderRadius={\"0.25rem\"}\r\n                placeholder=\"\"\r\n              >\r\n                {\" \"}\r\n                <option value=\"\" disabled selected>\r\n                  Select City\r\n                </option>\r\n                {cityoptions}\r\n              </ChakraSelect>\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                City\r\n              </FormLabel>\r\n              {errors.City && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  City is required\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          <Box>\r\n            <FormControl variant=\"floating\" id=\"UserName\">\r\n              <Input\r\n                autoComplete=\"off\"\r\n                {...register(\"UserName\", {\r\n                  required: \"UserName is required\",\r\n                })}\r\n                borderColor={errors?.UserName ? \"red.500\" : \"gray.400\"}\r\n                borderRadius={\"0.25rem\"}\r\n                size=\"sm\"\r\n                placeholder=\" \"\r\n              />\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Enter Unique Username\r\n              </FormLabel>\r\n              {errors.UserName && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  username is required\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          <Box>\r\n            <FormControl variant=\"floating\" id=\"UserType\">\r\n              <Input\r\n                autoComplete=\"off\"\r\n                {...register(\"UserType\", {\r\n                  required: \"UserType is required\",\r\n                })}\r\n                borderColor={errors?.UserType ? \"red.500\" : \"gray.400\"}\r\n                borderRadius={\"0.25rem\"}\r\n                size=\"sm\"\r\n                placeholder=\" \"\r\n              />\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Enter User Profile\r\n              </FormLabel>\r\n              {errors.UserType && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  user type is required\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box>\r\n          {/* <Box>\r\n            <FormControl variant=\"floating\" id=\"Password\">\r\n              <Input\r\n                autoComplete=\"off\"\r\n                type=\"Password\"\r\n                {...register(\"Password\", {\r\n                  required: \"Password is required\",\r\n                  validate: minLength,\r\n                })}\r\n                borderColor={errors?.Password ? \"red.500\" : \"gray.400\"}\r\n                borderRadius={\"0.25rem\"}\r\n                size=\"sm\"\r\n                placeholder=\" \"\r\n              />\r\n              <FormLabel fontWeight={\"400\"} color={\"gray.600\"}>\r\n                Password\r\n              </FormLabel>\r\n              {errors.Password && (\r\n                <Text color=\"red.500\" fontSize=\"xs\">\r\n                  {errors.Password?.message}\r\n                </Text>\r\n              )}\r\n            </FormControl>\r\n          </Box> */}\r\n          <Box>\r\n            <Input\r\n              // {...register(\"image\", {\r\n              //   required: \"image is required\",\r\n              // })}\r\n              borderColor={\"gray.400\"}\r\n              size=\"sm\"\r\n              type=\"file\"\r\n              borderRadius=\"0.25rem\"\r\n              sx={{\r\n                \"::file-selector-button\": {\r\n                  bg: \"gray.500\",\r\n                  color: \"white\",\r\n                  ml: -6,\r\n                  mt: 0.7,\r\n                  py: 1.45,\r\n                  px: 12,\r\n                  mr: 15,\r\n                  borderRadius: \"0.25rem\",\r\n                  _hover: {\r\n                    bg: \"blue.600\",\r\n                  },\r\n                },\r\n              }}\r\n              flexGrow={1}\r\n              onChange={handleImageChange}\r\n            />\r\n            {/* {errors.image && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n                image is required\r\n              </Text>\r\n            )} */}\r\n          </Box>\r\n          <Box mt=\"-3\">\r\n            <Text fontSize={\"0.9rem\"} ml=\"2\" mb=\"0.5\">\r\n              Permissions\r\n            </Text>\r\n            <Select\r\n              // {...register(\"selectedUsers\", {\r\n              //   required: \"Permisssions is required\",\r\n              // })}\r\n              id=\"assigned-users\"\r\n              name=\"assigned-users\"\r\n              className=\"react-select-sm\"\r\n              styles={{\r\n                control: (provided, state) => ({\r\n                  ...provided,\r\n                  background: \"#fff\",\r\n                  borderColor: \"#9e9e9e\",\r\n                  minHeight: \"30px\",\r\n                  height: \"30px\",\r\n                  // boxShadow: state.isFocused ? null : null,\r\n                }),\r\n\r\n                valueContainer: (provided, state) => ({\r\n                  ...provided,\r\n                  height: \"30px\",\r\n                  padding: \"0 6px\",\r\n                }),\r\n\r\n                input: (provided, state) => ({\r\n                  ...provided,\r\n                  margin: \"0px\",\r\n                }),\r\n                indicatorSeparator: (state) => ({\r\n                  display: \"none\",\r\n                }),\r\n                indicatorsContainer: (provided, state) => ({\r\n                  ...provided,\r\n                  height: \"30px\",\r\n                }),\r\n              }}\r\n              placeholder=\"Select Permisssions\"\r\n              isMulti\r\n              components={animatedComponents}\r\n              options={userOptions}\r\n              value={selectedUsers}\r\n              onChange={handleSelectChange}\r\n            />\r\n            {/* {errors.selectedUsers && (\r\n              <Text color=\"red.500\" fontSize=\"xs\">\r\n               {errors.selectedUsers.message}\r\n              </Text>\r\n            )} */}\r\n          </Box>\r\n          <Box\r\n            display={\"flex\"}\r\n            justifyContent={\"flex-end\"}\r\n            alignItems={\"center\"}\r\n          ></Box>{\" \"}\r\n        </SimpleGrid>\r\n        <Box\r\n          display={\"flex\"}\r\n          justifyContent={\"flex-end\"}\r\n          alignItems={\"center\"}\r\n          mx={4}\r\n        >\r\n          <Button\r\n            type=\"submit\"\r\n            mt={6}\r\n            size={\"sm\"}\r\n            _hover={{ bg: \"#FF9000\" }}\r\n            w=\"8.188rem\"\r\n            bg=\"#FF9000\"\r\n            borderRadius={\"0.25rem\"}\r\n            color=\"whiteAlpha.900\"\r\n            fontWeight={\"700\"}\r\n            fontSize={\"1rem\"}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Box>{\" \"}\r\n      </form>\r\n      {/* inputs end */}\r\n      <DevTool control={control} />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default AddnewUser;\r\n"],"names":["initialImage","file","_errors$Name","_useState","useState","_useState2","_slicedToArray","image","setImage","_useSelector","useSelector","state","common","branches","users","cities","_useForm","useForm","register","handleSubmit","control","errors","formState","useEffect","dispatch","getData","useDispatch","Navigate","useNavigate","toast","useToast","branchoptions","map","branch","_jsx","value","BranchName","children","_id","cityoptions","city","CityName","animatedComponents","makeAnimated","_useState3","_useState4","selectedUsers","setSelectedUsers","filteredUsers","filter","user","role","userOptions","label","Name","_jsxs","Stack","h","onSubmit","formData","requestData","_objectSpread","selectedPermissions","postData","then","console","log","SimpleGrid","columns","autoFlow","gap","px","py","minWidth","Box","FormControl","variant","id","Input","autoComplete","required","borderColor","borderRadius","size","placeholder","className","FormLabel","fontWeight","color","Text","fontSize","message","Phone","type","Email","ChakraSelect","Branch","disabled","selected","City","UserName","UserType","sx","bg","ml","mt","mr","_hover","flexGrow","onChange","e","_e$target$files","target","files","mb","Select","name","styles","provided","background","minHeight","height","valueContainer","padding","input","margin","indicatorSeparator","display","indicatorsContainer","isMulti","components","options","selectedOptions","justifyContent","alignItems","mx","Button","w","DevTool"],"sourceRoot":""}